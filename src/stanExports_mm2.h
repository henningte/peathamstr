// Generated by rstantools.  Do not edit by hand.

/*
    peathamstr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    peathamstr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with peathamstr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_mm2_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 126, column 2 to column 31)",
                                                      " (in 'string', line 128, column 2 to column 33)",
                                                      " (in 'string', line 130, column 2 to column 29)",
                                                      " (in 'string', line 134, column 2 to column 44)",
                                                      " (in 'string', line 135, column 2 to column 47)",
                                                      " (in 'string', line 136, column 2 to column 49)",
                                                      " (in 'string', line 137, column 2 to column 51)",
                                                      " (in 'string', line 138, column 2 to column 57)",
                                                      " (in 'string', line 139, column 2 to column 40)",
                                                      " (in 'string', line 140, column 2 to column 62)",
                                                      " (in 'string', line 141, column 2 to column 65)",
                                                      " (in 'string', line 143, column 2 to column 40)",
                                                      " (in 'string', line 144, column 2 to column 35)",
                                                      " (in 'string', line 145, column 2 to column 35)",
                                                      " (in 'string', line 146, column 2 to column 28)",
                                                      " (in 'string', line 147, column 2 to column 35)",
                                                      " (in 'string', line 148, column 2 to column 46)",
                                                      " (in 'string', line 152, column 2 to column 31)",
                                                      " (in 'string', line 154, column 2 to column 19)",
                                                      " (in 'string', line 156, column 2 to column 26)",
                                                      " (in 'string', line 158, column 2 to column 20)",
                                                      " (in 'string', line 160, column 2 to column 45)",
                                                      " (in 'string', line 161, column 2 to column 80)",
                                                      " (in 'string', line 165, column 2 to column 44)",
                                                      " (in 'string', line 166, column 2 to column 80)",
                                                      " (in 'string', line 168, column 2 to column 45)",
                                                      " (in 'string', line 169, column 2 to column 57)",
                                                      " (in 'string', line 232, column 2 to column 36)",
                                                      " (in 'string', line 236, column 2 to column 71)",
                                                      " (in 'string', line 237, column 2 to column 87)",
                                                      " (in 'string', line 238, column 2 to column 50)",
                                                      " (in 'string', line 239, column 2 to column 41)",
                                                      " (in 'string', line 240, column 2 to column 52)",
                                                      " (in 'string', line 241, column 2 to column 128)",
                                                      " (in 'string', line 242, column 2 to column 44)",
                                                      " (in 'string', line 243, column 2 to column 47)",
                                                      " (in 'string', line 244, column 2 to column 47)",
                                                      " (in 'string', line 245, column 2 to column 47)",
                                                      " (in 'string', line 246, column 2 to column 47)",
                                                      " (in 'string', line 173, column 4 to column 10)",
                                                      " (in 'string', line 172, column 9 to line 174, column 3)",
                                                      " (in 'string', line 171, column 4 to column 20)",
                                                      " (in 'string', line 170, column 19 to line 172, column 3)",
                                                      " (in 'string', line 170, column 2 to line 174, column 3)",
                                                      " (in 'string', line 177, column 2 to column 29)",
                                                      " (in 'string', line 180, column 4 to column 55)",
                                                      " (in 'string', line 179, column 20 to line 181, column 3)",
                                                      " (in 'string', line 179, column 2 to line 181, column 3)",
                                                      " (in 'string', line 183, column 2 to column 29)",
                                                      " (in 'string', line 184, column 2 to column 65)",
                                                      " (in 'string', line 188, column 41 to column 77)",
                                                      " (in 'string', line 188, column 6 to column 77)",
                                                      " (in 'string', line 187, column 27 to line 189, column 5)",
                                                      " (in 'string', line 187, column 4 to line 189, column 5)",
                                                      " (in 'string', line 186, column 24 to line 190, column 3)",
                                                      " (in 'string', line 186, column 2 to line 190, column 3)",
                                                      " (in 'string', line 192, column 2 to column 75)",
                                                      " (in 'string', line 200, column 8 to column 37)",
                                                      " (in 'string', line 199, column 20 to line 201, column 7)",
                                                      " (in 'string', line 199, column 6 to line 201, column 7)",
                                                      " (in 'string', line 198, column 11 to line 202, column 5)",
                                                      " (in 'string', line 196, column 8 to column 45)",
                                                      " (in 'string', line 195, column 20 to line 197, column 7)",
                                                      " (in 'string', line 195, column 6 to line 197, column 7)",
                                                      " (in 'string', line 194, column 22 to line 198, column 5)",
                                                      " (in 'string', line 194, column 4 to line 202, column 5)",
                                                      " (in 'string', line 193, column 57 to line 203, column 3)",
                                                      " (in 'string', line 193, column 2 to line 203, column 3)",
                                                      " (in 'string', line 206, column 6 to column 32)",
                                                      " (in 'string', line 209, column 6 to column 44)",
                                                      " (in 'string', line 205, column 22 to line 210, column 5)",
                                                      " (in 'string', line 205, column 4 to line 210, column 5)",
                                                      " (in 'string', line 212, column 6 to column 40)",
                                                      " (in 'string', line 215, column 6 to column 44)",
                                                      " (in 'string', line 211, column 22 to line 216, column 5)",
                                                      " (in 'string', line 211, column 4 to line 216, column 5)",
                                                      " (in 'string', line 204, column 30 to line 217, column 3)",
                                                      " (in 'string', line 204, column 2 to line 217, column 3)",
                                                      " (in 'string', line 228, column 4 to column 31)",
                                                      " (in 'string', line 229, column 4 to column 71)",
                                                      " (in 'string', line 227, column 60 to line 230, column 3)",
                                                      " (in 'string', line 227, column 9 to line 230, column 3)",
                                                      " (in 'string', line 225, column 4 to column 57)",
                                                      " (in 'string', line 223, column 4 to line 225, column 57)",
                                                      " (in 'string', line 226, column 4 to column 40)",
                                                      " (in 'string', line 222, column 60 to line 227, column 3)",
                                                      " (in 'string', line 222, column 9 to line 230, column 3)",
                                                      " (in 'string', line 219, column 4 to column 31)",
                                                      " (in 'string', line 220, column 4 to column 88)",
                                                      " (in 'string', line 221, column 4 to column 40)",
                                                      " (in 'string', line 218, column 53 to line 222, column 3)",
                                                      " (in 'string', line 218, column 2 to line 230, column 3)",
                                                      " (in 'string', line 233, column 2 to column 40)",
                                                      " (in 'string', line 234, column 2 to column 124)",
                                                      " (in 'string', line 235, column 2 to column 116)",
                                                      " (in 'string', line 248, column 11 to column 15)",
                                                      " (in 'string', line 248, column 4 to column 55)",
                                                      " (in 'string', line 249, column 11 to column 15)",
                                                      " (in 'string', line 249, column 4 to column 61)",
                                                      " (in 'string', line 250, column 4 to column 56)",
                                                      " (in 'string', line 251, column 4 to column 63)",
                                                      " (in 'string', line 252, column 4 to column 65)",
                                                      " (in 'string', line 253, column 4 to column 60)",
                                                      " (in 'string', line 254, column 4 to column 53)",
                                                      " (in 'string', line 257, column 8 to column 66)",
                                                      " (in 'string', line 258, column 8 to column 49)",
                                                      " (in 'string', line 259, column 8 to column 111)",
                                                      " (in 'string', line 261, column 10 to column 51)",
                                                      " (in 'string', line 260, column 53 to line 262, column 9)",
                                                      " (in 'string', line 260, column 8 to line 262, column 9)",
                                                      " (in 'string', line 263, column 8 to column 100)",
                                                      " (in 'string', line 256, column 40 to line 264, column 7)",
                                                      " (in 'string', line 256, column 6 to line 264, column 7)",
                                                      " (in 'string', line 255, column 21 to line 265, column 5)",
                                                      " (in 'string', line 255, column 4 to line 265, column 5)",
                                                      " (in 'string', line 267, column 4 to line 270, column 97)",
                                                      " (in 'string', line 271, column 4 to column 82)",
                                                      " (in 'string', line 247, column 2 to line 277, column 3)",
                                                      " (in 'string', line 328, column 2 to column 41)",
                                                      " (in 'string', line 329, column 2 to column 23)",
                                                      " (in 'string', line 330, column 2 to column 23)",
                                                      " (in 'string', line 331, column 2 to column 23)",
                                                      " (in 'string', line 334, column 4 to column 113)",
                                                      " (in 'string', line 333, column 19 to line 335, column 3)",
                                                      " (in 'string', line 333, column 2 to line 335, column 3)",
                                                      " (in 'string', line 338, column 11 to column 15)",
                                                      " (in 'string', line 338, column 4 to column 58)",
                                                      " (in 'string', line 339, column 11 to column 15)",
                                                      " (in 'string', line 339, column 4 to column 64)",
                                                      " (in 'string', line 340, column 11 to column 15)",
                                                      " (in 'string', line 340, column 4 to column 131)",
                                                      " (in 'string', line 344, column 9 to column 93)",
                                                      " (in 'string', line 343, column 40 to line 345, column 7)",
                                                      " (in 'string', line 343, column 6 to line 345, column 7)",
                                                      " (in 'string', line 342, column 21 to line 346, column 5)",
                                                      " (in 'string', line 342, column 4 to line 346, column 5)",
                                                      " (in 'string', line 347, column 4 to column 29)",
                                                      " (in 'string', line 348, column 4 to column 44)",
                                                      " (in 'string', line 350, column 11 to column 15)",
                                                      " (in 'string', line 350, column 4 to column 120)",
                                                      " (in 'string', line 351, column 11 to column 15)",
                                                      " (in 'string', line 351, column 4 to column 120)",
                                                      " (in 'string', line 355, column 6 to column 32)",
                                                      " (in 'string', line 356, column 13 to column 19)",
                                                      " (in 'string', line 356, column 6 to column 97)",
                                                      " (in 'string', line 357, column 13 to column 19)",
                                                      " (in 'string', line 357, column 6 to column 94)",
                                                      " (in 'string', line 377, column 13 to column 19)",
                                                      " (in 'string', line 377, column 6 to column 58)",
                                                      " (in 'string', line 378, column 13 to column 19)",
                                                      " (in 'string', line 378, column 6 to column 58)",
                                                      " (in 'string', line 380, column 8 to column 30)",
                                                      " (in 'string', line 385, column 10 to column 94)",
                                                      " (in 'string', line 386, column 10 to column 117)",
                                                      " (in 'string', line 384, column 15 to line 387, column 9)",
                                                      " (in 'string', line 382, column 10 to column 73)",
                                                      " (in 'string', line 383, column 10 to column 56)",
                                                      " (in 'string', line 381, column 78 to line 384, column 9)",
                                                      " (in 'string', line 381, column 8 to line 387, column 9)",
                                                      " (in 'string', line 379, column 25 to line 388, column 7)",
                                                      " (in 'string', line 379, column 6 to line 388, column 7)",
                                                      " (in 'string', line 389, column 13 to column 19)",
                                                      " (in 'string', line 389, column 6 to column 56)",
                                                      " (in 'string', line 390, column 13 to column 19)",
                                                      " (in 'string', line 390, column 6 to column 56)",
                                                      " (in 'string', line 392, column 8 to column 30)",
                                                      " (in 'string', line 397, column 10 to column 92)",
                                                      " (in 'string', line 398, column 10 to column 115)",
                                                      " (in 'string', line 396, column 15 to line 399, column 9)",
                                                      " (in 'string', line 394, column 10 to column 71)",
                                                      " (in 'string', line 395, column 10 to column 54)",
                                                      " (in 'string', line 393, column 78 to line 396, column 9)",
                                                      " (in 'string', line 393, column 8 to line 399, column 9)",
                                                      " (in 'string', line 391, column 25 to line 400, column 7)",
                                                      " (in 'string', line 391, column 6 to line 400, column 7)",
                                                      " (in 'string', line 402, column 13 to column 19)",
                                                      " (in 'string', line 402, column 6 to column 161)",
                                                      " (in 'string', line 403, column 13 to column 19)",
                                                      " (in 'string', line 403, column 6 to column 165)",
                                                      " (in 'string', line 404, column 6 to column 38)",
                                                      " (in 'string', line 353, column 21 to line 405, column 5)",
                                                      " (in 'string', line 353, column 4 to line 405, column 5)",
                                                      " (in 'string', line 337, column 2 to line 406, column 3)",
                                                      " (in 'string', line 408, column 2 to column 41)",
                                                      " (in 'string', line 409, column 2 to column 41)",
                                                      " (in 'string', line 410, column 2 to column 41)",
                                                      " (in 'string', line 282, column 2 to column 42)",
                                                      " (in 'string', line 285, column 2 to column 81)",
                                                      " (in 'string', line 287, column 2 to column 32)",
                                                      " (in 'string', line 290, column 4 to column 77)",
                                                      " (in 'string', line 291, column 4 to column 41)",
                                                      " (in 'string', line 292, column 4 to column 62)",
                                                      " (in 'string', line 289, column 21 to line 293, column 3)",
                                                      " (in 'string', line 289, column 2 to line 293, column 3)",
                                                      " (in 'string', line 296, column 2 to column 35)",
                                                      " (in 'string', line 297, column 2 to column 31)",
                                                      " (in 'string', line 299, column 2 to column 44)",
                                                      " (in 'string', line 313, column 6 to column 48)",
                                                      " (in 'string', line 312, column 11 to line 314, column 5)",
                                                      " (in 'string', line 311, column 6 to column 53)",
                                                      " (in 'string', line 309, column 55 to line 312, column 5)",
                                                      " (in 'string', line 309, column 4 to line 314, column 5)",
                                                      " (in 'string', line 308, column 9 to line 315, column 3)",
                                                      " (in 'string', line 306, column 6 to column 47)",
                                                      " (in 'string', line 305, column 11 to line 307, column 5)",
                                                      " (in 'string', line 304, column 6 to column 52)",
                                                      " (in 'string', line 302, column 55 to line 305, column 5)",
                                                      " (in 'string', line 302, column 4 to line 307, column 5)",
                                                      " (in 'string', line 300, column 30 to line 308, column 3)",
                                                      " (in 'string', line 300, column 2 to line 315, column 3)",
                                                      " (in 'string', line 317, column 2 to column 43)",
                                                      " (in 'string', line 318, column 2 to column 67)",
                                                      " (in 'string', line 319, column 2 to column 68)",
                                                      " (in 'string', line 320, column 2 to column 83)",
                                                      " (in 'string', line 321, column 2 to column 83)",
                                                      " (in 'string', line 322, column 2 to column 91)",
                                                      " (in 'string', line 323, column 2 to column 55)",
                                                      " (in 'string', line 324, column 2 to column 159)",
                                                      " (in 'string', line 13, column 2 to column 17)",
                                                      " (in 'string', line 14, column 9 to column 10)",
                                                      " (in 'string', line 14, column 2 to column 18)",
                                                      " (in 'string', line 15, column 9 to column 10)",
                                                      " (in 'string', line 15, column 2 to column 20)",
                                                      " (in 'string', line 16, column 9 to column 10)",
                                                      " (in 'string', line 16, column 2 to column 20)",
                                                      " (in 'string', line 17, column 2 to column 15)",
                                                      " (in 'string', line 19, column 2 to column 24)",
                                                      " (in 'string', line 20, column 2 to column 22)",
                                                      " (in 'string', line 21, column 2 to column 21)",
                                                      " (in 'string', line 22, column 13 to column 18)",
                                                      " (in 'string', line 22, column 2 to column 20)",
                                                      " (in 'string', line 24, column 9 to column 15)",
                                                      " (in 'string', line 24, column 2 to column 32)",
                                                      " (in 'string', line 25, column 9 to column 15)",
                                                      " (in 'string', line 25, column 2 to column 29)",
                                                      " (in 'string', line 26, column 2 to column 26)",
                                                      " (in 'string', line 29, column 2 to column 33)",
                                                      " (in 'string', line 31, column 2 to column 28)",
                                                      " (in 'string', line 34, column 2 to column 36)",
                                                      " (in 'string', line 36, column 2 to column 27)",
                                                      " (in 'string', line 37, column 2 to column 31)",
                                                      " (in 'string', line 39, column 2 to column 18)",
                                                      " (in 'string', line 40, column 14 to column 15)",
                                                      " (in 'string', line 40, column 2 to column 17)",
                                                      " (in 'string', line 41, column 2 to column 32)",
                                                      " (in 'string', line 42, column 2 to column 39)",
                                                      " (in 'string', line 44, column 2 to column 35)",
                                                      " (in 'string', line 45, column 2 to column 34)",
                                                      " (in 'string', line 46, column 2 to column 32)",
                                                      " (in 'string', line 49, column 2 to column 43)",
                                                      " (in 'string', line 50, column 2 to column 17)",
                                                      " (in 'string', line 51, column 15 to column 16)",
                                                      " (in 'string', line 51, column 18 to column 19)",
                                                      " (in 'string', line 51, column 2 to column 21)",
                                                      " (in 'string', line 52, column 2 to column 31)",
                                                      " (in 'string', line 53, column 2 to column 32)",
                                                      " (in 'string', line 54, column 9 to column 29)",
                                                      " (in 'string', line 54, column 2 to column 37)",
                                                      " (in 'string', line 56, column 2 to column 43)",
                                                      " (in 'string', line 57, column 2 to column 32)",
                                                      " (in 'string', line 58, column 2 to column 33)",
                                                      " (in 'string', line 60, column 2 to column 37)",
                                                      " (in 'string', line 61, column 2 to column 13)",
                                                      " (in 'string', line 62, column 2 to column 16)",
                                                      " (in 'string', line 64, column 2 to column 18)",
                                                      " (in 'string', line 65, column 2 to column 20)",
                                                      " (in 'string', line 67, column 2 to column 38)",
                                                      " (in 'string', line 68, column 2 to column 38)",
                                                      " (in 'string', line 69, column 2 to column 38)",
                                                      " (in 'string', line 70, column 2 to column 31)",
                                                      " (in 'string', line 71, column 2 to column 31)",
                                                      " (in 'string', line 72, column 2 to column 31)",
                                                      " (in 'string', line 73, column 2 to column 35)",
                                                      " (in 'string', line 74, column 2 to column 35)",
                                                      " (in 'string', line 75, column 2 to column 35)",
                                                      " (in 'string', line 76, column 2 to column 35)",
                                                      " (in 'string', line 77, column 2 to column 35)",
                                                      " (in 'string', line 78, column 2 to column 35)",
                                                      " (in 'string', line 79, column 2 to column 35)",
                                                      " (in 'string', line 80, column 2 to column 28)",
                                                      " (in 'string', line 81, column 2 to column 28)",
                                                      " (in 'string', line 82, column 2 to column 28)",
                                                      " (in 'string', line 83, column 59 to column 61)",
                                                      " (in 'string', line 83, column 2 to column 63)",
                                                      " (in 'string', line 84, column 46 to column 54)",
                                                      " (in 'string', line 84, column 2 to column 56)",
                                                      " (in 'string', line 85, column 20 to column 28)",
                                                      " (in 'string', line 85, column 2 to column 41)",
                                                      " (in 'string', line 86, column 9 to column 11)",
                                                      " (in 'string', line 86, column 2 to column 24)",
                                                      " (in 'string', line 87, column 2 to column 38)",
                                                      " (in 'string', line 88, column 2 to column 38)",
                                                      " (in 'string', line 89, column 2 to column 56)",
                                                      " (in 'string', line 90, column 2 to column 26)",
                                                      " (in 'string', line 91, column 2 to column 26)",
                                                      " (in 'string', line 92, column 2 to column 26)",
                                                      " (in 'string', line 95, column 2 to column 36)",
                                                      " (in 'string', line 96, column 2 to column 39)",
                                                      " (in 'string', line 97, column 2 to column 52)",
                                                      " (in 'string', line 99, column 2 to column 14)",
                                                      " (in 'string', line 101, column 2 to column 37)",
                                                      " (in 'string', line 104, column 2 to column 52)",
                                                      " (in 'string', line 105, column 2 to column 55)",
                                                      " (in 'string', line 107, column 2 to column 49)",
                                                      " (in 'string', line 109, column 2 to column 32)",
                                                      " (in 'string', line 113, column 4 to column 30)",
                                                      " (in 'string', line 112, column 8 to line 114, column 3)",
                                                      " (in 'string', line 111, column 4 to column 39)",
                                                      " (in 'string', line 110, column 23 to line 112, column 3)",
                                                      " (in 'string', line 110, column 2 to line 114, column 3)",
                                                      " (in 'string', line 115, column 2 to column 40)",
                                                      " (in 'string', line 120, column 4 to column 17)",
                                                      " (in 'string', line 119, column 9 to line 121, column 3)",
                                                      " (in 'string', line 118, column 4 to column 17)",
                                                      " (in 'string', line 117, column 26 to line 119, column 3)",
                                                      " (in 'string', line 117, column 2 to line 121, column 3)",
                                                      " (in 'string', line 128, column 20 to column 25)",
                                                      " (in 'string', line 134, column 28 to column 42)",
                                                      " (in 'string', line 135, column 31 to column 45)",
                                                      " (in 'string', line 136, column 20 to column 42)",
                                                      " (in 'string', line 137, column 20 to column 49)",
                                                      " (in 'string', line 138, column 20 to column 46)",
                                                      " (in 'string', line 139, column 20 to column 38)",
                                                      " (in 'string', line 140, column 48 to column 60)",
                                                      " (in 'string', line 141, column 51 to column 63)",
                                                      " (in 'string', line 143, column 20 to column 24)",
                                                      " (in 'string', line 154, column 9 to column 15)",
                                                      " (in 'string', line 156, column 9 to column 17)",
                                                      " (in 'string', line 158, column 9 to column 10)",
                                                      " (in 'string', line 160, column 29 to column 43)",
                                                      " (in 'string', line 161, column 9 to column 65)",
                                                      " (in 'string', line 165, column 9 to column 35)",
                                                      " (in 'string', line 166, column 9 to column 69)",
                                                      " (in 'string', line 168, column 9 to column 35)",
                                                      " (in 'string', line 169, column 20 to column 46)",
                                                      " (in 'string', line 232, column 20 to column 24)",
                                                      " (in 'string', line 239, column 20 to column 24)",
                                                      " (in 'string', line 240, column 20 to column 24)",
                                                      " (in 'string', line 241, column 20 to column 28)",
                                                      " (in 'string', line 242, column 20 to column 24)",
                                                      " (in 'string', line 243, column 9 to column 13)",
                                                      " (in 'string', line 244, column 9 to column 13)",
                                                      " (in 'string', line 245, column 9 to column 13)",
                                                      " (in 'string', line 246, column 9 to column 13)",
                                                      " (in 'string', line 328, column 9 to column 13)",
                                                      " (in 'string', line 329, column 9 to column 13)",
                                                      " (in 'string', line 330, column 9 to column 13)",
                                                      " (in 'string', line 331, column 9 to column 13)"};
#include <stan_meta_header.hpp>
class model_mm2 final : public model_base_crtp<model_mm2> {
private:
  int N;
  Eigen::Matrix<double, -1, 1> depth;
  Eigen::Matrix<double, -1, 1> obs_age;
  Eigen::Matrix<double, -1, 1> obs_err;
  double min_age;
  int n_lvls;
  int K_fine;
  int K_tot;
  std::vector<int> parent;
  Eigen::Matrix<double, -1, 1> c_depth_bottom;
  Eigen::Matrix<double, -1, 1> c_depth_top;
  double delta_c;
  double acc_mean_prior;
  double acc_shape;
  int scale_shape;
  double mem_mean;
  double mem_strength;
  int nu;
  std::vector<int> which_c;
  int scale_R;
  int inflate_errors;
  double infl_shape_shape;
  double infl_shape_mean;
  double infl_sigma_sd;
  int model_bioturbation;
  int I;
  std::vector<std::vector<int>> smooth_i;
  double L_prior_mean;
  double L_prior_shape;
  Eigen::Matrix<double, -1, 1> n_ind;
  int model_displacement;
  double D_prior_scale;
  int smooth_s;
  int model_hiatus;
  double H_top;
  double H_bottom;
  int N2;
  int N2_c;
  double p1_layer_mass_shape;
  double p2_layer_mass_shape;
  double p3_layer_mass_shape;
  double p1_clymo_par;
  double p2_clymo_par;
  double p3_clymo_par;
  double p1_clymo_alpha_1;
  double p2_clymo_alpha_1;
  double p3_clymo_alpha_1;
  double cumulative_mass0;
  double p1_clymo_alpha_2;
  double p2_clymo_alpha_2;
  double p3_clymo_alpha_2;
  double p1_ac_age;
  double p2_ac_age;
  double p3_ac_age;
  std::vector<int> index_has_mass_measurements;
  std::vector<int> which_c2_all;
  Eigen::Matrix<double, -1, 1> depth2_all;
  Eigen::Matrix<double, -1, 1> layer_mass;
  double clymo_par_memory_p1;
  double clymo_par_memory_p2;
  int index_clymo_par_constant;
  double p1_age0;
  double p2_age0;
  double p3_age0;
  double min_depth;
  double max_depth;
  double data_age_range;
  double L_rate;
  int sample_L;
  double mem_alpha;
  double mem_beta;
  int first_K_fine;
  double acc_shape_adj;
  int infl_1dim__;
  int L_1dim__;
  int bt_error_1dim__;
  int c_ages_1dim__;
  int obs_err_infl_1dim__;
  int bt_age_1dim__;
  int smooth_x_1dim__;
  int age_het_1dim__;
  int disp_yrs_1dim__;
  int Mod_age2_all_1dim__;
 
public:
  ~model_mm2() { }
  
  inline std::string model_name() const final { return "model_mm2"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_mm2(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_mm2_namespace::model_mm2";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 219;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 219;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 219;
      current_statement__ = 219;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 220;
      validate_non_negative_index("depth", "N", N);
      current_statement__ = 221;
      context__.validate_dims("data initialization","depth","double",
          context__.to_vec(N));
      depth = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(depth, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> depth_flat__;
        current_statement__ = 221;
        assign(depth_flat__, nil_index_list(), context__.vals_r("depth"),
          "assigning variable depth_flat__");
        current_statement__ = 221;
        pos__ = 1;
        current_statement__ = 221;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 221;
          assign(depth, cons_list(index_uni(sym1__), nil_index_list()),
            depth_flat__[(pos__ - 1)], "assigning variable depth");
          current_statement__ = 221;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 222;
      validate_non_negative_index("obs_age", "N", N);
      current_statement__ = 223;
      context__.validate_dims("data initialization","obs_age","double",
          context__.to_vec(N));
      obs_age = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(obs_age, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> obs_age_flat__;
        current_statement__ = 223;
        assign(obs_age_flat__, nil_index_list(), context__.vals_r("obs_age"),
          "assigning variable obs_age_flat__");
        current_statement__ = 223;
        pos__ = 1;
        current_statement__ = 223;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 223;
          assign(obs_age, cons_list(index_uni(sym1__), nil_index_list()),
            obs_age_flat__[(pos__ - 1)], "assigning variable obs_age");
          current_statement__ = 223;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 224;
      validate_non_negative_index("obs_err", "N", N);
      current_statement__ = 225;
      context__.validate_dims("data initialization","obs_err","double",
          context__.to_vec(N));
      obs_err = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(obs_err, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> obs_err_flat__;
        current_statement__ = 225;
        assign(obs_err_flat__, nil_index_list(), context__.vals_r("obs_err"),
          "assigning variable obs_err_flat__");
        current_statement__ = 225;
        pos__ = 1;
        current_statement__ = 225;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 225;
          assign(obs_err, cons_list(index_uni(sym1__), nil_index_list()),
            obs_err_flat__[(pos__ - 1)], "assigning variable obs_err");
          current_statement__ = 225;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 226;
      context__.validate_dims("data initialization","min_age","double",
          context__.to_vec());
      min_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 226;
      min_age = context__.vals_r("min_age")[(1 - 1)];
      current_statement__ = 227;
      context__.validate_dims("data initialization","n_lvls","int",
          context__.to_vec());
      n_lvls = std::numeric_limits<int>::min();
      
      current_statement__ = 227;
      n_lvls = context__.vals_i("n_lvls")[(1 - 1)];
      current_statement__ = 227;
      current_statement__ = 227;
      check_greater_or_equal(function__, "n_lvls", n_lvls, 1);
      current_statement__ = 228;
      context__.validate_dims("data initialization","K_fine","int",
          context__.to_vec());
      K_fine = std::numeric_limits<int>::min();
      
      current_statement__ = 228;
      K_fine = context__.vals_i("K_fine")[(1 - 1)];
      current_statement__ = 228;
      current_statement__ = 228;
      check_greater_or_equal(function__, "K_fine", K_fine, 0);
      current_statement__ = 229;
      context__.validate_dims("data initialization","K_tot","int",
          context__.to_vec());
      K_tot = std::numeric_limits<int>::min();
      
      current_statement__ = 229;
      K_tot = context__.vals_i("K_tot")[(1 - 1)];
      current_statement__ = 229;
      current_statement__ = 229;
      check_greater_or_equal(function__, "K_tot", K_tot, 0);
      current_statement__ = 230;
      validate_non_negative_index("parent", "K_tot", K_tot);
      current_statement__ = 231;
      context__.validate_dims("data initialization","parent","int",
          context__.to_vec(K_tot));
      parent = std::vector<int>(K_tot, std::numeric_limits<int>::min());
      
      current_statement__ = 231;
      assign(parent, nil_index_list(), context__.vals_i("parent"),
        "assigning variable parent");
      current_statement__ = 232;
      validate_non_negative_index("c_depth_bottom", "K_fine", K_fine);
      current_statement__ = 233;
      context__.validate_dims("data initialization","c_depth_bottom",
          "double",context__.to_vec(K_fine));
      c_depth_bottom = Eigen::Matrix<double, -1, 1>(K_fine);
      stan::math::fill(c_depth_bottom, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> c_depth_bottom_flat__;
        current_statement__ = 233;
        assign(c_depth_bottom_flat__, nil_index_list(),
          context__.vals_r("c_depth_bottom"),
          "assigning variable c_depth_bottom_flat__");
        current_statement__ = 233;
        pos__ = 1;
        current_statement__ = 233;
        for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
          current_statement__ = 233;
          assign(c_depth_bottom,
            cons_list(index_uni(sym1__), nil_index_list()),
            c_depth_bottom_flat__[(pos__ - 1)],
            "assigning variable c_depth_bottom");
          current_statement__ = 233;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 234;
      validate_non_negative_index("c_depth_top", "K_fine", K_fine);
      current_statement__ = 235;
      context__.validate_dims("data initialization","c_depth_top","double",
          context__.to_vec(K_fine));
      c_depth_top = Eigen::Matrix<double, -1, 1>(K_fine);
      stan::math::fill(c_depth_top, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> c_depth_top_flat__;
        current_statement__ = 235;
        assign(c_depth_top_flat__, nil_index_list(),
          context__.vals_r("c_depth_top"),
          "assigning variable c_depth_top_flat__");
        current_statement__ = 235;
        pos__ = 1;
        current_statement__ = 235;
        for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
          current_statement__ = 235;
          assign(c_depth_top, cons_list(index_uni(sym1__), nil_index_list()),
            c_depth_top_flat__[(pos__ - 1)], "assigning variable c_depth_top");
          current_statement__ = 235;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 236;
      context__.validate_dims("data initialization","delta_c","double",
          context__.to_vec());
      delta_c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 236;
      delta_c = context__.vals_r("delta_c")[(1 - 1)];
      current_statement__ = 236;
      current_statement__ = 236;
      check_greater_or_equal(function__, "delta_c", delta_c, 0);
      current_statement__ = 237;
      context__.validate_dims("data initialization","acc_mean_prior",
          "double",context__.to_vec());
      acc_mean_prior = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 237;
      acc_mean_prior = context__.vals_r("acc_mean_prior")[(1 - 1)];
      current_statement__ = 237;
      current_statement__ = 237;
      check_greater_or_equal(function__, "acc_mean_prior", acc_mean_prior, 0);
      current_statement__ = 238;
      context__.validate_dims("data initialization","acc_shape","double",
          context__.to_vec());
      acc_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 238;
      acc_shape = context__.vals_r("acc_shape")[(1 - 1)];
      current_statement__ = 238;
      current_statement__ = 238;
      check_greater_or_equal(function__, "acc_shape", acc_shape, 0);
      current_statement__ = 239;
      context__.validate_dims("data initialization","scale_shape","int",
          context__.to_vec());
      scale_shape = std::numeric_limits<int>::min();
      
      current_statement__ = 239;
      scale_shape = context__.vals_i("scale_shape")[(1 - 1)];
      current_statement__ = 239;
      current_statement__ = 239;
      check_greater_or_equal(function__, "scale_shape", scale_shape, 0);
      current_statement__ = 239;
      current_statement__ = 239;
      check_less_or_equal(function__, "scale_shape", scale_shape, 1);
      current_statement__ = 240;
      context__.validate_dims("data initialization","mem_mean","double",
          context__.to_vec());
      mem_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 240;
      mem_mean = context__.vals_r("mem_mean")[(1 - 1)];
      current_statement__ = 240;
      current_statement__ = 240;
      check_greater_or_equal(function__, "mem_mean", mem_mean, 0);
      current_statement__ = 241;
      context__.validate_dims("data initialization","mem_strength","double",
          context__.to_vec());
      mem_strength = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 241;
      mem_strength = context__.vals_r("mem_strength")[(1 - 1)];
      current_statement__ = 241;
      current_statement__ = 241;
      check_greater_or_equal(function__, "mem_strength", mem_strength, 0);
      current_statement__ = 242;
      context__.validate_dims("data initialization","nu","int",
          context__.to_vec());
      nu = std::numeric_limits<int>::min();
      
      current_statement__ = 242;
      nu = context__.vals_i("nu")[(1 - 1)];
      current_statement__ = 242;
      current_statement__ = 242;
      check_greater_or_equal(function__, "nu", nu, 0);
      current_statement__ = 243;
      validate_non_negative_index("which_c", "N", N);
      current_statement__ = 244;
      context__.validate_dims("data initialization","which_c","int",
          context__.to_vec(N));
      which_c = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 244;
      assign(which_c, nil_index_list(), context__.vals_i("which_c"),
        "assigning variable which_c");
      current_statement__ = 245;
      context__.validate_dims("data initialization","scale_R","int",
          context__.to_vec());
      scale_R = std::numeric_limits<int>::min();
      
      current_statement__ = 245;
      scale_R = context__.vals_i("scale_R")[(1 - 1)];
      current_statement__ = 245;
      current_statement__ = 245;
      check_greater_or_equal(function__, "scale_R", scale_R, 0);
      current_statement__ = 245;
      current_statement__ = 245;
      check_less_or_equal(function__, "scale_R", scale_R, 1);
      current_statement__ = 246;
      context__.validate_dims("data initialization","inflate_errors","int",
          context__.to_vec());
      inflate_errors = std::numeric_limits<int>::min();
      
      current_statement__ = 246;
      inflate_errors = context__.vals_i("inflate_errors")[(1 - 1)];
      current_statement__ = 246;
      current_statement__ = 246;
      check_greater_or_equal(function__, "inflate_errors", inflate_errors, 0);
      current_statement__ = 246;
      current_statement__ = 246;
      check_less_or_equal(function__, "inflate_errors", inflate_errors, 1);
      current_statement__ = 247;
      context__.validate_dims("data initialization","infl_shape_shape",
          "double",context__.to_vec());
      infl_shape_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 247;
      infl_shape_shape = context__.vals_r("infl_shape_shape")[(1 - 1)];
      current_statement__ = 247;
      current_statement__ = 247;
      check_greater_or_equal(function__, "infl_shape_shape",
                             infl_shape_shape, 0);
      current_statement__ = 248;
      context__.validate_dims("data initialization","infl_shape_mean",
          "double",context__.to_vec());
      infl_shape_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 248;
      infl_shape_mean = context__.vals_r("infl_shape_mean")[(1 - 1)];
      current_statement__ = 248;
      current_statement__ = 248;
      check_greater_or_equal(function__, "infl_shape_mean", infl_shape_mean,
                             0);
      current_statement__ = 249;
      context__.validate_dims("data initialization","infl_sigma_sd","double",
          context__.to_vec());
      infl_sigma_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 249;
      infl_sigma_sd = context__.vals_r("infl_sigma_sd")[(1 - 1)];
      current_statement__ = 249;
      current_statement__ = 249;
      check_greater_or_equal(function__, "infl_sigma_sd", infl_sigma_sd, 0);
      current_statement__ = 250;
      context__.validate_dims("data initialization","model_bioturbation",
          "int",context__.to_vec());
      model_bioturbation = std::numeric_limits<int>::min();
      
      current_statement__ = 250;
      model_bioturbation = context__.vals_i("model_bioturbation")[(1 - 1)];
      current_statement__ = 250;
      current_statement__ = 250;
      check_greater_or_equal(function__, "model_bioturbation",
                             model_bioturbation, 0);
      current_statement__ = 250;
      current_statement__ = 250;
      check_less_or_equal(function__, "model_bioturbation",
                          model_bioturbation, 1);
      current_statement__ = 251;
      context__.validate_dims("data initialization","I","int",
          context__.to_vec());
      I = std::numeric_limits<int>::min();
      
      current_statement__ = 251;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 251;
      current_statement__ = 251;
      check_greater_or_equal(function__, "I", I, 0);
      current_statement__ = 252;
      validate_non_negative_index("smooth_i", "I", I);
      current_statement__ = 253;
      validate_non_negative_index("smooth_i", "N", N);
      current_statement__ = 254;
      context__.validate_dims("data initialization","smooth_i","int",
          context__.to_vec(I, N));
      smooth_i = std::vector<std::vector<int>>(I, std::vector<int>(N, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> smooth_i_flat__;
        current_statement__ = 254;
        assign(smooth_i_flat__, nil_index_list(),
          context__.vals_i("smooth_i"), "assigning variable smooth_i_flat__");
        current_statement__ = 254;
        pos__ = 1;
        current_statement__ = 254;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 254;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 254;
            assign(smooth_i,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              smooth_i_flat__[(pos__ - 1)], "assigning variable smooth_i");
            current_statement__ = 254;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 255;
      context__.validate_dims("data initialization","L_prior_mean","double",
          context__.to_vec());
      L_prior_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 255;
      L_prior_mean = context__.vals_r("L_prior_mean")[(1 - 1)];
      current_statement__ = 255;
      current_statement__ = 255;
      check_greater_or_equal(function__, "L_prior_mean", L_prior_mean, 0);
      current_statement__ = 256;
      context__.validate_dims("data initialization","L_prior_shape","double",
          context__.to_vec());
      L_prior_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 256;
      L_prior_shape = context__.vals_r("L_prior_shape")[(1 - 1)];
      current_statement__ = 256;
      current_statement__ = 256;
      check_greater_or_equal(function__, "L_prior_shape", L_prior_shape, 0);
      current_statement__ = 257;
      validate_non_negative_index("n_ind", "N * model_bioturbation",
                                  (N * model_bioturbation));
      current_statement__ = 258;
      context__.validate_dims("data initialization","n_ind","double",
          context__.to_vec((N * model_bioturbation)));
      n_ind = Eigen::Matrix<double, -1, 1>((N * model_bioturbation));
      stan::math::fill(n_ind, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> n_ind_flat__;
        current_statement__ = 258;
        assign(n_ind_flat__, nil_index_list(), context__.vals_r("n_ind"),
          "assigning variable n_ind_flat__");
        current_statement__ = 258;
        pos__ = 1;
        current_statement__ = 258;
        for (int sym1__ = 1; sym1__ <= (N * model_bioturbation); ++sym1__) {
          current_statement__ = 258;
          assign(n_ind, cons_list(index_uni(sym1__), nil_index_list()),
            n_ind_flat__[(pos__ - 1)], "assigning variable n_ind");
          current_statement__ = 258;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 259;
      context__.validate_dims("data initialization","model_displacement",
          "int",context__.to_vec());
      model_displacement = std::numeric_limits<int>::min();
      
      current_statement__ = 259;
      model_displacement = context__.vals_i("model_displacement")[(1 - 1)];
      current_statement__ = 259;
      current_statement__ = 259;
      check_greater_or_equal(function__, "model_displacement",
                             model_displacement, 0);
      current_statement__ = 259;
      current_statement__ = 259;
      check_less_or_equal(function__, "model_displacement",
                          model_displacement, 1);
      current_statement__ = 260;
      context__.validate_dims("data initialization","D_prior_scale","double",
          context__.to_vec());
      D_prior_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 260;
      D_prior_scale = context__.vals_r("D_prior_scale")[(1 - 1)];
      current_statement__ = 260;
      current_statement__ = 260;
      check_greater_or_equal(function__, "D_prior_scale", D_prior_scale, 0);
      current_statement__ = 261;
      context__.validate_dims("data initialization","smooth_s","int",
          context__.to_vec());
      smooth_s = std::numeric_limits<int>::min();
      
      current_statement__ = 261;
      smooth_s = context__.vals_i("smooth_s")[(1 - 1)];
      current_statement__ = 261;
      current_statement__ = 261;
      check_greater_or_equal(function__, "smooth_s", smooth_s, 0);
      current_statement__ = 261;
      current_statement__ = 261;
      check_less_or_equal(function__, "smooth_s", smooth_s, 1);
      current_statement__ = 262;
      context__.validate_dims("data initialization","model_hiatus","int",
          context__.to_vec());
      model_hiatus = std::numeric_limits<int>::min();
      
      current_statement__ = 262;
      model_hiatus = context__.vals_i("model_hiatus")[(1 - 1)];
      current_statement__ = 262;
      current_statement__ = 262;
      check_greater_or_equal(function__, "model_hiatus", model_hiatus, 0);
      current_statement__ = 262;
      current_statement__ = 262;
      check_less_or_equal(function__, "model_hiatus", model_hiatus, 1);
      current_statement__ = 263;
      context__.validate_dims("data initialization","H_top","double",
          context__.to_vec());
      H_top = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 263;
      H_top = context__.vals_r("H_top")[(1 - 1)];
      current_statement__ = 264;
      context__.validate_dims("data initialization","H_bottom","double",
          context__.to_vec());
      H_bottom = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 264;
      H_bottom = context__.vals_r("H_bottom")[(1 - 1)];
      current_statement__ = 265;
      context__.validate_dims("data initialization","N2","int",
          context__.to_vec());
      N2 = std::numeric_limits<int>::min();
      
      current_statement__ = 265;
      N2 = context__.vals_i("N2")[(1 - 1)];
      current_statement__ = 265;
      current_statement__ = 265;
      check_greater_or_equal(function__, "N2", N2, 0);
      current_statement__ = 266;
      context__.validate_dims("data initialization","N2_c","int",
          context__.to_vec());
      N2_c = std::numeric_limits<int>::min();
      
      current_statement__ = 266;
      N2_c = context__.vals_i("N2_c")[(1 - 1)];
      current_statement__ = 266;
      current_statement__ = 266;
      check_greater_or_equal(function__, "N2_c", N2_c, 0);
      current_statement__ = 267;
      context__.validate_dims("data initialization","p1_layer_mass_shape",
          "double",context__.to_vec());
      p1_layer_mass_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 267;
      p1_layer_mass_shape = context__.vals_r("p1_layer_mass_shape")[(1 - 1)];
      current_statement__ = 267;
      current_statement__ = 267;
      check_greater_or_equal(function__, "p1_layer_mass_shape",
                             p1_layer_mass_shape, 0);
      current_statement__ = 268;
      context__.validate_dims("data initialization","p2_layer_mass_shape",
          "double",context__.to_vec());
      p2_layer_mass_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 268;
      p2_layer_mass_shape = context__.vals_r("p2_layer_mass_shape")[(1 - 1)];
      current_statement__ = 268;
      current_statement__ = 268;
      check_greater_or_equal(function__, "p2_layer_mass_shape",
                             p2_layer_mass_shape, 0);
      current_statement__ = 269;
      context__.validate_dims("data initialization","p3_layer_mass_shape",
          "double",context__.to_vec());
      p3_layer_mass_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 269;
      p3_layer_mass_shape = context__.vals_r("p3_layer_mass_shape")[(1 - 1)];
      current_statement__ = 269;
      current_statement__ = 269;
      check_greater_or_equal(function__, "p3_layer_mass_shape",
                             p3_layer_mass_shape, 0);
      current_statement__ = 270;
      context__.validate_dims("data initialization","p1_clymo_par","double",
          context__.to_vec());
      p1_clymo_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 270;
      p1_clymo_par = context__.vals_r("p1_clymo_par")[(1 - 1)];
      current_statement__ = 270;
      current_statement__ = 270;
      check_greater_or_equal(function__, "p1_clymo_par", p1_clymo_par, 0);
      current_statement__ = 271;
      context__.validate_dims("data initialization","p2_clymo_par","double",
          context__.to_vec());
      p2_clymo_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 271;
      p2_clymo_par = context__.vals_r("p2_clymo_par")[(1 - 1)];
      current_statement__ = 271;
      current_statement__ = 271;
      check_greater_or_equal(function__, "p2_clymo_par", p2_clymo_par, 0);
      current_statement__ = 272;
      context__.validate_dims("data initialization","p3_clymo_par","double",
          context__.to_vec());
      p3_clymo_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 272;
      p3_clymo_par = context__.vals_r("p3_clymo_par")[(1 - 1)];
      current_statement__ = 272;
      current_statement__ = 272;
      check_greater_or_equal(function__, "p3_clymo_par", p3_clymo_par, 0);
      current_statement__ = 273;
      context__.validate_dims("data initialization","p1_clymo_alpha_1",
          "double",context__.to_vec());
      p1_clymo_alpha_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 273;
      p1_clymo_alpha_1 = context__.vals_r("p1_clymo_alpha_1")[(1 - 1)];
      current_statement__ = 273;
      current_statement__ = 273;
      check_greater_or_equal(function__, "p1_clymo_alpha_1",
                             p1_clymo_alpha_1, 0);
      current_statement__ = 274;
      context__.validate_dims("data initialization","p2_clymo_alpha_1",
          "double",context__.to_vec());
      p2_clymo_alpha_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 274;
      p2_clymo_alpha_1 = context__.vals_r("p2_clymo_alpha_1")[(1 - 1)];
      current_statement__ = 274;
      current_statement__ = 274;
      check_greater_or_equal(function__, "p2_clymo_alpha_1",
                             p2_clymo_alpha_1, 0);
      current_statement__ = 275;
      context__.validate_dims("data initialization","p3_clymo_alpha_1",
          "double",context__.to_vec());
      p3_clymo_alpha_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 275;
      p3_clymo_alpha_1 = context__.vals_r("p3_clymo_alpha_1")[(1 - 1)];
      current_statement__ = 275;
      current_statement__ = 275;
      check_greater_or_equal(function__, "p3_clymo_alpha_1",
                             p3_clymo_alpha_1, 0);
      current_statement__ = 276;
      context__.validate_dims("data initialization","cumulative_mass0",
          "double",context__.to_vec());
      cumulative_mass0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 276;
      cumulative_mass0 = context__.vals_r("cumulative_mass0")[(1 - 1)];
      current_statement__ = 276;
      current_statement__ = 276;
      check_greater_or_equal(function__, "cumulative_mass0",
                             cumulative_mass0, 0);
      current_statement__ = 277;
      context__.validate_dims("data initialization","p1_clymo_alpha_2",
          "double",context__.to_vec());
      p1_clymo_alpha_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 277;
      p1_clymo_alpha_2 = context__.vals_r("p1_clymo_alpha_2")[(1 - 1)];
      current_statement__ = 277;
      current_statement__ = 277;
      check_greater_or_equal(function__, "p1_clymo_alpha_2",
                             p1_clymo_alpha_2, 0);
      current_statement__ = 278;
      context__.validate_dims("data initialization","p2_clymo_alpha_2",
          "double",context__.to_vec());
      p2_clymo_alpha_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 278;
      p2_clymo_alpha_2 = context__.vals_r("p2_clymo_alpha_2")[(1 - 1)];
      current_statement__ = 278;
      current_statement__ = 278;
      check_greater_or_equal(function__, "p2_clymo_alpha_2",
                             p2_clymo_alpha_2, 0);
      current_statement__ = 279;
      context__.validate_dims("data initialization","p3_clymo_alpha_2",
          "double",context__.to_vec());
      p3_clymo_alpha_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 279;
      p3_clymo_alpha_2 = context__.vals_r("p3_clymo_alpha_2")[(1 - 1)];
      current_statement__ = 279;
      current_statement__ = 279;
      check_greater_or_equal(function__, "p3_clymo_alpha_2",
                             p3_clymo_alpha_2, 0);
      current_statement__ = 280;
      context__.validate_dims("data initialization","p1_ac_age","double",
          context__.to_vec());
      p1_ac_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 280;
      p1_ac_age = context__.vals_r("p1_ac_age")[(1 - 1)];
      current_statement__ = 280;
      current_statement__ = 280;
      check_greater_or_equal(function__, "p1_ac_age", p1_ac_age, 0);
      current_statement__ = 281;
      context__.validate_dims("data initialization","p2_ac_age","double",
          context__.to_vec());
      p2_ac_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 281;
      p2_ac_age = context__.vals_r("p2_ac_age")[(1 - 1)];
      current_statement__ = 281;
      current_statement__ = 281;
      check_greater_or_equal(function__, "p2_ac_age", p2_ac_age, 0);
      current_statement__ = 282;
      context__.validate_dims("data initialization","p3_ac_age","double",
          context__.to_vec());
      p3_ac_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 282;
      p3_ac_age = context__.vals_r("p3_ac_age")[(1 - 1)];
      current_statement__ = 282;
      current_statement__ = 282;
      check_greater_or_equal(function__, "p3_ac_age", p3_ac_age, 0);
      current_statement__ = 283;
      validate_non_negative_index("index_has_mass_measurements", "N2", N2);
      current_statement__ = 284;
      context__.validate_dims("data initialization",
          "index_has_mass_measurements","int",context__.to_vec(N2));
      index_has_mass_measurements = std::vector<int>(N2, std::numeric_limits<int>::min());
      
      current_statement__ = 284;
      assign(index_has_mass_measurements, nil_index_list(),
        context__.vals_i("index_has_mass_measurements"),
        "assigning variable index_has_mass_measurements");
      current_statement__ = 284;
      for (int sym1__ = 1; sym1__ <= N2; ++sym1__) {
        current_statement__ = 284;
        current_statement__ = 284;
        check_greater_or_equal(function__,
                               "index_has_mass_measurements[sym1__]",
                               index_has_mass_measurements[(sym1__ - 1)], 1);
      }
      current_statement__ = 284;
      for (int sym1__ = 1; sym1__ <= N2; ++sym1__) {
        current_statement__ = 284;
        current_statement__ = 284;
        check_less_or_equal(function__,
                            "index_has_mass_measurements[sym1__]",
                            index_has_mass_measurements[(sym1__ - 1)], N2_c);
      }
      current_statement__ = 285;
      validate_non_negative_index("which_c2_all", "N2_c + 1", (N2_c + 1));
      current_statement__ = 286;
      context__.validate_dims("data initialization","which_c2_all","int",
          context__.to_vec((N2_c + 1)));
      which_c2_all = std::vector<int>((N2_c + 1), std::numeric_limits<int>::min());
      
      current_statement__ = 286;
      assign(which_c2_all, nil_index_list(),
        context__.vals_i("which_c2_all"), "assigning variable which_c2_all");
      current_statement__ = 286;
      for (int sym1__ = 1; sym1__ <= (N2_c + 1); ++sym1__) {
        current_statement__ = 286;
        current_statement__ = 286;
        check_greater_or_equal(function__, "which_c2_all[sym1__]",
                               which_c2_all[(sym1__ - 1)], 1);}
      current_statement__ = 286;
      for (int sym1__ = 1; sym1__ <= (N2_c + 1); ++sym1__) {
        current_statement__ = 286;
        current_statement__ = 286;
        check_less_or_equal(function__, "which_c2_all[sym1__]",
                            which_c2_all[(sym1__ - 1)], K_fine);}
      current_statement__ = 287;
      validate_non_negative_index("depth2_all", "N2_c + 1", (N2_c + 1));
      current_statement__ = 288;
      context__.validate_dims("data initialization","depth2_all","double",
          context__.to_vec((N2_c + 1)));
      depth2_all = Eigen::Matrix<double, -1, 1>((N2_c + 1));
      stan::math::fill(depth2_all, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> depth2_all_flat__;
        current_statement__ = 288;
        assign(depth2_all_flat__, nil_index_list(),
          context__.vals_r("depth2_all"),
          "assigning variable depth2_all_flat__");
        current_statement__ = 288;
        pos__ = 1;
        current_statement__ = 288;
        for (int sym1__ = 1; sym1__ <= (N2_c + 1); ++sym1__) {
          current_statement__ = 288;
          assign(depth2_all, cons_list(index_uni(sym1__), nil_index_list()),
            depth2_all_flat__[(pos__ - 1)], "assigning variable depth2_all");
          current_statement__ = 288;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 288;
      for (int sym1__ = 1; sym1__ <= (N2_c + 1); ++sym1__) {
        current_statement__ = 288;
        current_statement__ = 288;
        check_greater_or_equal(function__, "depth2_all[sym1__]",
                               depth2_all[(sym1__ - 1)], 0);}
      current_statement__ = 289;
      validate_non_negative_index("layer_mass", "N2", N2);
      current_statement__ = 290;
      context__.validate_dims("data initialization","layer_mass","double",
          context__.to_vec(N2));
      layer_mass = Eigen::Matrix<double, -1, 1>(N2);
      stan::math::fill(layer_mass, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> layer_mass_flat__;
        current_statement__ = 290;
        assign(layer_mass_flat__, nil_index_list(),
          context__.vals_r("layer_mass"),
          "assigning variable layer_mass_flat__");
        current_statement__ = 290;
        pos__ = 1;
        current_statement__ = 290;
        for (int sym1__ = 1; sym1__ <= N2; ++sym1__) {
          current_statement__ = 290;
          assign(layer_mass, cons_list(index_uni(sym1__), nil_index_list()),
            layer_mass_flat__[(pos__ - 1)], "assigning variable layer_mass");
          current_statement__ = 290;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 291;
      context__.validate_dims("data initialization","clymo_par_memory_p1",
          "double",context__.to_vec());
      clymo_par_memory_p1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 291;
      clymo_par_memory_p1 = context__.vals_r("clymo_par_memory_p1")[(1 - 1)];
      current_statement__ = 291;
      current_statement__ = 291;
      check_greater_or_equal(function__, "clymo_par_memory_p1",
                             clymo_par_memory_p1, 0);
      current_statement__ = 292;
      context__.validate_dims("data initialization","clymo_par_memory_p2",
          "double",context__.to_vec());
      clymo_par_memory_p2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 292;
      clymo_par_memory_p2 = context__.vals_r("clymo_par_memory_p2")[(1 - 1)];
      current_statement__ = 292;
      current_statement__ = 292;
      check_greater_or_equal(function__, "clymo_par_memory_p2",
                             clymo_par_memory_p2, 0);
      current_statement__ = 293;
      context__.validate_dims("data initialization",
          "index_clymo_par_constant","int",context__.to_vec());
      index_clymo_par_constant = std::numeric_limits<int>::min();
      
      current_statement__ = 293;
      index_clymo_par_constant = context__.vals_i("index_clymo_par_constant")[
          (1 - 1)];
      current_statement__ = 293;
      current_statement__ = 293;
      check_greater_or_equal(function__, "index_clymo_par_constant",
                             index_clymo_par_constant, 1);
      current_statement__ = 293;
      current_statement__ = 293;
      check_less_or_equal(function__, "index_clymo_par_constant",
                          index_clymo_par_constant, N2_c);
      current_statement__ = 294;
      context__.validate_dims("data initialization","p1_age0","double",
          context__.to_vec());
      p1_age0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 294;
      p1_age0 = context__.vals_r("p1_age0")[(1 - 1)];
      current_statement__ = 294;
      current_statement__ = 294;
      check_greater_or_equal(function__, "p1_age0", p1_age0, 0);
      current_statement__ = 295;
      context__.validate_dims("data initialization","p2_age0","double",
          context__.to_vec());
      p2_age0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 295;
      p2_age0 = context__.vals_r("p2_age0")[(1 - 1)];
      current_statement__ = 295;
      current_statement__ = 295;
      check_greater_or_equal(function__, "p2_age0", p2_age0, 0);
      current_statement__ = 296;
      context__.validate_dims("data initialization","p3_age0","double",
          context__.to_vec());
      p3_age0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 296;
      p3_age0 = context__.vals_r("p3_age0")[(1 - 1)];
      current_statement__ = 296;
      current_statement__ = 296;
      check_greater_or_equal(function__, "p3_age0", p3_age0, 0);
      current_statement__ = 297;
      min_depth = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 297;
      min_depth = min(c_depth_top);
      current_statement__ = 298;
      max_depth = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 298;
      max_depth = max(c_depth_bottom);
      current_statement__ = 299;
      data_age_range = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 299;
      data_age_range = (max(obs_age) - min(obs_age));
      current_statement__ = 300;
      L_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 301;
      sample_L = std::numeric_limits<int>::min();
      
      current_statement__ = 302;
      mem_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 302;
      mem_alpha = (mem_strength * mem_mean);
      current_statement__ = 303;
      mem_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 303;
      mem_beta = (mem_strength * (1 - mem_mean));
      current_statement__ = 304;
      first_K_fine = std::numeric_limits<int>::min();
      
      current_statement__ = 304;
      first_K_fine = ((K_tot - K_fine) + 1);
      current_statement__ = 305;
      acc_shape_adj = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 310;
      if (logical_eq(scale_shape, 1)) {
        current_statement__ = 308;
        acc_shape_adj = (acc_shape * n_lvls);
      } else {
        current_statement__ = 306;
        acc_shape_adj = acc_shape;
      }
      current_statement__ = 311;
      L_rate = (L_prior_shape / L_prior_mean);
      current_statement__ = 316;
      if (logical_eq(L_prior_shape, 0)) {
        current_statement__ = 314;
        sample_L = 0;
      } else {
        current_statement__ = 312;
        sample_L = 1;
      }
      current_statement__ = 301;
      current_statement__ = 301;
      check_greater_or_equal(function__, "sample_L", sample_L, 0);
      current_statement__ = 301;
      current_statement__ = 301;
      check_less_or_equal(function__, "sample_L", sample_L, 1);
      current_statement__ = 302;
      current_statement__ = 302;
      check_greater_or_equal(function__, "mem_alpha", mem_alpha, 0);
      current_statement__ = 303;
      current_statement__ = 303;
      check_greater_or_equal(function__, "mem_beta", mem_beta, 0);
      current_statement__ = 304;
      current_statement__ = 304;
      check_greater_or_equal(function__, "first_K_fine", first_K_fine, 1);
      current_statement__ = 305;
      current_statement__ = 305;
      check_greater_or_equal(function__, "acc_shape_adj", acc_shape_adj, 1);
      current_statement__ = 317;
      validate_non_negative_index("alpha", "K_tot", K_tot);
      current_statement__ = 318;
      validate_non_negative_index("infl_mean", "inflate_errors",
                                  inflate_errors);
      current_statement__ = 319;
      validate_non_negative_index("infl_shape_1", "inflate_errors",
                                  inflate_errors);
      current_statement__ = 320;
      infl_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 320;
      infl_1dim__ = (inflate_errors ? N : 0);
      current_statement__ = 320;
      validate_non_negative_index("infl", "inflate_errors ? N : 0",
                                  infl_1dim__);
      current_statement__ = 321;
      L_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 321;
      L_1dim__ = (model_bioturbation * sample_L);
      current_statement__ = 321;
      validate_non_negative_index("L", "model_bioturbation * sample_L",
                                  L_1dim__);
      current_statement__ = 322;
      bt_error_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 322;
      bt_error_1dim__ = (model_bioturbation ? N : 0);
      current_statement__ = 322;
      validate_non_negative_index("bt_error", "model_bioturbation ? N : 0",
                                  bt_error_1dim__);
      current_statement__ = 323;
      validate_non_negative_index("D", "model_displacement",
                                  model_displacement);
      current_statement__ = 324;
      validate_non_negative_index("H_depth", "model_hiatus", model_hiatus);
      current_statement__ = 325;
      validate_non_negative_index("H_length", "model_hiatus", model_hiatus);
      current_statement__ = 326;
      validate_non_negative_index("clymo_par_raw", "N2_c", N2_c);
      current_statement__ = 327;
      validate_non_negative_index("x", "K_fine", K_fine);
      current_statement__ = 328;
      c_ages_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 328;
      c_ages_1dim__ = (K_fine + 1);
      current_statement__ = 328;
      validate_non_negative_index("c_ages", "K_fine + 1", c_ages_1dim__);
      current_statement__ = 329;
      validate_non_negative_index("Mod_age", "N", N);
      current_statement__ = 330;
      validate_non_negative_index("infl_shape", "inflate_errors",
                                  inflate_errors);
      current_statement__ = 331;
      obs_err_infl_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 331;
      obs_err_infl_1dim__ = ((primitive_value(logical_eq(inflate_errors, 1))
                               || primitive_value(
                               logical_eq(model_displacement, 1))) ? N : 0);
      current_statement__ = 331;
      validate_non_negative_index("obs_err_infl",
                                  "(inflate_errors == 1 || model_displacement == 1) ? N : 0",
                                  obs_err_infl_1dim__);
      current_statement__ = 332;
      bt_age_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 332;
      bt_age_1dim__ = (model_bioturbation ? N : 0);
      current_statement__ = 332;
      validate_non_negative_index("bt_age", "model_bioturbation ? N : 0",
                                  bt_age_1dim__);
      current_statement__ = 333;
      smooth_x_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 333;
      smooth_x_1dim__ = ((primitive_value(logical_eq(model_bioturbation, 1))
                           || primitive_value(
                           logical_eq(model_displacement, 1))) ? N : 0);
      current_statement__ = 333;
      validate_non_negative_index("smooth_x",
                                  "(model_bioturbation == 1 || model_displacement == 1) ? N : 0",
                                  smooth_x_1dim__);
      current_statement__ = 334;
      age_het_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 334;
      age_het_1dim__ = (model_bioturbation ? N : 0);
      current_statement__ = 334;
      validate_non_negative_index("age_het", "model_bioturbation ? N : 0",
                                  age_het_1dim__);
      current_statement__ = 335;
      disp_yrs_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 335;
      disp_yrs_1dim__ = (model_displacement ? N : 0);
      current_statement__ = 335;
      validate_non_negative_index("disp_yrs", "model_displacement ? N : 0",
                                  disp_yrs_1dim__);
      current_statement__ = 336;
      validate_non_negative_index("clymo_par", "N2_c", N2_c);
      current_statement__ = 337;
      validate_non_negative_index("Mod_layer_mass", "N2_c", N2_c);
      current_statement__ = 338;
      validate_non_negative_index("Mod_layer_mass_cumulative", "N2_c", N2_c);
      current_statement__ = 339;
      Mod_age2_all_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 339;
      Mod_age2_all_1dim__ = (N2_c + 1);
      current_statement__ = 339;
      validate_non_negative_index("Mod_age2_all", "N2_c + 1",
                                  Mod_age2_all_1dim__);
      current_statement__ = 340;
      validate_non_negative_index("Mod_age2_duration", "N2_c", N2_c);
      current_statement__ = 341;
      validate_non_negative_index("Mod_age2_duration_acrotelm_next", "N2_c",
                                  N2_c);
      current_statement__ = 342;
      validate_non_negative_index("Mod_age2_duration_acrotelm_here", "N2_c",
                                  N2_c);
      current_statement__ = 343;
      validate_non_negative_index("Mod_age2_duration_catotelm_next", "N2_c",
                                  N2_c);
      current_statement__ = 344;
      validate_non_negative_index("Mod_age2_duration_catotelm_here", "N2_c",
                                  N2_c);
      current_statement__ = 345;
      validate_non_negative_index("layer_cumulative_mass_rep", "N2_c", N2_c);
      current_statement__ = 346;
      validate_non_negative_index("nmp_rep", "N2_c", N2_c);
      current_statement__ = 347;
      validate_non_negative_index("nmu_rep", "N2_c", N2_c);
      current_statement__ = 348;
      validate_non_negative_index("nmr_rep", "N2_c", N2_c);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += K_tot;
      num_params_r__ += 1;
      num_params_r__ += inflate_errors;
      num_params_r__ += inflate_errors;
      num_params_r__ += infl_1dim__;
      num_params_r__ += L_1dim__;
      num_params_r__ += bt_error_1dim__;
      num_params_r__ += model_displacement;
      num_params_r__ += model_hiatus;
      num_params_r__ += model_hiatus;
      num_params_r__ += N2_c;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_mm2_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ R;
      R = DUMMY_VAR__;
      
      current_statement__ = 1;
      R = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        R = stan::math::lub_constrain(R, 0, 1, lp__);
      } else {
        current_statement__ = 1;
        R = stan::math::lub_constrain(R, 0, 1);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(K_tot);
      stan::math::fill(alpha, DUMMY_VAR__);
      
      current_statement__ = 2;
      alpha = in__.vector(K_tot);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha");
        } else {
          current_statement__ = 2;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
            "assigning variable alpha");
        }}
      local_scalar_t__ age0;
      age0 = DUMMY_VAR__;
      
      current_statement__ = 3;
      age0 = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        age0 = stan::math::lb_constrain(age0, min_age, lp__);
      } else {
        current_statement__ = 3;
        age0 = stan::math::lb_constrain(age0, min_age);
      }
      std::vector<local_scalar_t__> infl_mean;
      infl_mean = std::vector<local_scalar_t__>(inflate_errors, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 4;
        assign(infl_mean, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable infl_mean");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(infl_mean, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(infl_mean[(sym1__ - 1)], 0, lp__),
            "assigning variable infl_mean");
        } else {
          current_statement__ = 4;
          assign(infl_mean, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(infl_mean[(sym1__ - 1)], 0),
            "assigning variable infl_mean");
        }}
      std::vector<local_scalar_t__> infl_shape_1;
      infl_shape_1 = std::vector<local_scalar_t__>(inflate_errors, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 5;
        assign(infl_shape_1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable infl_shape_1");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(infl_shape_1,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(infl_shape_1[(sym1__ - 1)], 0, lp__),
            "assigning variable infl_shape_1");
        } else {
          current_statement__ = 5;
          assign(infl_shape_1,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(infl_shape_1[(sym1__ - 1)], 0),
            "assigning variable infl_shape_1");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> infl;
      infl = Eigen::Matrix<local_scalar_t__, -1, 1>(infl_1dim__);
      stan::math::fill(infl, DUMMY_VAR__);
      
      current_statement__ = 6;
      infl = in__.vector(infl_1dim__);
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
        current_statement__ = 6;
        if (jacobian__) {
          current_statement__ = 6;
          assign(infl, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(infl[(sym1__ - 1)], 0, lp__),
            "assigning variable infl");
        } else {
          current_statement__ = 6;
          assign(infl, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(infl[(sym1__ - 1)], 0),
            "assigning variable infl");
        }}
      std::vector<local_scalar_t__> L;
      L = std::vector<local_scalar_t__>(L_1dim__, DUMMY_VAR__);
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(L, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable L");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
        current_statement__ = 7;
        if (jacobian__) {
          current_statement__ = 7;
          assign(L, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(L[(sym1__ - 1)], 0, lp__),
            "assigning variable L");
        } else {
          current_statement__ = 7;
          assign(L, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(L[(sym1__ - 1)], 0),
            "assigning variable L");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> bt_error;
      bt_error = Eigen::Matrix<local_scalar_t__, -1, 1>(bt_error_1dim__);
      stan::math::fill(bt_error, DUMMY_VAR__);
      
      current_statement__ = 8;
      bt_error = in__.vector(bt_error_1dim__);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
        current_statement__ = 8;
        if (jacobian__) {
          current_statement__ = 8;
          assign(bt_error, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(bt_error[(sym1__ - 1)], 0, lp__),
            "assigning variable bt_error");
        } else {
          current_statement__ = 8;
          assign(bt_error, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(bt_error[(sym1__ - 1)], 0),
            "assigning variable bt_error");
        }}
      std::vector<local_scalar_t__> D;
      D = std::vector<local_scalar_t__>(model_displacement, DUMMY_VAR__);
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
        current_statement__ = 9;
        assign(D, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable D");}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
        current_statement__ = 9;
        if (jacobian__) {
          current_statement__ = 9;
          assign(D, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(D[(sym1__ - 1)], 0, lp__),
            "assigning variable D");
        } else {
          current_statement__ = 9;
          assign(D, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(D[(sym1__ - 1)], 0),
            "assigning variable D");
        }}
      std::vector<local_scalar_t__> H_depth;
      H_depth = std::vector<local_scalar_t__>(model_hiatus, DUMMY_VAR__);
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 10;
        assign(H_depth, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable H_depth");}
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 10;
        if (jacobian__) {
          current_statement__ = 10;
          assign(H_depth, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(H_depth[(sym1__ - 1)], H_top, H_bottom,
              lp__), "assigning variable H_depth");
        } else {
          current_statement__ = 10;
          assign(H_depth, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(H_depth[(sym1__ - 1)], H_top, H_bottom),
            "assigning variable H_depth");
        }}
      std::vector<local_scalar_t__> H_length;
      H_length = std::vector<local_scalar_t__>(model_hiatus, DUMMY_VAR__);
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 11;
        assign(H_length, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable H_length");}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 11;
        if (jacobian__) {
          current_statement__ = 11;
          assign(H_length, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(H_length[(sym1__ - 1)], 0,
              data_age_range, lp__), "assigning variable H_length");
        } else {
          current_statement__ = 11;
          assign(H_length, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(H_length[(sym1__ - 1)], 0,
              data_age_range), "assigning variable H_length");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> clymo_par_raw;
      clymo_par_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(N2_c);
      stan::math::fill(clymo_par_raw, DUMMY_VAR__);
      
      current_statement__ = 12;
      clymo_par_raw = in__.vector(N2_c);
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        current_statement__ = 12;
        if (jacobian__) {
          current_statement__ = 12;
          assign(clymo_par_raw,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(clymo_par_raw[(sym1__ - 1)], 0, lp__),
            "assigning variable clymo_par_raw");
        } else {
          current_statement__ = 12;
          assign(clymo_par_raw,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(clymo_par_raw[(sym1__ - 1)], 0),
            "assigning variable clymo_par_raw");
        }}
      local_scalar_t__ clymo_alpha_1_raw;
      clymo_alpha_1_raw = DUMMY_VAR__;
      
      current_statement__ = 13;
      clymo_alpha_1_raw = in__.scalar();
      current_statement__ = 13;
      if (jacobian__) {
        current_statement__ = 13;
        clymo_alpha_1_raw = stan::math::lb_constrain(clymo_alpha_1_raw, 0,
                              lp__);
      } else {
        current_statement__ = 13;
        clymo_alpha_1_raw = stan::math::lb_constrain(clymo_alpha_1_raw, 0);
      }
      local_scalar_t__ clymo_alpha_2_raw;
      clymo_alpha_2_raw = DUMMY_VAR__;
      
      current_statement__ = 14;
      clymo_alpha_2_raw = in__.scalar();
      current_statement__ = 14;
      if (jacobian__) {
        current_statement__ = 14;
        clymo_alpha_2_raw = stan::math::lb_constrain(clymo_alpha_2_raw, 0,
                              lp__);
      } else {
        current_statement__ = 14;
        clymo_alpha_2_raw = stan::math::lb_constrain(clymo_alpha_2_raw, 0);
      }
      local_scalar_t__ ac_age_raw;
      ac_age_raw = DUMMY_VAR__;
      
      current_statement__ = 15;
      ac_age_raw = in__.scalar();
      current_statement__ = 15;
      if (jacobian__) {
        current_statement__ = 15;
        ac_age_raw = stan::math::lb_constrain(ac_age_raw, 0, lp__);
      } else {
        current_statement__ = 15;
        ac_age_raw = stan::math::lb_constrain(ac_age_raw, 0);
      }
      local_scalar_t__ layer_mass_shape;
      layer_mass_shape = DUMMY_VAR__;
      
      current_statement__ = 16;
      layer_mass_shape = in__.scalar();
      current_statement__ = 16;
      if (jacobian__) {
        current_statement__ = 16;
        layer_mass_shape = stan::math::lb_constrain(layer_mass_shape, 0, lp__);
      } else {
        current_statement__ = 16;
        layer_mass_shape = stan::math::lb_constrain(layer_mass_shape, 0);
      }
      local_scalar_t__ clymo_par_memory;
      clymo_par_memory = DUMMY_VAR__;
      
      current_statement__ = 17;
      clymo_par_memory = in__.scalar();
      current_statement__ = 17;
      if (jacobian__) {
        current_statement__ = 17;
        clymo_par_memory = stan::math::lub_constrain(clymo_par_memory, 0, 1,
                             lp__);
      } else {
        current_statement__ = 17;
        clymo_par_memory = stan::math::lub_constrain(clymo_par_memory, 0, 1);
      }
      local_scalar_t__ w;
      w = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> x;
      x = Eigen::Matrix<local_scalar_t__, -1, 1>(K_fine);
      stan::math::fill(x, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> c_ages;
      c_ages = Eigen::Matrix<local_scalar_t__, -1, 1>(c_ages_1dim__);
      stan::math::fill(c_ages, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Mod_age;
      Mod_age = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(Mod_age, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> infl_shape;
      infl_shape = std::vector<local_scalar_t__>(inflate_errors, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> obs_err_infl;
      obs_err_infl = Eigen::Matrix<local_scalar_t__, -1, 1>(obs_err_infl_1dim__);
      stan::math::fill(obs_err_infl, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> bt_age;
      bt_age = Eigen::Matrix<local_scalar_t__, -1, 1>(bt_age_1dim__);
      stan::math::fill(bt_age, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> smooth_x;
      smooth_x = Eigen::Matrix<local_scalar_t__, -1, 1>(smooth_x_1dim__);
      stan::math::fill(smooth_x, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> age_het;
      age_het = Eigen::Matrix<local_scalar_t__, -1, 1>(age_het_1dim__);
      stan::math::fill(age_het, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> disp_yrs;
      disp_yrs = Eigen::Matrix<local_scalar_t__, -1, 1>(disp_yrs_1dim__);
      stan::math::fill(disp_yrs, DUMMY_VAR__);
      
      current_statement__ = 44;
      if (logical_eq(scale_R, 1)) {
        current_statement__ = 42;
        w = pow(R, delta_c);
      } else {
        current_statement__ = 40;
        w = R;
      }
      current_statement__ = 45;
      assign(x, cons_list(index_uni(1), nil_index_list()),
        alpha[(first_K_fine - 1)], "assigning variable x");
      current_statement__ = 48;
      for (int i = 2; i <= K_fine; ++i) {
        current_statement__ = 46;
        assign(x, cons_list(index_uni(i), nil_index_list()),
          ((w * x[((i - 1) - 1)]) +
            ((1 - w) * alpha[(((i + first_K_fine) - 1) - 1)])),
          "assigning variable x");}
      current_statement__ = 49;
      assign(c_ages, cons_list(index_uni(1), nil_index_list()),
        (age0 * p3_age0), "assigning variable c_ages");
      current_statement__ = 50;
      assign(c_ages,
        cons_list(index_min_max(2, (K_fine + 1)), nil_index_list()),
        add(c_ages[(1 - 1)], cumulative_sum(multiply(x, delta_c))),
        "assigning variable c_ages");
      current_statement__ = 56;
      if (logical_eq(model_hiatus, 1)) {
        current_statement__ = 54;
        for (int i = 2; i <= (K_fine + 1); ++i) {
          current_statement__ = 52;
          if (logical_lt(H_depth[(1 - 1)], c_depth_top[((i - 1) - 1)])) {
            current_statement__ = 51;
            assign(c_ages, cons_list(index_uni(i), nil_index_list()),
              (c_ages[(i - 1)] + H_length[(1 - 1)]),
              "assigning variable c_ages");
          } }
      } 
      current_statement__ = 57;
      assign(Mod_age, nil_index_list(),
        add(
          rvalue(c_ages, cons_list(index_multi(which_c), nil_index_list()),
            "c_ages"),
          elt_multiply(
            rvalue(x, cons_list(index_multi(which_c), nil_index_list()), "x"),
            subtract(depth,
              rvalue(c_depth_top,
                cons_list(index_multi(which_c), nil_index_list()),
                "c_depth_top")))), "assigning variable Mod_age");
      current_statement__ = 68;
      if ((primitive_value(logical_eq(model_bioturbation, 1)) ||
          primitive_value(logical_eq(model_displacement, 1)))) {
        current_statement__ = 66;
        if (logical_eq(smooth_s, 1)) {
          current_statement__ = 64;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 62;
            assign(smooth_x, cons_list(index_uni(n), nil_index_list()),
              mean(
                rvalue(x,
                  cons_list(
                    index_multi(rvalue(smooth_i,
                                  cons_list(index_omni(),
                                    cons_list(index_uni(n), nil_index_list())),
                                  "smooth_i")), nil_index_list()), "x")),
              "assigning variable smooth_x");}
        } else {
          current_statement__ = 60;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 58;
            assign(smooth_x, cons_list(index_uni(n), nil_index_list()),
              x[(which_c[(n - 1)] - 1)], "assigning variable smooth_x");}
        }
      } 
      current_statement__ = 78;
      if (logical_eq(model_bioturbation, 1)) {
        current_statement__ = 72;
        if (logical_eq(sample_L, 1)) {
          current_statement__ = 69;
          assign(age_het, nil_index_list(), multiply(L[(1 - 1)], smooth_x),
            "assigning variable age_het");
          current_statement__ = 70;
          assign(bt_age, nil_index_list(),
            subtract(add(obs_age, bt_error), age_het),
            "assigning variable bt_age");
        } 
        current_statement__ = 76;
        if (logical_eq(sample_L, 0)) {
          current_statement__ = 73;
          assign(age_het, nil_index_list(), multiply(L_prior_mean, smooth_x),
            "assigning variable age_het");
          current_statement__ = 74;
          assign(bt_age, nil_index_list(),
            subtract(add(obs_age, bt_error), age_het),
            "assigning variable bt_age");
        } 
      } 
      current_statement__ = 92;
      if ((primitive_value(logical_eq(inflate_errors, 1)) && primitive_value(
          logical_eq(model_displacement, 1)))) {
        current_statement__ = 88;
        assign(disp_yrs, nil_index_list(), multiply(D[(1 - 1)], smooth_x),
          "assigning variable disp_yrs");
        current_statement__ = 89;
        assign(obs_err_infl, nil_index_list(),
          stan::math::sqrt(
            add(
              add(elt_multiply(obs_err, obs_err), elt_multiply(infl, infl)),
              elt_multiply(disp_yrs, disp_yrs))),
          "assigning variable obs_err_infl");
        current_statement__ = 90;
        assign(infl_shape, cons_list(index_uni(1), nil_index_list()),
          (infl_shape_1[(1 - 1)] + 1), "assigning variable infl_shape");
      } else {
        current_statement__ = 87;
        if ((primitive_value(logical_eq(inflate_errors, 1)) &&
            primitive_value(logical_eq(model_displacement, 0)))) {
          current_statement__ = 84;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 83;
            assign(obs_err_infl, cons_list(index_uni(n), nil_index_list()),
              stan::math::sqrt(
                (pow(obs_err[(n - 1)], 2) + pow(infl[(n - 1)], 2))),
              "assigning variable obs_err_infl");}
          current_statement__ = 85;
          assign(infl_shape, cons_list(index_uni(1), nil_index_list()),
            (infl_shape_1[(1 - 1)] + 1), "assigning variable infl_shape");
        } else {
          current_statement__ = 82;
          if ((primitive_value(logical_eq(inflate_errors, 0)) &&
              primitive_value(logical_eq(model_displacement, 1)))) {
            current_statement__ = 79;
            assign(disp_yrs, nil_index_list(),
              multiply(D[(1 - 1)], smooth_x), "assigning variable disp_yrs");
            current_statement__ = 80;
            assign(obs_err_infl, nil_index_list(),
              stan::math::sqrt(
                add(elt_multiply(obs_err, obs_err),
                  elt_multiply(disp_yrs, disp_yrs))),
              "assigning variable obs_err_infl");
          } 
        }
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> clymo_par;
      clymo_par = Eigen::Matrix<local_scalar_t__, -1, 1>(N2_c);
      stan::math::fill(clymo_par, DUMMY_VAR__);
      
      current_statement__ = 93;
      assign(clymo_par, cons_list(index_uni(N2_c), nil_index_list()),
        clymo_par_raw[(N2_c - 1)], "assigning variable clymo_par");
      current_statement__ = 94;
      assign(clymo_par,
        cons_list(index_min_max(1, (N2_c - 1)), nil_index_list()),
        add(
          multiply(
            rvalue(clymo_par_raw,
              cons_list(index_min_max(2, N2_c), nil_index_list()),
              "clymo_par_raw"), clymo_par_memory),
          multiply(
            rvalue(clymo_par_raw,
              cons_list(index_min_max(1, (N2_c - 1)), nil_index_list()),
              "clymo_par_raw"), (1 - clymo_par_memory))),
        "assigning variable clymo_par");
      current_statement__ = 95;
      assign(clymo_par,
        cons_list(index_min_max(1, index_clymo_par_constant),
          nil_index_list()),
        rep_vector(clymo_par[(index_clymo_par_constant - 1)],
          index_clymo_par_constant), "assigning variable clymo_par");
      local_scalar_t__ clymo_alpha_2;
      clymo_alpha_2 = DUMMY_VAR__;
      
      current_statement__ = 29;
      clymo_alpha_2 = (clymo_alpha_2_raw * p3_clymo_alpha_2);
      local_scalar_t__ clymo_alpha_1;
      clymo_alpha_1 = DUMMY_VAR__;
      
      current_statement__ = 30;
      clymo_alpha_1 = (clymo_alpha_2 +
                        (clymo_alpha_1_raw * p3_clymo_alpha_1));
      local_scalar_t__ ac_age;
      ac_age = DUMMY_VAR__;
      
      current_statement__ = 31;
      ac_age = (ac_age_raw * p3_ac_age);
      Eigen::Matrix<local_scalar_t__, -1, 1> Mod_layer_mass;
      Mod_layer_mass = Eigen::Matrix<local_scalar_t__, -1, 1>(N2_c);
      stan::math::fill(Mod_layer_mass, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Mod_layer_mass_cumulative;
      Mod_layer_mass_cumulative = Eigen::Matrix<local_scalar_t__, -1, 1>(N2_c);
      stan::math::fill(Mod_layer_mass_cumulative, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Mod_age2_all;
      Mod_age2_all = Eigen::Matrix<local_scalar_t__, -1, 1>(Mod_age2_all_1dim__);
      stan::math::fill(Mod_age2_all, DUMMY_VAR__);
      
      current_statement__ = 34;
      assign(Mod_age2_all, nil_index_list(),
        add(
          rvalue(c_ages,
            cons_list(index_multi(which_c2_all), nil_index_list()), "c_ages"),
          elt_multiply(
            rvalue(x, cons_list(index_multi(which_c2_all), nil_index_list()),
              "x"),
            subtract(depth2_all,
              rvalue(c_depth_top,
                cons_list(index_multi(which_c2_all), nil_index_list()),
                "c_depth_top")))), "assigning variable Mod_age2_all");
      Eigen::Matrix<local_scalar_t__, -1, 1> Mod_age2_duration;
      Mod_age2_duration = Eigen::Matrix<local_scalar_t__, -1, 1>(N2_c);
      stan::math::fill(Mod_age2_duration, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Mod_age2_duration_acrotelm_next;
      Mod_age2_duration_acrotelm_next = Eigen::Matrix<local_scalar_t__, -1, 1>(N2_c);
      stan::math::fill(Mod_age2_duration_acrotelm_next, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Mod_age2_duration_acrotelm_here;
      Mod_age2_duration_acrotelm_here = Eigen::Matrix<local_scalar_t__, -1, 1>(N2_c);
      stan::math::fill(Mod_age2_duration_acrotelm_here, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Mod_age2_duration_catotelm_next;
      Mod_age2_duration_catotelm_next = Eigen::Matrix<local_scalar_t__, -1, 1>(N2_c);
      stan::math::fill(Mod_age2_duration_catotelm_next, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Mod_age2_duration_catotelm_here;
      Mod_age2_duration_catotelm_here = Eigen::Matrix<local_scalar_t__, -1, 1>(N2_c);
      stan::math::fill(Mod_age2_duration_catotelm_here, DUMMY_VAR__);
      
      {
        current_statement__ = 96;
        validate_non_negative_index("Mod_age2_upper", "N2_c", N2_c);
        Eigen::Matrix<local_scalar_t__, -1, 1> Mod_age2_upper;
        Mod_age2_upper = Eigen::Matrix<local_scalar_t__, -1, 1>(N2_c);
        stan::math::fill(Mod_age2_upper, DUMMY_VAR__);
        
        current_statement__ = 97;
        assign(Mod_age2_upper, nil_index_list(),
          rvalue(Mod_age2_all,
            cons_list(index_min_max(1, N2_c), nil_index_list()),
            "Mod_age2_all"), "assigning variable Mod_age2_upper");
        current_statement__ = 98;
        validate_non_negative_index("Mod_age2_lower", "N2_c", N2_c);
        Eigen::Matrix<local_scalar_t__, -1, 1> Mod_age2_lower;
        Mod_age2_lower = Eigen::Matrix<local_scalar_t__, -1, 1>(N2_c);
        stan::math::fill(Mod_age2_lower, DUMMY_VAR__);
        
        current_statement__ = 99;
        assign(Mod_age2_lower, nil_index_list(),
          rvalue(Mod_age2_all,
            cons_list(index_min_max(2, (N2_c + 1)), nil_index_list()),
            "Mod_age2_all"), "assigning variable Mod_age2_lower");
        current_statement__ = 100;
        assign(Mod_age2_duration, nil_index_list(),
          subtract(Mod_age2_lower, Mod_age2_upper),
          "assigning variable Mod_age2_duration");
        current_statement__ = 101;
        assign(Mod_age2_duration_acrotelm_here, nil_index_list(),
          rep_vector(ac_age, N2_c),
          "assigning variable Mod_age2_duration_acrotelm_here");
        current_statement__ = 102;
        assign(Mod_age2_duration_catotelm_here, nil_index_list(),
          subtract(Mod_age2_duration, ac_age),
          "assigning variable Mod_age2_duration_catotelm_here");
        current_statement__ = 103;
        assign(Mod_age2_duration_acrotelm_next, nil_index_list(),
          rep_vector(0.0, N2_c),
          "assigning variable Mod_age2_duration_acrotelm_next");
        current_statement__ = 104;
        assign(Mod_age2_duration_catotelm_next, nil_index_list(),
          Mod_age2_upper,
          "assigning variable Mod_age2_duration_catotelm_next");
        current_statement__ = 115;
        for (int n = 1; n <= N2_c; ++n) {
          current_statement__ = 113;
          if (logical_gt(ac_age, Mod_age2_duration[(n - 1)])) {
            current_statement__ = 105;
            assign(Mod_age2_duration_acrotelm_here,
              cons_list(index_uni(n), nil_index_list()),
              Mod_age2_duration[(n - 1)],
              "assigning variable Mod_age2_duration_acrotelm_here");
            current_statement__ = 106;
            assign(Mod_age2_duration_catotelm_here,
              cons_list(index_uni(n), nil_index_list()), 0.0,
              "assigning variable Mod_age2_duration_catotelm_here");
            current_statement__ = 107;
            assign(Mod_age2_duration_catotelm_next,
              cons_list(index_uni(n), nil_index_list()),
              (Mod_age2_upper[(n - 1)] -
                (ac_age - Mod_age2_duration_acrotelm_here[(n - 1)])),
              "assigning variable Mod_age2_duration_catotelm_next");
            current_statement__ = 110;
            if (logical_lt(Mod_age2_duration_catotelm_next[(n - 1)], 0.0)) {
              current_statement__ = 108;
              assign(Mod_age2_duration_catotelm_next,
                cons_list(index_uni(n), nil_index_list()), 0.0,
                "assigning variable Mod_age2_duration_catotelm_next");
            } 
            current_statement__ = 111;
            assign(Mod_age2_duration_acrotelm_next,
              cons_list(index_uni(n), nil_index_list()),
              (Mod_age2_upper[(n - 1)] -
                Mod_age2_duration_catotelm_next[(n - 1)]),
              "assigning variable Mod_age2_duration_acrotelm_next");
          } }
        current_statement__ = 116;
        assign(Mod_layer_mass, nil_index_list(),
          elt_multiply(
            elt_multiply(
              elt_multiply(multiply(clymo_par, p3_clymo_par),
                Mod_age2_duration),
              stan::math::exp(
                multiply(-clymo_alpha_1,
                  add(Mod_age2_duration_acrotelm_here,
                    Mod_age2_duration_acrotelm_next)))),
            stan::math::exp(
              multiply(-clymo_alpha_2,
                add(Mod_age2_duration_catotelm_here,
                  Mod_age2_duration_catotelm_next)))),
          "assigning variable Mod_layer_mass");
        current_statement__ = 117;
        assign(Mod_layer_mass_cumulative, nil_index_list(),
          add(cumulative_mass0, cumulative_sum(Mod_layer_mass)),
          "assigning variable Mod_layer_mass_cumulative");
      }
      current_statement__ = 18;
      current_statement__ = 18;
      check_greater_or_equal(function__, "w", w, 0);
      current_statement__ = 18;
      current_statement__ = 18;
      check_less_or_equal(function__, "w", w, 1);
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 22;
        current_statement__ = 22;
        check_greater_or_equal(function__, "infl_shape[sym1__]",
                               infl_shape[(sym1__ - 1)], 0);}
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= disp_yrs_1dim__; ++sym1__) {
        current_statement__ = 27;
        current_statement__ = 27;
        check_greater_or_equal(function__, "disp_yrs[sym1__]",
                               disp_yrs[(sym1__ - 1)], 0);}
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        current_statement__ = 28;
        current_statement__ = 28;
        check_greater_or_equal(function__, "clymo_par[sym1__]",
                               clymo_par[(sym1__ - 1)], 0);}
      current_statement__ = 29;
      current_statement__ = 29;
      check_greater_or_equal(function__, "clymo_alpha_2", clymo_alpha_2, 0);
      current_statement__ = 30;
      current_statement__ = 30;
      check_greater_or_equal(function__, "clymo_alpha_1", clymo_alpha_1, 0);
      current_statement__ = 31;
      current_statement__ = 31;
      check_greater_or_equal(function__, "ac_age", ac_age, 0);
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        current_statement__ = 32;
        current_statement__ = 32;
        check_greater_or_equal(function__, "Mod_layer_mass[sym1__]",
                               Mod_layer_mass[(sym1__ - 1)], 0);}
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        current_statement__ = 33;
        current_statement__ = 33;
        check_greater_or_equal(function__,
                               "Mod_layer_mass_cumulative[sym1__]",
                               Mod_layer_mass_cumulative[(sym1__ - 1)], 0);}
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= Mod_age2_all_1dim__; ++sym1__) {
        current_statement__ = 34;
        current_statement__ = 34;
        check_greater_or_equal(function__, "Mod_age2_all[sym1__]",
                               Mod_age2_all[(sym1__ - 1)], 0);}
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        current_statement__ = 35;
        current_statement__ = 35;
        check_greater_or_equal(function__, "Mod_age2_duration[sym1__]",
                               Mod_age2_duration[(sym1__ - 1)], 0);}
      {
        current_statement__ = 187;
        lp_accum__.add(
          normal_lpdf<propto__>(alpha[(1 - 1)], 0, (10 * acc_mean_prior)));
        current_statement__ = 188;
        lp_accum__.add(
          gamma_lpdf<propto__>(
            rvalue(alpha,
              cons_list(index_min_max(2, K_tot), nil_index_list()), "alpha"),
            acc_shape_adj,
            elt_divide(acc_shape_adj,
              rvalue(alpha,
                cons_list(
                  index_multi(rvalue(parent,
                                cons_list(index_min_max(2, K_tot),
                                  nil_index_list()), "parent")),
                  nil_index_list()), "alpha"))));
        current_statement__ = 189;
        lp_accum__.add(beta_lpdf<propto__>(R, mem_alpha, mem_beta));
        current_statement__ = 194;
        if (inflate_errors) {
          current_statement__ = 190;
          lp_accum__.add(
            gamma_lpdf<propto__>(infl_shape, infl_shape_shape,
              (infl_shape_shape / infl_shape_mean)));
          current_statement__ = 191;
          lp_accum__.add(normal_lpdf<propto__>(infl_mean, 0, infl_sigma_sd));
          current_statement__ = 192;
          lp_accum__.add(
            gamma_lpdf<propto__>(infl, infl_shape[(1 - 1)],
              (infl_shape[(1 - 1)] / infl_mean[(1 - 1)])));
        } 
        current_statement__ = 195;
        lp_accum__.add(gamma_lpdf<propto__>(L, L_prior_shape, L_rate));
        current_statement__ = 196;
        lp_accum__.add(normal_lpdf<propto__>(D, 0, D_prior_scale));
        current_statement__ = 197;
        lp_accum__.add(
          gamma_lpdf<propto__>(bt_error, n_ind, elt_divide(n_ind, age_het)));
        current_statement__ = 210;
        if (logical_eq(model_bioturbation, 1)) {
          current_statement__ = 208;
          if ((primitive_value(logical_eq(inflate_errors, 1)) ||
              primitive_value(logical_eq(model_displacement, 1)))) {
            current_statement__ = 206;
            lp_accum__.add(
              student_t_lpdf<propto__>(bt_age, nu, Mod_age, obs_err_infl));
          } else {
            current_statement__ = 204;
            lp_accum__.add(
              student_t_lpdf<propto__>(bt_age, nu, Mod_age, obs_err));
          }
        } else {
          current_statement__ = 202;
          if ((primitive_value(logical_eq(inflate_errors, 1)) ||
              primitive_value(logical_eq(model_displacement, 1)))) {
            current_statement__ = 200;
            lp_accum__.add(
              student_t_lpdf<propto__>(obs_age, nu, Mod_age, obs_err_infl));
          } else {
            current_statement__ = 198;
            lp_accum__.add(
              student_t_lpdf<propto__>(obs_age, nu, Mod_age, obs_err));
          }
        }
        current_statement__ = 211;
        lp_accum__.add(
          gamma_lpdf<propto__>(age0, p1_age0, (p2_age0 * p3_age0)));
        current_statement__ = 212;
        lp_accum__.add(
          gamma_lpdf<propto__>(clymo_par_raw, p1_clymo_par,
            (p2_clymo_par * p3_clymo_par)));
        current_statement__ = 213;
        lp_accum__.add(
          beta_lpdf<propto__>(clymo_par_memory, clymo_par_memory_p1,
            clymo_par_memory_p2));
        current_statement__ = 214;
        lp_accum__.add(
          gamma_lpdf<propto__>(clymo_alpha_1_raw, p1_clymo_alpha_1,
            (p2_clymo_alpha_1 * p3_clymo_alpha_1)));
        current_statement__ = 215;
        lp_accum__.add(
          gamma_lpdf<propto__>(clymo_alpha_2_raw, p1_clymo_alpha_2,
            (p2_clymo_alpha_2 * p3_clymo_alpha_2)));
        current_statement__ = 216;
        lp_accum__.add(
          gamma_lpdf<propto__>(layer_mass_shape, p1_layer_mass_shape,
            (p2_layer_mass_shape * p3_layer_mass_shape)));
        current_statement__ = 217;
        lp_accum__.add(
          gamma_lpdf<propto__>(ac_age_raw, p1_ac_age,
            (p2_ac_age * p3_ac_age)));
        current_statement__ = 218;
        lp_accum__.add(
          gamma_lpdf<propto__>(layer_mass,
            (layer_mass_shape * p3_layer_mass_shape),
            elt_divide((layer_mass_shape * p3_layer_mass_shape),
              rvalue(Mod_layer_mass_cumulative,
                cons_list(index_multi(index_has_mass_measurements),
                  nil_index_list()), "Mod_layer_mass_cumulative"))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_mm2_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double R;
      R = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      R = in__.scalar();
      current_statement__ = 1;
      R = stan::math::lub_constrain(R, 0, 1);
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(K_tot);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      alpha = in__.vector(K_tot);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
        current_statement__ = 2;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha");}
      double age0;
      age0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      age0 = in__.scalar();
      current_statement__ = 3;
      age0 = stan::math::lb_constrain(age0, min_age);
      std::vector<double> infl_mean;
      infl_mean = std::vector<double>(inflate_errors, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 4;
        assign(infl_mean, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable infl_mean");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 4;
        assign(infl_mean, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(infl_mean[(sym1__ - 1)], 0),
          "assigning variable infl_mean");}
      std::vector<double> infl_shape_1;
      infl_shape_1 = std::vector<double>(inflate_errors, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 5;
        assign(infl_shape_1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable infl_shape_1");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 5;
        assign(infl_shape_1, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(infl_shape_1[(sym1__ - 1)], 0),
          "assigning variable infl_shape_1");}
      Eigen::Matrix<double, -1, 1> infl;
      infl = Eigen::Matrix<double, -1, 1>(infl_1dim__);
      stan::math::fill(infl, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      infl = in__.vector(infl_1dim__);
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(infl, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(infl[(sym1__ - 1)], 0),
          "assigning variable infl");}
      std::vector<double> L;
      L = std::vector<double>(L_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(L, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable L");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(L, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(L[(sym1__ - 1)], 0),
          "assigning variable L");}
      Eigen::Matrix<double, -1, 1> bt_error;
      bt_error = Eigen::Matrix<double, -1, 1>(bt_error_1dim__);
      stan::math::fill(bt_error, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      bt_error = in__.vector(bt_error_1dim__);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
        current_statement__ = 8;
        assign(bt_error, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(bt_error[(sym1__ - 1)], 0),
          "assigning variable bt_error");}
      std::vector<double> D;
      D = std::vector<double>(model_displacement, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
        current_statement__ = 9;
        assign(D, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable D");}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
        current_statement__ = 9;
        assign(D, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(D[(sym1__ - 1)], 0),
          "assigning variable D");}
      std::vector<double> H_depth;
      H_depth = std::vector<double>(model_hiatus, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 10;
        assign(H_depth, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable H_depth");}
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 10;
        assign(H_depth, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(H_depth[(sym1__ - 1)], H_top, H_bottom),
          "assigning variable H_depth");}
      std::vector<double> H_length;
      H_length = std::vector<double>(model_hiatus, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 11;
        assign(H_length, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable H_length");}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 11;
        assign(H_length, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(H_length[(sym1__ - 1)], 0, data_age_range),
          "assigning variable H_length");}
      Eigen::Matrix<double, -1, 1> clymo_par_raw;
      clymo_par_raw = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(clymo_par_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      clymo_par_raw = in__.vector(N2_c);
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        current_statement__ = 12;
        assign(clymo_par_raw, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(clymo_par_raw[(sym1__ - 1)], 0),
          "assigning variable clymo_par_raw");}
      double clymo_alpha_1_raw;
      clymo_alpha_1_raw = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      clymo_alpha_1_raw = in__.scalar();
      current_statement__ = 13;
      clymo_alpha_1_raw = stan::math::lb_constrain(clymo_alpha_1_raw, 0);
      double clymo_alpha_2_raw;
      clymo_alpha_2_raw = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      clymo_alpha_2_raw = in__.scalar();
      current_statement__ = 14;
      clymo_alpha_2_raw = stan::math::lb_constrain(clymo_alpha_2_raw, 0);
      double ac_age_raw;
      ac_age_raw = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      ac_age_raw = in__.scalar();
      current_statement__ = 15;
      ac_age_raw = stan::math::lb_constrain(ac_age_raw, 0);
      double layer_mass_shape;
      layer_mass_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      layer_mass_shape = in__.scalar();
      current_statement__ = 16;
      layer_mass_shape = stan::math::lb_constrain(layer_mass_shape, 0);
      double clymo_par_memory;
      clymo_par_memory = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      clymo_par_memory = in__.scalar();
      current_statement__ = 17;
      clymo_par_memory = stan::math::lub_constrain(clymo_par_memory, 0, 1);
      double w;
      w = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> x;
      x = Eigen::Matrix<double, -1, 1>(K_fine);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> c_ages;
      c_ages = Eigen::Matrix<double, -1, 1>(c_ages_1dim__);
      stan::math::fill(c_ages, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Mod_age;
      Mod_age = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Mod_age, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> infl_shape;
      infl_shape = std::vector<double>(inflate_errors, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> obs_err_infl;
      obs_err_infl = Eigen::Matrix<double, -1, 1>(obs_err_infl_1dim__);
      stan::math::fill(obs_err_infl, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> bt_age;
      bt_age = Eigen::Matrix<double, -1, 1>(bt_age_1dim__);
      stan::math::fill(bt_age, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> smooth_x;
      smooth_x = Eigen::Matrix<double, -1, 1>(smooth_x_1dim__);
      stan::math::fill(smooth_x, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> age_het;
      age_het = Eigen::Matrix<double, -1, 1>(age_het_1dim__);
      stan::math::fill(age_het, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> disp_yrs;
      disp_yrs = Eigen::Matrix<double, -1, 1>(disp_yrs_1dim__);
      stan::math::fill(disp_yrs, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> clymo_par;
      clymo_par = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(clymo_par, std::numeric_limits<double>::quiet_NaN());
      
      double clymo_alpha_2;
      clymo_alpha_2 = std::numeric_limits<double>::quiet_NaN();
      
      double clymo_alpha_1;
      clymo_alpha_1 = std::numeric_limits<double>::quiet_NaN();
      
      double ac_age;
      ac_age = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> Mod_layer_mass;
      Mod_layer_mass = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(Mod_layer_mass, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Mod_layer_mass_cumulative;
      Mod_layer_mass_cumulative = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(Mod_layer_mass_cumulative, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Mod_age2_all;
      Mod_age2_all = Eigen::Matrix<double, -1, 1>(Mod_age2_all_1dim__);
      stan::math::fill(Mod_age2_all, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Mod_age2_duration;
      Mod_age2_duration = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(Mod_age2_duration, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Mod_age2_duration_acrotelm_next;
      Mod_age2_duration_acrotelm_next = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(Mod_age2_duration_acrotelm_next, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Mod_age2_duration_acrotelm_here;
      Mod_age2_duration_acrotelm_here = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(Mod_age2_duration_acrotelm_here, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Mod_age2_duration_catotelm_next;
      Mod_age2_duration_catotelm_next = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(Mod_age2_duration_catotelm_next, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Mod_age2_duration_catotelm_here;
      Mod_age2_duration_catotelm_here = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(Mod_age2_duration_catotelm_here, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(R);
      for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
        vars__.emplace_back(alpha[(sym1__ - 1)]);}
      vars__.emplace_back(age0);
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        vars__.emplace_back(infl_mean[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        vars__.emplace_back(infl_shape_1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
        vars__.emplace_back(infl[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
        vars__.emplace_back(L[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
        vars__.emplace_back(bt_error[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
        vars__.emplace_back(D[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        vars__.emplace_back(H_depth[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        vars__.emplace_back(H_length[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        vars__.emplace_back(clymo_par_raw[(sym1__ - 1)]);}
      vars__.emplace_back(clymo_alpha_1_raw);
      vars__.emplace_back(clymo_alpha_2_raw);
      vars__.emplace_back(ac_age_raw);
      vars__.emplace_back(layer_mass_shape);
      vars__.emplace_back(clymo_par_memory);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 44;
      if (logical_eq(scale_R, 1)) {
        current_statement__ = 42;
        w = pow(R, delta_c);
      } else {
        current_statement__ = 40;
        w = R;
      }
      current_statement__ = 45;
      assign(x, cons_list(index_uni(1), nil_index_list()),
        alpha[(first_K_fine - 1)], "assigning variable x");
      current_statement__ = 48;
      for (int i = 2; i <= K_fine; ++i) {
        current_statement__ = 46;
        assign(x, cons_list(index_uni(i), nil_index_list()),
          ((w * x[((i - 1) - 1)]) +
            ((1 - w) * alpha[(((i + first_K_fine) - 1) - 1)])),
          "assigning variable x");}
      current_statement__ = 49;
      assign(c_ages, cons_list(index_uni(1), nil_index_list()),
        (age0 * p3_age0), "assigning variable c_ages");
      current_statement__ = 50;
      assign(c_ages,
        cons_list(index_min_max(2, (K_fine + 1)), nil_index_list()),
        add(c_ages[(1 - 1)], cumulative_sum(multiply(x, delta_c))),
        "assigning variable c_ages");
      current_statement__ = 56;
      if (logical_eq(model_hiatus, 1)) {
        current_statement__ = 54;
        for (int i = 2; i <= (K_fine + 1); ++i) {
          current_statement__ = 52;
          if (logical_lt(H_depth[(1 - 1)], c_depth_top[((i - 1) - 1)])) {
            current_statement__ = 51;
            assign(c_ages, cons_list(index_uni(i), nil_index_list()),
              (c_ages[(i - 1)] + H_length[(1 - 1)]),
              "assigning variable c_ages");
          } }
      } 
      current_statement__ = 57;
      assign(Mod_age, nil_index_list(),
        add(
          rvalue(c_ages, cons_list(index_multi(which_c), nil_index_list()),
            "c_ages"),
          elt_multiply(
            rvalue(x, cons_list(index_multi(which_c), nil_index_list()), "x"),
            subtract(depth,
              rvalue(c_depth_top,
                cons_list(index_multi(which_c), nil_index_list()),
                "c_depth_top")))), "assigning variable Mod_age");
      current_statement__ = 68;
      if ((primitive_value(logical_eq(model_bioturbation, 1)) ||
          primitive_value(logical_eq(model_displacement, 1)))) {
        current_statement__ = 66;
        if (logical_eq(smooth_s, 1)) {
          current_statement__ = 64;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 62;
            assign(smooth_x, cons_list(index_uni(n), nil_index_list()),
              mean(
                rvalue(x,
                  cons_list(
                    index_multi(rvalue(smooth_i,
                                  cons_list(index_omni(),
                                    cons_list(index_uni(n), nil_index_list())),
                                  "smooth_i")), nil_index_list()), "x")),
              "assigning variable smooth_x");}
        } else {
          current_statement__ = 60;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 58;
            assign(smooth_x, cons_list(index_uni(n), nil_index_list()),
              x[(which_c[(n - 1)] - 1)], "assigning variable smooth_x");}
        }
      } 
      current_statement__ = 78;
      if (logical_eq(model_bioturbation, 1)) {
        current_statement__ = 72;
        if (logical_eq(sample_L, 1)) {
          current_statement__ = 69;
          assign(age_het, nil_index_list(), multiply(L[(1 - 1)], smooth_x),
            "assigning variable age_het");
          current_statement__ = 70;
          assign(bt_age, nil_index_list(),
            subtract(add(obs_age, bt_error), age_het),
            "assigning variable bt_age");
        } 
        current_statement__ = 76;
        if (logical_eq(sample_L, 0)) {
          current_statement__ = 73;
          assign(age_het, nil_index_list(), multiply(L_prior_mean, smooth_x),
            "assigning variable age_het");
          current_statement__ = 74;
          assign(bt_age, nil_index_list(),
            subtract(add(obs_age, bt_error), age_het),
            "assigning variable bt_age");
        } 
      } 
      current_statement__ = 92;
      if ((primitive_value(logical_eq(inflate_errors, 1)) && primitive_value(
          logical_eq(model_displacement, 1)))) {
        current_statement__ = 88;
        assign(disp_yrs, nil_index_list(), multiply(D[(1 - 1)], smooth_x),
          "assigning variable disp_yrs");
        current_statement__ = 89;
        assign(obs_err_infl, nil_index_list(),
          stan::math::sqrt(
            add(
              add(elt_multiply(obs_err, obs_err), elt_multiply(infl, infl)),
              elt_multiply(disp_yrs, disp_yrs))),
          "assigning variable obs_err_infl");
        current_statement__ = 90;
        assign(infl_shape, cons_list(index_uni(1), nil_index_list()),
          (infl_shape_1[(1 - 1)] + 1), "assigning variable infl_shape");
      } else {
        current_statement__ = 87;
        if ((primitive_value(logical_eq(inflate_errors, 1)) &&
            primitive_value(logical_eq(model_displacement, 0)))) {
          current_statement__ = 84;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 83;
            assign(obs_err_infl, cons_list(index_uni(n), nil_index_list()),
              stan::math::sqrt(
                (pow(obs_err[(n - 1)], 2) + pow(infl[(n - 1)], 2))),
              "assigning variable obs_err_infl");}
          current_statement__ = 85;
          assign(infl_shape, cons_list(index_uni(1), nil_index_list()),
            (infl_shape_1[(1 - 1)] + 1), "assigning variable infl_shape");
        } else {
          current_statement__ = 82;
          if ((primitive_value(logical_eq(inflate_errors, 0)) &&
              primitive_value(logical_eq(model_displacement, 1)))) {
            current_statement__ = 79;
            assign(disp_yrs, nil_index_list(),
              multiply(D[(1 - 1)], smooth_x), "assigning variable disp_yrs");
            current_statement__ = 80;
            assign(obs_err_infl, nil_index_list(),
              stan::math::sqrt(
                add(elt_multiply(obs_err, obs_err),
                  elt_multiply(disp_yrs, disp_yrs))),
              "assigning variable obs_err_infl");
          } 
        }
      }
      current_statement__ = 93;
      assign(clymo_par, cons_list(index_uni(N2_c), nil_index_list()),
        clymo_par_raw[(N2_c - 1)], "assigning variable clymo_par");
      current_statement__ = 94;
      assign(clymo_par,
        cons_list(index_min_max(1, (N2_c - 1)), nil_index_list()),
        add(
          multiply(
            rvalue(clymo_par_raw,
              cons_list(index_min_max(2, N2_c), nil_index_list()),
              "clymo_par_raw"), clymo_par_memory),
          multiply(
            rvalue(clymo_par_raw,
              cons_list(index_min_max(1, (N2_c - 1)), nil_index_list()),
              "clymo_par_raw"), (1 - clymo_par_memory))),
        "assigning variable clymo_par");
      current_statement__ = 95;
      assign(clymo_par,
        cons_list(index_min_max(1, index_clymo_par_constant),
          nil_index_list()),
        rep_vector(clymo_par[(index_clymo_par_constant - 1)],
          index_clymo_par_constant), "assigning variable clymo_par");
      current_statement__ = 29;
      clymo_alpha_2 = (clymo_alpha_2_raw * p3_clymo_alpha_2);
      current_statement__ = 30;
      clymo_alpha_1 = (clymo_alpha_2 +
                        (clymo_alpha_1_raw * p3_clymo_alpha_1));
      current_statement__ = 31;
      ac_age = (ac_age_raw * p3_ac_age);
      current_statement__ = 34;
      assign(Mod_age2_all, nil_index_list(),
        add(
          rvalue(c_ages,
            cons_list(index_multi(which_c2_all), nil_index_list()), "c_ages"),
          elt_multiply(
            rvalue(x, cons_list(index_multi(which_c2_all), nil_index_list()),
              "x"),
            subtract(depth2_all,
              rvalue(c_depth_top,
                cons_list(index_multi(which_c2_all), nil_index_list()),
                "c_depth_top")))), "assigning variable Mod_age2_all");
      {
        current_statement__ = 96;
        validate_non_negative_index("Mod_age2_upper", "N2_c", N2_c);
        Eigen::Matrix<double, -1, 1> Mod_age2_upper;
        Mod_age2_upper = Eigen::Matrix<double, -1, 1>(N2_c);
        stan::math::fill(Mod_age2_upper, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 97;
        assign(Mod_age2_upper, nil_index_list(),
          rvalue(Mod_age2_all,
            cons_list(index_min_max(1, N2_c), nil_index_list()),
            "Mod_age2_all"), "assigning variable Mod_age2_upper");
        current_statement__ = 98;
        validate_non_negative_index("Mod_age2_lower", "N2_c", N2_c);
        Eigen::Matrix<double, -1, 1> Mod_age2_lower;
        Mod_age2_lower = Eigen::Matrix<double, -1, 1>(N2_c);
        stan::math::fill(Mod_age2_lower, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 99;
        assign(Mod_age2_lower, nil_index_list(),
          rvalue(Mod_age2_all,
            cons_list(index_min_max(2, (N2_c + 1)), nil_index_list()),
            "Mod_age2_all"), "assigning variable Mod_age2_lower");
        current_statement__ = 100;
        assign(Mod_age2_duration, nil_index_list(),
          subtract(Mod_age2_lower, Mod_age2_upper),
          "assigning variable Mod_age2_duration");
        current_statement__ = 101;
        assign(Mod_age2_duration_acrotelm_here, nil_index_list(),
          rep_vector(ac_age, N2_c),
          "assigning variable Mod_age2_duration_acrotelm_here");
        current_statement__ = 102;
        assign(Mod_age2_duration_catotelm_here, nil_index_list(),
          subtract(Mod_age2_duration, ac_age),
          "assigning variable Mod_age2_duration_catotelm_here");
        current_statement__ = 103;
        assign(Mod_age2_duration_acrotelm_next, nil_index_list(),
          rep_vector(0.0, N2_c),
          "assigning variable Mod_age2_duration_acrotelm_next");
        current_statement__ = 104;
        assign(Mod_age2_duration_catotelm_next, nil_index_list(),
          Mod_age2_upper,
          "assigning variable Mod_age2_duration_catotelm_next");
        current_statement__ = 115;
        for (int n = 1; n <= N2_c; ++n) {
          current_statement__ = 113;
          if (logical_gt(ac_age, Mod_age2_duration[(n - 1)])) {
            current_statement__ = 105;
            assign(Mod_age2_duration_acrotelm_here,
              cons_list(index_uni(n), nil_index_list()),
              Mod_age2_duration[(n - 1)],
              "assigning variable Mod_age2_duration_acrotelm_here");
            current_statement__ = 106;
            assign(Mod_age2_duration_catotelm_here,
              cons_list(index_uni(n), nil_index_list()), 0.0,
              "assigning variable Mod_age2_duration_catotelm_here");
            current_statement__ = 107;
            assign(Mod_age2_duration_catotelm_next,
              cons_list(index_uni(n), nil_index_list()),
              (Mod_age2_upper[(n - 1)] -
                (ac_age - Mod_age2_duration_acrotelm_here[(n - 1)])),
              "assigning variable Mod_age2_duration_catotelm_next");
            current_statement__ = 110;
            if (logical_lt(Mod_age2_duration_catotelm_next[(n - 1)], 0.0)) {
              current_statement__ = 108;
              assign(Mod_age2_duration_catotelm_next,
                cons_list(index_uni(n), nil_index_list()), 0.0,
                "assigning variable Mod_age2_duration_catotelm_next");
            } 
            current_statement__ = 111;
            assign(Mod_age2_duration_acrotelm_next,
              cons_list(index_uni(n), nil_index_list()),
              (Mod_age2_upper[(n - 1)] -
                Mod_age2_duration_catotelm_next[(n - 1)]),
              "assigning variable Mod_age2_duration_acrotelm_next");
          } }
        current_statement__ = 116;
        assign(Mod_layer_mass, nil_index_list(),
          elt_multiply(
            elt_multiply(
              elt_multiply(multiply(clymo_par, p3_clymo_par),
                Mod_age2_duration),
              stan::math::exp(
                multiply(-clymo_alpha_1,
                  add(Mod_age2_duration_acrotelm_here,
                    Mod_age2_duration_acrotelm_next)))),
            stan::math::exp(
              multiply(-clymo_alpha_2,
                add(Mod_age2_duration_catotelm_here,
                  Mod_age2_duration_catotelm_next)))),
          "assigning variable Mod_layer_mass");
        current_statement__ = 117;
        assign(Mod_layer_mass_cumulative, nil_index_list(),
          add(cumulative_mass0, cumulative_sum(Mod_layer_mass)),
          "assigning variable Mod_layer_mass_cumulative");
      }
      current_statement__ = 18;
      current_statement__ = 18;
      check_greater_or_equal(function__, "w", w, 0);
      current_statement__ = 18;
      current_statement__ = 18;
      check_less_or_equal(function__, "w", w, 1);
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 22;
        current_statement__ = 22;
        check_greater_or_equal(function__, "infl_shape[sym1__]",
                               infl_shape[(sym1__ - 1)], 0);}
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= disp_yrs_1dim__; ++sym1__) {
        current_statement__ = 27;
        current_statement__ = 27;
        check_greater_or_equal(function__, "disp_yrs[sym1__]",
                               disp_yrs[(sym1__ - 1)], 0);}
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        current_statement__ = 28;
        current_statement__ = 28;
        check_greater_or_equal(function__, "clymo_par[sym1__]",
                               clymo_par[(sym1__ - 1)], 0);}
      current_statement__ = 29;
      current_statement__ = 29;
      check_greater_or_equal(function__, "clymo_alpha_2", clymo_alpha_2, 0);
      current_statement__ = 30;
      current_statement__ = 30;
      check_greater_or_equal(function__, "clymo_alpha_1", clymo_alpha_1, 0);
      current_statement__ = 31;
      current_statement__ = 31;
      check_greater_or_equal(function__, "ac_age", ac_age, 0);
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        current_statement__ = 32;
        current_statement__ = 32;
        check_greater_or_equal(function__, "Mod_layer_mass[sym1__]",
                               Mod_layer_mass[(sym1__ - 1)], 0);}
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        current_statement__ = 33;
        current_statement__ = 33;
        check_greater_or_equal(function__,
                               "Mod_layer_mass_cumulative[sym1__]",
                               Mod_layer_mass_cumulative[(sym1__ - 1)], 0);}
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= Mod_age2_all_1dim__; ++sym1__) {
        current_statement__ = 34;
        current_statement__ = 34;
        check_greater_or_equal(function__, "Mod_age2_all[sym1__]",
                               Mod_age2_all[(sym1__ - 1)], 0);}
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        current_statement__ = 35;
        current_statement__ = 35;
        check_greater_or_equal(function__, "Mod_age2_duration[sym1__]",
                               Mod_age2_duration[(sym1__ - 1)], 0);}
      if (emit_transformed_parameters__) {
        vars__.emplace_back(w);
        for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
          vars__.emplace_back(x[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= c_ages_1dim__; ++sym1__) {
          vars__.emplace_back(c_ages[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(Mod_age[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
          vars__.emplace_back(infl_shape[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= obs_err_infl_1dim__; ++sym1__) {
          vars__.emplace_back(obs_err_infl[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= bt_age_1dim__; ++sym1__) {
          vars__.emplace_back(bt_age[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= smooth_x_1dim__; ++sym1__) {
          vars__.emplace_back(smooth_x[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= age_het_1dim__; ++sym1__) {
          vars__.emplace_back(age_het[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= disp_yrs_1dim__; ++sym1__) {
          vars__.emplace_back(disp_yrs[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
          vars__.emplace_back(clymo_par[(sym1__ - 1)]);}
        vars__.emplace_back(clymo_alpha_2);
        vars__.emplace_back(clymo_alpha_1);
        vars__.emplace_back(ac_age);
        for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
          vars__.emplace_back(Mod_layer_mass[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
          vars__.emplace_back(Mod_layer_mass_cumulative[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= Mod_age2_all_1dim__; ++sym1__) {
          vars__.emplace_back(Mod_age2_all[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
          vars__.emplace_back(Mod_age2_duration[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
          vars__.emplace_back(Mod_age2_duration_acrotelm_next[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
          vars__.emplace_back(Mod_age2_duration_acrotelm_here[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
          vars__.emplace_back(Mod_age2_duration_catotelm_next[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
          vars__.emplace_back(Mod_age2_duration_catotelm_here[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> layer_cumulative_mass_rep;
      layer_cumulative_mass_rep = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(layer_cumulative_mass_rep, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> nmp_rep;
      nmp_rep = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(nmp_rep, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> nmu_rep;
      nmu_rep = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(nmu_rep, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> nmr_rep;
      nmr_rep = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(nmr_rep, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 125;
      for (int n = 1; n <= N2_c; ++n) {
        current_statement__ = 123;
        assign(layer_cumulative_mass_rep,
          cons_list(index_uni(n), nil_index_list()),
          gamma_rng(layer_mass_shape,
            (layer_mass_shape / Mod_layer_mass_cumulative[(n - 1)]),
            base_rng__), "assigning variable layer_cumulative_mass_rep");}
      {
        current_statement__ = 126;
        validate_non_negative_index("Mod_age2_upper_or", "N2_c", N2_c);
        Eigen::Matrix<double, -1, 1> Mod_age2_upper_or;
        Mod_age2_upper_or = Eigen::Matrix<double, -1, 1>(N2_c);
        stan::math::fill(Mod_age2_upper_or, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 127;
        assign(Mod_age2_upper_or, nil_index_list(),
          rvalue(Mod_age2_all,
            cons_list(index_min_max(1, N2_c), nil_index_list()),
            "Mod_age2_all"), "assigning variable Mod_age2_upper_or");
        current_statement__ = 128;
        validate_non_negative_index("Mod_age2_lower_or", "N2_c", N2_c);
        Eigen::Matrix<double, -1, 1> Mod_age2_lower_or;
        Mod_age2_lower_or = Eigen::Matrix<double, -1, 1>(N2_c);
        stan::math::fill(Mod_age2_lower_or, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 129;
        assign(Mod_age2_lower_or, nil_index_list(),
          rvalue(Mod_age2_all,
            cons_list(index_min_max(2, (N2_c + 1)), nil_index_list()),
            "Mod_age2_all"), "assigning variable Mod_age2_lower_or");
        current_statement__ = 130;
        validate_non_negative_index("fraction_mass_lost", "N2_c", N2_c);
        Eigen::Matrix<double, -1, 1> fraction_mass_lost;
        fraction_mass_lost = Eigen::Matrix<double, -1, 1>(N2_c);
        stan::math::fill(fraction_mass_lost, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 131;
        assign(fraction_mass_lost, nil_index_list(),
          stan::math::exp(
            multiply(-clymo_alpha_2,
              add(Mod_age2_duration_catotelm_next,
                Mod_age2_duration_catotelm_here))),
          "assigning variable fraction_mass_lost");
        current_statement__ = 136;
        for (int n = 1; n <= N2_c; ++n) {
          current_statement__ = 134;
          if (logical_lt(Mod_age2_upper_or[(n - 1)], ac_age)) {
            current_statement__ = 132;
            assign(fraction_mass_lost,
              cons_list(index_uni(n), nil_index_list()),
              (1 /
                stan::math::exp(
                  (-clymo_alpha_1 * (ac_age - Mod_age2_upper_or[(n - 1)])))),
              "assigning variable fraction_mass_lost");
          } }
        current_statement__ = 137;
        assign(nmp_rep, nil_index_list(), Mod_layer_mass,
          "assigning variable nmp_rep");
        current_statement__ = 138;
        assign(nmu_rep, nil_index_list(),
          elt_divide(nmp_rep, fraction_mass_lost),
          "assigning variable nmu_rep");
        current_statement__ = 139;
        validate_non_negative_index("Mod_age2_duration_acrotelm_tot_rep",
                                    "N2_c", N2_c);
        Eigen::Matrix<double, -1, 1> Mod_age2_duration_acrotelm_tot_rep;
        Mod_age2_duration_acrotelm_tot_rep = Eigen::Matrix<double, -1, 1>(N2_c);
        stan::math::fill(Mod_age2_duration_acrotelm_tot_rep, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 140;
        assign(Mod_age2_duration_acrotelm_tot_rep, nil_index_list(),
          add(Mod_age2_duration_acrotelm_next,
            Mod_age2_duration_acrotelm_here),
          "assigning variable Mod_age2_duration_acrotelm_tot_rep");
        current_statement__ = 141;
        validate_non_negative_index("Mod_age2_duration_catotelm_tot_rep",
                                    "N2_c", N2_c);
        Eigen::Matrix<double, -1, 1> Mod_age2_duration_catotelm_tot_rep;
        Mod_age2_duration_catotelm_tot_rep = Eigen::Matrix<double, -1, 1>(N2_c);
        stan::math::fill(Mod_age2_duration_catotelm_tot_rep, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 142;
        assign(Mod_age2_duration_catotelm_tot_rep, nil_index_list(),
          add(Mod_age2_duration_catotelm_next,
            Mod_age2_duration_catotelm_here),
          "assigning variable Mod_age2_duration_catotelm_tot_rep");
        current_statement__ = 182;
        for (int k = 1; k <= N2_c; ++k) {
          int N2_c_k;
          N2_c_k = std::numeric_limits<int>::min();
          
          current_statement__ = 143;
          N2_c_k = ((N2_c - k) + 1);
          current_statement__ = 144;
          validate_non_negative_index("Mod_age2_upper_start_rep", "N2_c_k",
                                      N2_c_k);
          Eigen::Matrix<double, -1, 1> Mod_age2_upper_start_rep;
          Mod_age2_upper_start_rep = Eigen::Matrix<double, -1, 1>(N2_c_k);
          stan::math::fill(Mod_age2_upper_start_rep, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 145;
          assign(Mod_age2_upper_start_rep, nil_index_list(),
            subtract(
              rvalue(Mod_age2_upper_or,
                cons_list(index_min_max(k, N2_c), nil_index_list()),
                "Mod_age2_upper_or"), Mod_age2_upper_or[(k - 1)]),
            "assigning variable Mod_age2_upper_start_rep");
          current_statement__ = 146;
          validate_non_negative_index("Mod_age2_upper_end_rep", "N2_c_k",
                                      N2_c_k);
          Eigen::Matrix<double, -1, 1> Mod_age2_upper_end_rep;
          Mod_age2_upper_end_rep = Eigen::Matrix<double, -1, 1>(N2_c_k);
          stan::math::fill(Mod_age2_upper_end_rep, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 147;
          assign(Mod_age2_upper_end_rep, nil_index_list(),
            add(Mod_age2_upper_start_rep, Mod_age2_duration[(k - 1)]),
            "assigning variable Mod_age2_upper_end_rep");
          current_statement__ = 148;
          validate_non_negative_index("Mod_age2_duration_catotelm_start_rep",
                                      "N2_c_k", N2_c_k);
          Eigen::Matrix<double, -1, 1> Mod_age2_duration_catotelm_start_rep;
          Mod_age2_duration_catotelm_start_rep = Eigen::Matrix<double, -1, 1>(N2_c_k);
          stan::math::fill(Mod_age2_duration_catotelm_start_rep, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 150;
          validate_non_negative_index("Mod_age2_duration_acrotelm_start_rep",
                                      "N2_c_k", N2_c_k);
          Eigen::Matrix<double, -1, 1> Mod_age2_duration_acrotelm_start_rep;
          Mod_age2_duration_acrotelm_start_rep = Eigen::Matrix<double, -1, 1>(N2_c_k);
          stan::math::fill(Mod_age2_duration_acrotelm_start_rep, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 161;
          for (int j = 1; j <= N2_c_k; ++j) {
            int index;
            index = std::numeric_limits<int>::min();
            
            current_statement__ = 152;
            index = ((j + k) - 1);
            current_statement__ = 159;
            if (logical_lte(Mod_age2_upper_or[(k - 1)],
                  Mod_age2_duration_catotelm_tot_rep[(index - 1)])) {
              current_statement__ = 156;
              assign(Mod_age2_duration_catotelm_start_rep,
                cons_list(index_uni(j), nil_index_list()),
                Mod_age2_upper_or[(k - 1)],
                "assigning variable Mod_age2_duration_catotelm_start_rep");
              current_statement__ = 157;
              assign(Mod_age2_duration_acrotelm_start_rep,
                cons_list(index_uni(j), nil_index_list()), 0.0,
                "assigning variable Mod_age2_duration_acrotelm_start_rep");
            } else {
              current_statement__ = 153;
              assign(Mod_age2_duration_catotelm_start_rep,
                cons_list(index_uni(j), nil_index_list()),
                Mod_age2_duration_catotelm_tot_rep[(index - 1)],
                "assigning variable Mod_age2_duration_catotelm_start_rep");
              current_statement__ = 154;
              assign(Mod_age2_duration_acrotelm_start_rep,
                cons_list(index_uni(j), nil_index_list()),
                (Mod_age2_upper_or[(k - 1)] -
                  Mod_age2_duration_catotelm_tot_rep[(index - 1)]),
                "assigning variable Mod_age2_duration_acrotelm_start_rep");
            }}
          current_statement__ = 162;
          validate_non_negative_index("Mod_age2_duration_catotelm_end_rep",
                                      "N2_c_k", N2_c_k);
          Eigen::Matrix<double, -1, 1> Mod_age2_duration_catotelm_end_rep;
          Mod_age2_duration_catotelm_end_rep = Eigen::Matrix<double, -1, 1>(N2_c_k);
          stan::math::fill(Mod_age2_duration_catotelm_end_rep, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 164;
          validate_non_negative_index("Mod_age2_duration_acrotelm_end_rep",
                                      "N2_c_k", N2_c_k);
          Eigen::Matrix<double, -1, 1> Mod_age2_duration_acrotelm_end_rep;
          Mod_age2_duration_acrotelm_end_rep = Eigen::Matrix<double, -1, 1>(N2_c_k);
          stan::math::fill(Mod_age2_duration_acrotelm_end_rep, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 175;
          for (int j = 1; j <= N2_c_k; ++j) {
            int index;
            index = std::numeric_limits<int>::min();
            
            current_statement__ = 166;
            index = ((j + k) - 1);
            current_statement__ = 173;
            if (logical_lte(Mod_age2_lower_or[(k - 1)],
                  Mod_age2_duration_catotelm_tot_rep[(index - 1)])) {
              current_statement__ = 170;
              assign(Mod_age2_duration_catotelm_end_rep,
                cons_list(index_uni(j), nil_index_list()),
                Mod_age2_lower_or[(k - 1)],
                "assigning variable Mod_age2_duration_catotelm_end_rep");
              current_statement__ = 171;
              assign(Mod_age2_duration_acrotelm_end_rep,
                cons_list(index_uni(j), nil_index_list()), 0.0,
                "assigning variable Mod_age2_duration_acrotelm_end_rep");
            } else {
              current_statement__ = 167;
              assign(Mod_age2_duration_catotelm_end_rep,
                cons_list(index_uni(j), nil_index_list()),
                Mod_age2_duration_catotelm_tot_rep[(index - 1)],
                "assigning variable Mod_age2_duration_catotelm_end_rep");
              current_statement__ = 168;
              assign(Mod_age2_duration_acrotelm_end_rep,
                cons_list(index_uni(j), nil_index_list()),
                (Mod_age2_lower_or[(k - 1)] -
                  Mod_age2_duration_catotelm_tot_rep[(index - 1)]),
                "assigning variable Mod_age2_duration_acrotelm_end_rep");
            }}
          current_statement__ = 176;
          validate_non_negative_index("ncu_0", "N2_c_k", N2_c_k);
          Eigen::Matrix<double, -1, 1> ncu_0;
          ncu_0 = Eigen::Matrix<double, -1, 1>(N2_c_k);
          stan::math::fill(ncu_0, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 177;
          assign(ncu_0, nil_index_list(),
            elt_divide(
              rvalue(nmp_rep,
                cons_list(index_min_max(k, N2_c), nil_index_list()),
                "nmp_rep"),
              stan::math::exp(
                subtract(
                  multiply(-clymo_alpha_1,
                    Mod_age2_duration_acrotelm_end_rep),
                  multiply(clymo_alpha_2, Mod_age2_duration_catotelm_end_rep)))),
            "assigning variable ncu_0");
          current_statement__ = 178;
          validate_non_negative_index("ncu_1", "N2_c_k", N2_c_k);
          Eigen::Matrix<double, -1, 1> ncu_1;
          ncu_1 = Eigen::Matrix<double, -1, 1>(N2_c_k);
          stan::math::fill(ncu_1, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 179;
          assign(ncu_1, nil_index_list(),
            elt_divide(
              rvalue(nmp_rep,
                cons_list(index_min_max(k, N2_c), nil_index_list()),
                "nmp_rep"),
              stan::math::exp(
                subtract(
                  multiply(-clymo_alpha_1,
                    Mod_age2_duration_acrotelm_start_rep),
                  multiply(clymo_alpha_2,
                    Mod_age2_duration_catotelm_start_rep)))),
            "assigning variable ncu_1");
          current_statement__ = 180;
          assign(nmr_rep, cons_list(index_uni(k), nil_index_list()),
            sum(subtract(ncu_1, ncu_0)), "assigning variable nmr_rep");}
      }
      current_statement__ = 184;
      assign(nmp_rep, nil_index_list(),
        elt_divide(stan::model::deep_copy(nmp_rep), Mod_age2_duration),
        "assigning variable nmp_rep");
      current_statement__ = 185;
      assign(nmu_rep, nil_index_list(),
        elt_divide(stan::model::deep_copy(nmu_rep), Mod_age2_duration),
        "assigning variable nmu_rep");
      current_statement__ = 186;
      assign(nmr_rep, nil_index_list(),
        elt_divide(stan::model::deep_copy(nmr_rep), Mod_age2_duration),
        "assigning variable nmr_rep");
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        vars__.emplace_back(layer_cumulative_mass_rep[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        vars__.emplace_back(nmp_rep[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        vars__.emplace_back(nmu_rep[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        vars__.emplace_back(nmr_rep[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double R;
      R = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      R = context__.vals_r("R")[(1 - 1)];
      double R_free__;
      R_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      R_free__ = stan::math::lub_free(R, 0, 1);
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(K_tot);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 2;
        assign(alpha_flat__, nil_index_list(), context__.vals_r("alpha"),
          "assigning variable alpha_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
          current_statement__ = 2;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_flat__[(pos__ - 1)], "assigning variable alpha");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha_free__;
      alpha_free__ = Eigen::Matrix<double, -1, 1>(K_tot);
      stan::math::fill(alpha_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
        current_statement__ = 2;
        assign(alpha_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha_free__");}
      double age0;
      age0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      age0 = context__.vals_r("age0")[(1 - 1)];
      double age0_free__;
      age0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      age0_free__ = stan::math::lb_free(age0, min_age);
      std::vector<double> infl_mean;
      infl_mean = std::vector<double>(inflate_errors, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(infl_mean, nil_index_list(), context__.vals_r("infl_mean"),
        "assigning variable infl_mean");
      std::vector<double> infl_mean_free__;
      infl_mean_free__ = std::vector<double>(inflate_errors, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 4;
        assign(infl_mean_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(infl_mean[(sym1__ - 1)], 0),
          "assigning variable infl_mean_free__");}
      std::vector<double> infl_shape_1;
      infl_shape_1 = std::vector<double>(inflate_errors, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(infl_shape_1, nil_index_list(),
        context__.vals_r("infl_shape_1"), "assigning variable infl_shape_1");
      std::vector<double> infl_shape_1_free__;
      infl_shape_1_free__ = std::vector<double>(inflate_errors, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 5;
        assign(infl_shape_1_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(infl_shape_1[(sym1__ - 1)], 0),
          "assigning variable infl_shape_1_free__");}
      Eigen::Matrix<double, -1, 1> infl;
      infl = Eigen::Matrix<double, -1, 1>(infl_1dim__);
      stan::math::fill(infl, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> infl_flat__;
        current_statement__ = 6;
        assign(infl_flat__, nil_index_list(), context__.vals_r("infl"),
          "assigning variable infl_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
          current_statement__ = 6;
          assign(infl, cons_list(index_uni(sym1__), nil_index_list()),
            infl_flat__[(pos__ - 1)], "assigning variable infl");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> infl_free__;
      infl_free__ = Eigen::Matrix<double, -1, 1>(infl_1dim__);
      stan::math::fill(infl_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(infl_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(infl[(sym1__ - 1)], 0),
          "assigning variable infl_free__");}
      std::vector<double> L;
      L = std::vector<double>(L_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      assign(L, nil_index_list(), context__.vals_r("L"),
        "assigning variable L");
      std::vector<double> L_free__;
      L_free__ = std::vector<double>(L_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(L_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(L[(sym1__ - 1)], 0),
          "assigning variable L_free__");}
      Eigen::Matrix<double, -1, 1> bt_error;
      bt_error = Eigen::Matrix<double, -1, 1>(bt_error_1dim__);
      stan::math::fill(bt_error, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> bt_error_flat__;
        current_statement__ = 8;
        assign(bt_error_flat__, nil_index_list(),
          context__.vals_r("bt_error"), "assigning variable bt_error_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
          current_statement__ = 8;
          assign(bt_error, cons_list(index_uni(sym1__), nil_index_list()),
            bt_error_flat__[(pos__ - 1)], "assigning variable bt_error");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> bt_error_free__;
      bt_error_free__ = Eigen::Matrix<double, -1, 1>(bt_error_1dim__);
      stan::math::fill(bt_error_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
        current_statement__ = 8;
        assign(bt_error_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(bt_error[(sym1__ - 1)], 0),
          "assigning variable bt_error_free__");}
      std::vector<double> D;
      D = std::vector<double>(model_displacement, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      assign(D, nil_index_list(), context__.vals_r("D"),
        "assigning variable D");
      std::vector<double> D_free__;
      D_free__ = std::vector<double>(model_displacement, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
        current_statement__ = 9;
        assign(D_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(D[(sym1__ - 1)], 0),
          "assigning variable D_free__");}
      std::vector<double> H_depth;
      H_depth = std::vector<double>(model_hiatus, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      assign(H_depth, nil_index_list(), context__.vals_r("H_depth"),
        "assigning variable H_depth");
      std::vector<double> H_depth_free__;
      H_depth_free__ = std::vector<double>(model_hiatus, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 10;
        assign(H_depth_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(H_depth[(sym1__ - 1)], H_top, H_bottom),
          "assigning variable H_depth_free__");}
      std::vector<double> H_length;
      H_length = std::vector<double>(model_hiatus, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      assign(H_length, nil_index_list(), context__.vals_r("H_length"),
        "assigning variable H_length");
      std::vector<double> H_length_free__;
      H_length_free__ = std::vector<double>(model_hiatus, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 11;
        assign(H_length_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(H_length[(sym1__ - 1)], 0, data_age_range),
          "assigning variable H_length_free__");}
      Eigen::Matrix<double, -1, 1> clymo_par_raw;
      clymo_par_raw = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(clymo_par_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> clymo_par_raw_flat__;
        current_statement__ = 12;
        assign(clymo_par_raw_flat__, nil_index_list(),
          context__.vals_r("clymo_par_raw"),
          "assigning variable clymo_par_raw_flat__");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
          current_statement__ = 12;
          assign(clymo_par_raw,
            cons_list(index_uni(sym1__), nil_index_list()),
            clymo_par_raw_flat__[(pos__ - 1)],
            "assigning variable clymo_par_raw");
          current_statement__ = 12;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> clymo_par_raw_free__;
      clymo_par_raw_free__ = Eigen::Matrix<double, -1, 1>(N2_c);
      stan::math::fill(clymo_par_raw_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        current_statement__ = 12;
        assign(clymo_par_raw_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(clymo_par_raw[(sym1__ - 1)], 0),
          "assigning variable clymo_par_raw_free__");}
      double clymo_alpha_1_raw;
      clymo_alpha_1_raw = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      clymo_alpha_1_raw = context__.vals_r("clymo_alpha_1_raw")[(1 - 1)];
      double clymo_alpha_1_raw_free__;
      clymo_alpha_1_raw_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      clymo_alpha_1_raw_free__ = stan::math::lb_free(clymo_alpha_1_raw, 0);
      double clymo_alpha_2_raw;
      clymo_alpha_2_raw = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      clymo_alpha_2_raw = context__.vals_r("clymo_alpha_2_raw")[(1 - 1)];
      double clymo_alpha_2_raw_free__;
      clymo_alpha_2_raw_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      clymo_alpha_2_raw_free__ = stan::math::lb_free(clymo_alpha_2_raw, 0);
      double ac_age_raw;
      ac_age_raw = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      ac_age_raw = context__.vals_r("ac_age_raw")[(1 - 1)];
      double ac_age_raw_free__;
      ac_age_raw_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      ac_age_raw_free__ = stan::math::lb_free(ac_age_raw, 0);
      double layer_mass_shape;
      layer_mass_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      layer_mass_shape = context__.vals_r("layer_mass_shape")[(1 - 1)];
      double layer_mass_shape_free__;
      layer_mass_shape_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      layer_mass_shape_free__ = stan::math::lb_free(layer_mass_shape, 0);
      double clymo_par_memory;
      clymo_par_memory = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      clymo_par_memory = context__.vals_r("clymo_par_memory")[(1 - 1)];
      double clymo_par_memory_free__;
      clymo_par_memory_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      clymo_par_memory_free__ = stan::math::lub_free(clymo_par_memory, 0, 1);
      vars__.emplace_back(R_free__);
      for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
        vars__.emplace_back(alpha_free__[(sym1__ - 1)]);}
      vars__.emplace_back(age0_free__);
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        vars__.emplace_back(infl_mean_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        vars__.emplace_back(infl_shape_1_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
        vars__.emplace_back(infl_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
        vars__.emplace_back(L_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
        vars__.emplace_back(bt_error_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
        vars__.emplace_back(D_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        vars__.emplace_back(H_depth_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        vars__.emplace_back(H_length_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        vars__.emplace_back(clymo_par_raw_free__[(sym1__ - 1)]);}
      vars__.emplace_back(clymo_alpha_1_raw_free__);
      vars__.emplace_back(clymo_alpha_2_raw_free__);
      vars__.emplace_back(ac_age_raw_free__);
      vars__.emplace_back(layer_mass_shape_free__);
      vars__.emplace_back(clymo_par_memory_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("R");
    names__.emplace_back("alpha");
    names__.emplace_back("age0");
    names__.emplace_back("infl_mean");
    names__.emplace_back("infl_shape_1");
    names__.emplace_back("infl");
    names__.emplace_back("L");
    names__.emplace_back("bt_error");
    names__.emplace_back("D");
    names__.emplace_back("H_depth");
    names__.emplace_back("H_length");
    names__.emplace_back("clymo_par_raw");
    names__.emplace_back("clymo_alpha_1_raw");
    names__.emplace_back("clymo_alpha_2_raw");
    names__.emplace_back("ac_age_raw");
    names__.emplace_back("layer_mass_shape");
    names__.emplace_back("clymo_par_memory");
    names__.emplace_back("w");
    names__.emplace_back("x");
    names__.emplace_back("c_ages");
    names__.emplace_back("Mod_age");
    names__.emplace_back("infl_shape");
    names__.emplace_back("obs_err_infl");
    names__.emplace_back("bt_age");
    names__.emplace_back("smooth_x");
    names__.emplace_back("age_het");
    names__.emplace_back("disp_yrs");
    names__.emplace_back("clymo_par");
    names__.emplace_back("clymo_alpha_2");
    names__.emplace_back("clymo_alpha_1");
    names__.emplace_back("ac_age");
    names__.emplace_back("Mod_layer_mass");
    names__.emplace_back("Mod_layer_mass_cumulative");
    names__.emplace_back("Mod_age2_all");
    names__.emplace_back("Mod_age2_duration");
    names__.emplace_back("Mod_age2_duration_acrotelm_next");
    names__.emplace_back("Mod_age2_duration_acrotelm_here");
    names__.emplace_back("Mod_age2_duration_catotelm_next");
    names__.emplace_back("Mod_age2_duration_catotelm_here");
    names__.emplace_back("layer_cumulative_mass_rep");
    names__.emplace_back("nmp_rep");
    names__.emplace_back("nmu_rep");
    names__.emplace_back("nmr_rep");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K_tot)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(inflate_errors)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(inflate_errors)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(infl_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(bt_error_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(model_displacement)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(model_hiatus)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(model_hiatus)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N2_c)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K_fine)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(c_ages_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(inflate_errors)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(obs_err_infl_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(bt_age_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(smooth_x_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(age_het_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(disp_yrs_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N2_c)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N2_c)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N2_c)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(Mod_age2_all_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N2_c)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N2_c)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N2_c)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N2_c)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N2_c)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N2_c)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N2_c)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N2_c)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N2_c)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "R");
    for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "age0");
    for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "infl_mean" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "infl_shape_1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "infl" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bt_error" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "D" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "H_depth" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "H_length" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "clymo_par_raw" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "clymo_alpha_1_raw");
    param_names__.emplace_back(std::string() + "clymo_alpha_2_raw");
    param_names__.emplace_back(std::string() + "ac_age_raw");
    param_names__.emplace_back(std::string() + "layer_mass_shape");
    param_names__.emplace_back(std::string() + "clymo_par_memory");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "w");
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= c_ages_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c_ages" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "infl_shape" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= obs_err_infl_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "obs_err_infl" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= bt_age_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "bt_age" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= smooth_x_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "smooth_x" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= age_het_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "age_het" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= disp_yrs_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "disp_yrs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "clymo_par" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "clymo_alpha_2");
      param_names__.emplace_back(std::string() + "clymo_alpha_1");
      param_names__.emplace_back(std::string() + "ac_age");
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_layer_mass" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_layer_mass_cumulative" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Mod_age2_all_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age2_all" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age2_duration" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age2_duration_acrotelm_next" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age2_duration_acrotelm_here" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age2_duration_catotelm_next" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age2_duration_catotelm_here" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "layer_cumulative_mass_rep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nmp_rep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nmu_rep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nmr_rep" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "R");
    for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "age0");
    for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "infl_mean" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "infl_shape_1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "infl" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bt_error" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "D" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "H_depth" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "H_length" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "clymo_par_raw" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "clymo_alpha_1_raw");
    param_names__.emplace_back(std::string() + "clymo_alpha_2_raw");
    param_names__.emplace_back(std::string() + "ac_age_raw");
    param_names__.emplace_back(std::string() + "layer_mass_shape");
    param_names__.emplace_back(std::string() + "clymo_par_memory");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "w");
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= c_ages_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c_ages" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "infl_shape" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= obs_err_infl_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "obs_err_infl" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= bt_age_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "bt_age" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= smooth_x_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "smooth_x" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= age_het_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "age_het" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= disp_yrs_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "disp_yrs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "clymo_par" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "clymo_alpha_2");
      param_names__.emplace_back(std::string() + "clymo_alpha_1");
      param_names__.emplace_back(std::string() + "ac_age");
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_layer_mass" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_layer_mass_cumulative" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Mod_age2_all_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age2_all" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age2_duration" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age2_duration_acrotelm_next" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age2_duration_acrotelm_here" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age2_duration_catotelm_next" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age2_duration_catotelm_here" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "layer_cumulative_mass_rep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nmp_rep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nmu_rep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2_c; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nmr_rep" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"R\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << K_tot << "},\"block\":\"parameters\"},{\"name\":\"age0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"infl_mean\",\"type\":{\"name\":\"array\",\"length\":" << inflate_errors << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"infl_shape_1\",\"type\":{\"name\":\"array\",\"length\":" << inflate_errors << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"infl\",\"type\":{\"name\":\"vector\",\"length\":" << infl_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"array\",\"length\":" << L_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bt_error\",\"type\":{\"name\":\"vector\",\"length\":" << bt_error_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"D\",\"type\":{\"name\":\"array\",\"length\":" << model_displacement << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"H_depth\",\"type\":{\"name\":\"array\",\"length\":" << model_hiatus << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"H_length\",\"type\":{\"name\":\"array\",\"length\":" << model_hiatus << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"clymo_par_raw\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"parameters\"},{\"name\":\"clymo_alpha_1_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"clymo_alpha_2_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ac_age_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"layer_mass_shape\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"clymo_par_memory\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"vector\",\"length\":" << K_fine << "},\"block\":\"transformed_parameters\"},{\"name\":\"c_ages\",\"type\":{\"name\":\"vector\",\"length\":" << c_ages_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"infl_shape\",\"type\":{\"name\":\"array\",\"length\":" << inflate_errors << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"obs_err_infl\",\"type\":{\"name\":\"vector\",\"length\":" << obs_err_infl_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"bt_age\",\"type\":{\"name\":\"vector\",\"length\":" << bt_age_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"smooth_x\",\"type\":{\"name\":\"vector\",\"length\":" << smooth_x_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"age_het\",\"type\":{\"name\":\"vector\",\"length\":" << age_het_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"disp_yrs\",\"type\":{\"name\":\"vector\",\"length\":" << disp_yrs_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"clymo_par\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"clymo_alpha_2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"clymo_alpha_1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"ac_age\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_layer_mass\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_layer_mass_cumulative\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age2_all\",\"type\":{\"name\":\"vector\",\"length\":" << Mod_age2_all_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age2_duration\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age2_duration_acrotelm_next\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age2_duration_acrotelm_here\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age2_duration_catotelm_next\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age2_duration_catotelm_here\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"layer_cumulative_mass_rep\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"generated_quantities\"},{\"name\":\"nmp_rep\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"generated_quantities\"},{\"name\":\"nmu_rep\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"generated_quantities\"},{\"name\":\"nmr_rep\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"R\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << K_tot << "},\"block\":\"parameters\"},{\"name\":\"age0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"infl_mean\",\"type\":{\"name\":\"array\",\"length\":" << inflate_errors << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"infl_shape_1\",\"type\":{\"name\":\"array\",\"length\":" << inflate_errors << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"infl\",\"type\":{\"name\":\"vector\",\"length\":" << infl_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"array\",\"length\":" << L_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bt_error\",\"type\":{\"name\":\"vector\",\"length\":" << bt_error_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"D\",\"type\":{\"name\":\"array\",\"length\":" << model_displacement << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"H_depth\",\"type\":{\"name\":\"array\",\"length\":" << model_hiatus << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"H_length\",\"type\":{\"name\":\"array\",\"length\":" << model_hiatus << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"clymo_par_raw\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"parameters\"},{\"name\":\"clymo_alpha_1_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"clymo_alpha_2_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ac_age_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"layer_mass_shape\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"clymo_par_memory\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"vector\",\"length\":" << K_fine << "},\"block\":\"transformed_parameters\"},{\"name\":\"c_ages\",\"type\":{\"name\":\"vector\",\"length\":" << c_ages_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"infl_shape\",\"type\":{\"name\":\"array\",\"length\":" << inflate_errors << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"obs_err_infl\",\"type\":{\"name\":\"vector\",\"length\":" << obs_err_infl_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"bt_age\",\"type\":{\"name\":\"vector\",\"length\":" << bt_age_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"smooth_x\",\"type\":{\"name\":\"vector\",\"length\":" << smooth_x_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"age_het\",\"type\":{\"name\":\"vector\",\"length\":" << age_het_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"disp_yrs\",\"type\":{\"name\":\"vector\",\"length\":" << disp_yrs_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"clymo_par\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"clymo_alpha_2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"clymo_alpha_1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"ac_age\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_layer_mass\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_layer_mass_cumulative\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age2_all\",\"type\":{\"name\":\"vector\",\"length\":" << Mod_age2_all_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age2_duration\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age2_duration_acrotelm_next\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age2_duration_acrotelm_here\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age2_duration_catotelm_next\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age2_duration_catotelm_here\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"transformed_parameters\"},{\"name\":\"layer_cumulative_mass_rep\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"generated_quantities\"},{\"name\":\"nmp_rep\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"generated_quantities\"},{\"name\":\"nmu_rep\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"generated_quantities\"},{\"name\":\"nmr_rep\",\"type\":{\"name\":\"vector\",\"length\":" << N2_c << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_mm2_namespace::model_mm2;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mm2_namespace::profiles__;
}
#endif
#endif
