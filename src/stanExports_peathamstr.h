// Generated by rstantools.  Do not edit by hand.

/*
    peathamstr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    peathamstr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with peathamstr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_peathamstr_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 104, column 2 to column 31)",
                                                      " (in 'string', line 106, column 2 to column 33)",
                                                      " (in 'string', line 108, column 2 to column 29)",
                                                      " (in 'string', line 112, column 2 to column 44)",
                                                      " (in 'string', line 113, column 2 to column 47)",
                                                      " (in 'string', line 114, column 2 to column 49)",
                                                      " (in 'string', line 115, column 2 to column 51)",
                                                      " (in 'string', line 116, column 2 to column 57)",
                                                      " (in 'string', line 117, column 2 to column 40)",
                                                      " (in 'string', line 118, column 2 to column 62)",
                                                      " (in 'string', line 119, column 2 to column 65)",
                                                      " (in 'string', line 121, column 2 to column 38)",
                                                      " (in 'string', line 122, column 2 to column 29)",
                                                      " (in 'string', line 123, column 2 to column 44)",
                                                      " (in 'string', line 127, column 2 to column 31)",
                                                      " (in 'string', line 129, column 2 to column 19)",
                                                      " (in 'string', line 131, column 2 to column 26)",
                                                      " (in 'string', line 133, column 2 to column 20)",
                                                      " (in 'string', line 135, column 2 to column 45)",
                                                      " (in 'string', line 136, column 2 to column 80)",
                                                      " (in 'string', line 140, column 2 to column 44)",
                                                      " (in 'string', line 141, column 2 to column 80)",
                                                      " (in 'string', line 143, column 2 to column 45)",
                                                      " (in 'string', line 144, column 2 to column 57)",
                                                      " (in 'string', line 207, column 2 to column 37)",
                                                      " (in 'string', line 208, column 2 to column 33)",
                                                      " (in 'string', line 148, column 4 to column 10)",
                                                      " (in 'string', line 147, column 9 to line 149, column 3)",
                                                      " (in 'string', line 146, column 4 to column 20)",
                                                      " (in 'string', line 145, column 19 to line 147, column 3)",
                                                      " (in 'string', line 145, column 2 to line 149, column 3)",
                                                      " (in 'string', line 152, column 2 to column 29)",
                                                      " (in 'string', line 155, column 4 to column 55)",
                                                      " (in 'string', line 154, column 20 to line 156, column 3)",
                                                      " (in 'string', line 154, column 2 to line 156, column 3)",
                                                      " (in 'string', line 158, column 2 to column 19)",
                                                      " (in 'string', line 159, column 2 to column 60)",
                                                      " (in 'string', line 163, column 41 to column 77)",
                                                      " (in 'string', line 163, column 6 to column 77)",
                                                      " (in 'string', line 162, column 27 to line 164, column 7)",
                                                      " (in 'string', line 162, column 4 to line 164, column 7)",
                                                      " (in 'string', line 161, column 24 to line 165, column 7)",
                                                      " (in 'string', line 161, column 2 to line 165, column 7)",
                                                      " (in 'string', line 167, column 2 to column 75)",
                                                      " (in 'string', line 175, column 8 to column 37)",
                                                      " (in 'string', line 174, column 20 to line 176, column 7)",
                                                      " (in 'string', line 174, column 6 to line 176, column 7)",
                                                      " (in 'string', line 173, column 11 to line 177, column 5)",
                                                      " (in 'string', line 171, column 8 to column 45)",
                                                      " (in 'string', line 170, column 20 to line 172, column 7)",
                                                      " (in 'string', line 170, column 6 to line 172, column 7)",
                                                      " (in 'string', line 169, column 22 to line 173, column 5)",
                                                      " (in 'string', line 169, column 4 to line 177, column 5)",
                                                      " (in 'string', line 168, column 57 to line 178, column 3)",
                                                      " (in 'string', line 168, column 2 to line 178, column 3)",
                                                      " (in 'string', line 181, column 6 to column 32)",
                                                      " (in 'string', line 184, column 6 to column 44)",
                                                      " (in 'string', line 180, column 22 to line 185, column 5)",
                                                      " (in 'string', line 180, column 4 to line 185, column 5)",
                                                      " (in 'string', line 187, column 6 to column 40)",
                                                      " (in 'string', line 190, column 6 to column 44)",
                                                      " (in 'string', line 186, column 22 to line 191, column 5)",
                                                      " (in 'string', line 186, column 4 to line 191, column 5)",
                                                      " (in 'string', line 179, column 30 to line 192, column 3)",
                                                      " (in 'string', line 179, column 2 to line 192, column 3)",
                                                      " (in 'string', line 203, column 4 to column 31)",
                                                      " (in 'string', line 204, column 4 to column 71)",
                                                      " (in 'string', line 202, column 60 to line 205, column 3)",
                                                      " (in 'string', line 202, column 9 to line 205, column 3)",
                                                      " (in 'string', line 200, column 4 to column 57)",
                                                      " (in 'string', line 198, column 4 to line 200, column 57)",
                                                      " (in 'string', line 201, column 4 to column 40)",
                                                      " (in 'string', line 197, column 60 to line 202, column 3)",
                                                      " (in 'string', line 197, column 9 to line 205, column 3)",
                                                      " (in 'string', line 194, column 4 to column 31)",
                                                      " (in 'string', line 195, column 4 to column 88)",
                                                      " (in 'string', line 196, column 4 to column 40)",
                                                      " (in 'string', line 193, column 53 to line 197, column 3)",
                                                      " (in 'string', line 193, column 2 to line 205, column 3)",
                                                      " (in 'string', line 209, column 2 to column 42)",
                                                      " (in 'string', line 210, column 2 to column 191)",
                                                      " (in 'string', line 212, column 11 to column 13)",
                                                      " (in 'string', line 212, column 4 to column 93)",
                                                      " (in 'string', line 213, column 11 to column 13)",
                                                      " (in 'string', line 213, column 4 to column 70)",
                                                      " (in 'string', line 214, column 4 to column 176)",
                                                      " (in 'string', line 211, column 2 to line 215, column 3)",
                                                      " (in 'string', line 261, column 2 to column 25)",
                                                      " (in 'string', line 262, column 2 to column 25)",
                                                      " (in 'string', line 263, column 2 to column 25)",
                                                      " (in 'string', line 264, column 2 to column 95)",
                                                      " (in 'string', line 265, column 2 to column 66)",
                                                      " (in 'string', line 267, column 4 to column 132)",
                                                      " (in 'string', line 266, column 21 to line 268, column 3)",
                                                      " (in 'string', line 266, column 2 to line 268, column 3)",
                                                      " (in 'string', line 220, column 2 to column 42)",
                                                      " (in 'string', line 223, column 2 to column 81)",
                                                      " (in 'string', line 225, column 2 to column 32)",
                                                      " (in 'string', line 228, column 4 to column 77)",
                                                      " (in 'string', line 229, column 4 to column 41)",
                                                      " (in 'string', line 230, column 4 to column 62)",
                                                      " (in 'string', line 227, column 21 to line 231, column 3)",
                                                      " (in 'string', line 227, column 2 to line 231, column 3)",
                                                      " (in 'string', line 234, column 2 to column 35)",
                                                      " (in 'string', line 235, column 2 to column 31)",
                                                      " (in 'string', line 237, column 2 to column 44)",
                                                      " (in 'string', line 251, column 6 to column 48)",
                                                      " (in 'string', line 250, column 11 to line 252, column 5)",
                                                      " (in 'string', line 249, column 6 to column 53)",
                                                      " (in 'string', line 247, column 55 to line 250, column 5)",
                                                      " (in 'string', line 247, column 4 to line 252, column 5)",
                                                      " (in 'string', line 246, column 9 to line 253, column 3)",
                                                      " (in 'string', line 244, column 6 to column 47)",
                                                      " (in 'string', line 243, column 11 to line 245, column 5)",
                                                      " (in 'string', line 242, column 6 to column 52)",
                                                      " (in 'string', line 240, column 55 to line 243, column 5)",
                                                      " (in 'string', line 240, column 4 to line 245, column 5)",
                                                      " (in 'string', line 238, column 30 to line 246, column 3)",
                                                      " (in 'string', line 238, column 2 to line 253, column 3)",
                                                      " (in 'string', line 255, column 2 to column 48)",
                                                      " (in 'string', line 256, column 2 to column 54)",
                                                      " (in 'string', line 257, column 2 to column 96)",
                                                      " (in 'string', line 258, column 2 to column 103)",
                                                      " (in 'string', line 9, column 2 to column 17)",
                                                      " (in 'string', line 10, column 9 to column 10)",
                                                      " (in 'string', line 10, column 2 to column 18)",
                                                      " (in 'string', line 11, column 9 to column 10)",
                                                      " (in 'string', line 11, column 2 to column 20)",
                                                      " (in 'string', line 12, column 9 to column 10)",
                                                      " (in 'string', line 12, column 2 to column 20)",
                                                      " (in 'string', line 13, column 2 to column 15)",
                                                      " (in 'string', line 15, column 2 to column 24)",
                                                      " (in 'string', line 16, column 2 to column 22)",
                                                      " (in 'string', line 17, column 2 to column 21)",
                                                      " (in 'string', line 18, column 13 to column 18)",
                                                      " (in 'string', line 18, column 2 to column 20)",
                                                      " (in 'string', line 20, column 9 to column 15)",
                                                      " (in 'string', line 20, column 2 to column 32)",
                                                      " (in 'string', line 21, column 9 to column 15)",
                                                      " (in 'string', line 21, column 2 to column 29)",
                                                      " (in 'string', line 22, column 2 to column 26)",
                                                      " (in 'string', line 25, column 2 to column 33)",
                                                      " (in 'string', line 27, column 2 to column 28)",
                                                      " (in 'string', line 30, column 2 to column 36)",
                                                      " (in 'string', line 32, column 2 to column 27)",
                                                      " (in 'string', line 33, column 2 to column 31)",
                                                      " (in 'string', line 35, column 2 to column 18)",
                                                      " (in 'string', line 36, column 14 to column 15)",
                                                      " (in 'string', line 36, column 2 to column 17)",
                                                      " (in 'string', line 37, column 2 to column 32)",
                                                      " (in 'string', line 38, column 2 to column 39)",
                                                      " (in 'string', line 40, column 2 to column 35)",
                                                      " (in 'string', line 41, column 2 to column 34)",
                                                      " (in 'string', line 42, column 2 to column 32)",
                                                      " (in 'string', line 45, column 2 to column 43)",
                                                      " (in 'string', line 46, column 2 to column 17)",
                                                      " (in 'string', line 47, column 15 to column 16)",
                                                      " (in 'string', line 47, column 18 to column 19)",
                                                      " (in 'string', line 47, column 2 to column 21)",
                                                      " (in 'string', line 48, column 2 to column 31)",
                                                      " (in 'string', line 49, column 2 to column 32)",
                                                      " (in 'string', line 50, column 9 to column 29)",
                                                      " (in 'string', line 50, column 2 to column 37)",
                                                      " (in 'string', line 52, column 2 to column 43)",
                                                      " (in 'string', line 53, column 2 to column 32)",
                                                      " (in 'string', line 54, column 2 to column 33)",
                                                      " (in 'string', line 56, column 2 to column 37)",
                                                      " (in 'string', line 57, column 2 to column 13)",
                                                      " (in 'string', line 58, column 2 to column 16)",
                                                      " (in 'string', line 60, column 2 to column 18)",
                                                      " (in 'string', line 61, column 9 to column 11)",
                                                      " (in 'string', line 61, column 2 to column 20)",
                                                      " (in 'string', line 62, column 9 to column 11)",
                                                      " (in 'string', line 62, column 2 to column 29)",
                                                      " (in 'string', line 63, column 15 to column 17)",
                                                      " (in 'string', line 63, column 2 to column 19)",
                                                      " (in 'string', line 64, column 2 to column 47)",
                                                      " (in 'string', line 65, column 2 to column 47)",
                                                      " (in 'string', line 66, column 2 to column 31)",
                                                      " (in 'string', line 67, column 2 to column 31)",
                                                      " (in 'string', line 68, column 2 to column 33)",
                                                      " (in 'string', line 69, column 2 to column 33)",
                                                      " (in 'string', line 70, column 2 to column 35)",
                                                      " (in 'string', line 73, column 2 to column 36)",
                                                      " (in 'string', line 74, column 2 to column 39)",
                                                      " (in 'string', line 75, column 2 to column 52)",
                                                      " (in 'string', line 77, column 2 to column 14)",
                                                      " (in 'string', line 79, column 2 to column 37)",
                                                      " (in 'string', line 82, column 2 to column 52)",
                                                      " (in 'string', line 83, column 2 to column 55)",
                                                      " (in 'string', line 85, column 2 to column 49)",
                                                      " (in 'string', line 87, column 2 to column 32)",
                                                      " (in 'string', line 91, column 4 to column 30)",
                                                      " (in 'string', line 90, column 8 to line 92, column 3)",
                                                      " (in 'string', line 89, column 4 to column 39)",
                                                      " (in 'string', line 88, column 23 to line 90, column 3)",
                                                      " (in 'string', line 88, column 2 to line 92, column 3)",
                                                      " (in 'string', line 93, column 2 to column 40)",
                                                      " (in 'string', line 98, column 4 to column 17)",
                                                      " (in 'string', line 97, column 9 to line 99, column 3)",
                                                      " (in 'string', line 96, column 4 to column 17)",
                                                      " (in 'string', line 95, column 26 to line 97, column 3)",
                                                      " (in 'string', line 95, column 2 to line 99, column 3)",
                                                      " (in 'string', line 106, column 20 to column 25)",
                                                      " (in 'string', line 112, column 28 to column 42)",
                                                      " (in 'string', line 113, column 31 to column 45)",
                                                      " (in 'string', line 114, column 20 to column 42)",
                                                      " (in 'string', line 115, column 20 to column 49)",
                                                      " (in 'string', line 116, column 20 to column 46)",
                                                      " (in 'string', line 117, column 20 to column 38)",
                                                      " (in 'string', line 118, column 48 to column 60)",
                                                      " (in 'string', line 119, column 51 to column 63)",
                                                      " (in 'string', line 121, column 20 to column 26)",
                                                      " (in 'string', line 129, column 9 to column 15)",
                                                      " (in 'string', line 131, column 9 to column 17)",
                                                      " (in 'string', line 133, column 9 to column 10)",
                                                      " (in 'string', line 135, column 29 to column 43)",
                                                      " (in 'string', line 136, column 9 to column 65)",
                                                      " (in 'string', line 140, column 9 to column 35)",
                                                      " (in 'string', line 141, column 9 to column 69)",
                                                      " (in 'string', line 143, column 9 to column 35)",
                                                      " (in 'string', line 144, column 20 to column 46)",
                                                      " (in 'string', line 207, column 9 to column 17)",
                                                      " (in 'string', line 208, column 9 to column 11)",
                                                      " (in 'string', line 261, column 9 to column 15)",
                                                      " (in 'string', line 262, column 9 to column 15)",
                                                      " (in 'string', line 263, column 9 to column 15)"};
#include <stan_meta_header.hpp>
class model_peathamstr final : public model_base_crtp<model_peathamstr> {
private:
  int N;
  Eigen::Matrix<double, -1, 1> depth;
  Eigen::Matrix<double, -1, 1> obs_age;
  Eigen::Matrix<double, -1, 1> obs_err;
  double min_age;
  int n_lvls;
  int K_fine;
  int K_tot;
  std::vector<int> parent;
  Eigen::Matrix<double, -1, 1> c_depth_bottom;
  Eigen::Matrix<double, -1, 1> c_depth_top;
  double delta_c;
  double acc_mean_prior;
  double acc_shape;
  int scale_shape;
  double mem_mean;
  double mem_strength;
  int nu;
  std::vector<int> which_c;
  int scale_R;
  int inflate_errors;
  double infl_shape_shape;
  double infl_shape_mean;
  double infl_sigma_sd;
  int model_bioturbation;
  int I;
  std::vector<std::vector<int>> smooth_i;
  double L_prior_mean;
  double L_prior_shape;
  Eigen::Matrix<double, -1, 1> n_ind;
  int model_displacement;
  double D_prior_scale;
  int smooth_s;
  int model_hiatus;
  double H_top;
  double H_bottom;
  int N2;
  Eigen::Matrix<double, -1, 1> depth2;
  Eigen::Matrix<double, -1, 1> cumulative_mass;
  std::vector<int> which_c2;
  double p1_Mod_cumulative_mass_shape;
  double p2_Mod_cumulative_mass_shape;
  double p1_clymo_par;
  double p2_clymo_par;
  double p1_clymo_alpha;
  double p2_clymo_alpha;
  double cumulative_mass0;
  double min_depth;
  double max_depth;
  double data_age_range;
  double L_rate;
  int sample_L;
  double mem_alpha;
  double mem_beta;
  int first_K_fine;
  double acc_shape_adj;
  int infl_1dim__;
  int L_1dim__;
  int bt_error_1dim__;
  int c_ages_1dim__;
  int obs_err_infl_1dim__;
  int bt_age_1dim__;
  int smooth_x_1dim__;
  int age_het_1dim__;
  int disp_yrs_1dim__;
  int c_cumulative_mass_1dim__;
 
public:
  ~model_peathamstr() { }
  
  inline std::string model_name() const final { return "model_peathamstr"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_peathamstr(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_peathamstr_namespace::model_peathamstr";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 124;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 124;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 124;
      current_statement__ = 124;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 125;
      validate_non_negative_index("depth", "N", N);
      current_statement__ = 126;
      context__.validate_dims("data initialization","depth","double",
          context__.to_vec(N));
      depth = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(depth, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> depth_flat__;
        current_statement__ = 126;
        assign(depth_flat__, nil_index_list(), context__.vals_r("depth"),
          "assigning variable depth_flat__");
        current_statement__ = 126;
        pos__ = 1;
        current_statement__ = 126;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 126;
          assign(depth, cons_list(index_uni(sym1__), nil_index_list()),
            depth_flat__[(pos__ - 1)], "assigning variable depth");
          current_statement__ = 126;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 127;
      validate_non_negative_index("obs_age", "N", N);
      current_statement__ = 128;
      context__.validate_dims("data initialization","obs_age","double",
          context__.to_vec(N));
      obs_age = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(obs_age, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> obs_age_flat__;
        current_statement__ = 128;
        assign(obs_age_flat__, nil_index_list(), context__.vals_r("obs_age"),
          "assigning variable obs_age_flat__");
        current_statement__ = 128;
        pos__ = 1;
        current_statement__ = 128;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 128;
          assign(obs_age, cons_list(index_uni(sym1__), nil_index_list()),
            obs_age_flat__[(pos__ - 1)], "assigning variable obs_age");
          current_statement__ = 128;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 129;
      validate_non_negative_index("obs_err", "N", N);
      current_statement__ = 130;
      context__.validate_dims("data initialization","obs_err","double",
          context__.to_vec(N));
      obs_err = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(obs_err, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> obs_err_flat__;
        current_statement__ = 130;
        assign(obs_err_flat__, nil_index_list(), context__.vals_r("obs_err"),
          "assigning variable obs_err_flat__");
        current_statement__ = 130;
        pos__ = 1;
        current_statement__ = 130;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 130;
          assign(obs_err, cons_list(index_uni(sym1__), nil_index_list()),
            obs_err_flat__[(pos__ - 1)], "assigning variable obs_err");
          current_statement__ = 130;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 131;
      context__.validate_dims("data initialization","min_age","double",
          context__.to_vec());
      min_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 131;
      min_age = context__.vals_r("min_age")[(1 - 1)];
      current_statement__ = 132;
      context__.validate_dims("data initialization","n_lvls","int",
          context__.to_vec());
      n_lvls = std::numeric_limits<int>::min();
      
      current_statement__ = 132;
      n_lvls = context__.vals_i("n_lvls")[(1 - 1)];
      current_statement__ = 132;
      current_statement__ = 132;
      check_greater_or_equal(function__, "n_lvls", n_lvls, 1);
      current_statement__ = 133;
      context__.validate_dims("data initialization","K_fine","int",
          context__.to_vec());
      K_fine = std::numeric_limits<int>::min();
      
      current_statement__ = 133;
      K_fine = context__.vals_i("K_fine")[(1 - 1)];
      current_statement__ = 133;
      current_statement__ = 133;
      check_greater_or_equal(function__, "K_fine", K_fine, 0);
      current_statement__ = 134;
      context__.validate_dims("data initialization","K_tot","int",
          context__.to_vec());
      K_tot = std::numeric_limits<int>::min();
      
      current_statement__ = 134;
      K_tot = context__.vals_i("K_tot")[(1 - 1)];
      current_statement__ = 134;
      current_statement__ = 134;
      check_greater_or_equal(function__, "K_tot", K_tot, 0);
      current_statement__ = 135;
      validate_non_negative_index("parent", "K_tot", K_tot);
      current_statement__ = 136;
      context__.validate_dims("data initialization","parent","int",
          context__.to_vec(K_tot));
      parent = std::vector<int>(K_tot, std::numeric_limits<int>::min());
      
      current_statement__ = 136;
      assign(parent, nil_index_list(), context__.vals_i("parent"),
        "assigning variable parent");
      current_statement__ = 137;
      validate_non_negative_index("c_depth_bottom", "K_fine", K_fine);
      current_statement__ = 138;
      context__.validate_dims("data initialization","c_depth_bottom",
          "double",context__.to_vec(K_fine));
      c_depth_bottom = Eigen::Matrix<double, -1, 1>(K_fine);
      stan::math::fill(c_depth_bottom, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> c_depth_bottom_flat__;
        current_statement__ = 138;
        assign(c_depth_bottom_flat__, nil_index_list(),
          context__.vals_r("c_depth_bottom"),
          "assigning variable c_depth_bottom_flat__");
        current_statement__ = 138;
        pos__ = 1;
        current_statement__ = 138;
        for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
          current_statement__ = 138;
          assign(c_depth_bottom,
            cons_list(index_uni(sym1__), nil_index_list()),
            c_depth_bottom_flat__[(pos__ - 1)],
            "assigning variable c_depth_bottom");
          current_statement__ = 138;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 139;
      validate_non_negative_index("c_depth_top", "K_fine", K_fine);
      current_statement__ = 140;
      context__.validate_dims("data initialization","c_depth_top","double",
          context__.to_vec(K_fine));
      c_depth_top = Eigen::Matrix<double, -1, 1>(K_fine);
      stan::math::fill(c_depth_top, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> c_depth_top_flat__;
        current_statement__ = 140;
        assign(c_depth_top_flat__, nil_index_list(),
          context__.vals_r("c_depth_top"),
          "assigning variable c_depth_top_flat__");
        current_statement__ = 140;
        pos__ = 1;
        current_statement__ = 140;
        for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
          current_statement__ = 140;
          assign(c_depth_top, cons_list(index_uni(sym1__), nil_index_list()),
            c_depth_top_flat__[(pos__ - 1)], "assigning variable c_depth_top");
          current_statement__ = 140;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 141;
      context__.validate_dims("data initialization","delta_c","double",
          context__.to_vec());
      delta_c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 141;
      delta_c = context__.vals_r("delta_c")[(1 - 1)];
      current_statement__ = 141;
      current_statement__ = 141;
      check_greater_or_equal(function__, "delta_c", delta_c, 0);
      current_statement__ = 142;
      context__.validate_dims("data initialization","acc_mean_prior",
          "double",context__.to_vec());
      acc_mean_prior = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 142;
      acc_mean_prior = context__.vals_r("acc_mean_prior")[(1 - 1)];
      current_statement__ = 142;
      current_statement__ = 142;
      check_greater_or_equal(function__, "acc_mean_prior", acc_mean_prior, 0);
      current_statement__ = 143;
      context__.validate_dims("data initialization","acc_shape","double",
          context__.to_vec());
      acc_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 143;
      acc_shape = context__.vals_r("acc_shape")[(1 - 1)];
      current_statement__ = 143;
      current_statement__ = 143;
      check_greater_or_equal(function__, "acc_shape", acc_shape, 0);
      current_statement__ = 144;
      context__.validate_dims("data initialization","scale_shape","int",
          context__.to_vec());
      scale_shape = std::numeric_limits<int>::min();
      
      current_statement__ = 144;
      scale_shape = context__.vals_i("scale_shape")[(1 - 1)];
      current_statement__ = 144;
      current_statement__ = 144;
      check_greater_or_equal(function__, "scale_shape", scale_shape, 0);
      current_statement__ = 144;
      current_statement__ = 144;
      check_less_or_equal(function__, "scale_shape", scale_shape, 1);
      current_statement__ = 145;
      context__.validate_dims("data initialization","mem_mean","double",
          context__.to_vec());
      mem_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 145;
      mem_mean = context__.vals_r("mem_mean")[(1 - 1)];
      current_statement__ = 145;
      current_statement__ = 145;
      check_greater_or_equal(function__, "mem_mean", mem_mean, 0);
      current_statement__ = 146;
      context__.validate_dims("data initialization","mem_strength","double",
          context__.to_vec());
      mem_strength = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 146;
      mem_strength = context__.vals_r("mem_strength")[(1 - 1)];
      current_statement__ = 146;
      current_statement__ = 146;
      check_greater_or_equal(function__, "mem_strength", mem_strength, 0);
      current_statement__ = 147;
      context__.validate_dims("data initialization","nu","int",
          context__.to_vec());
      nu = std::numeric_limits<int>::min();
      
      current_statement__ = 147;
      nu = context__.vals_i("nu")[(1 - 1)];
      current_statement__ = 147;
      current_statement__ = 147;
      check_greater_or_equal(function__, "nu", nu, 0);
      current_statement__ = 148;
      validate_non_negative_index("which_c", "N", N);
      current_statement__ = 149;
      context__.validate_dims("data initialization","which_c","int",
          context__.to_vec(N));
      which_c = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 149;
      assign(which_c, nil_index_list(), context__.vals_i("which_c"),
        "assigning variable which_c");
      current_statement__ = 150;
      context__.validate_dims("data initialization","scale_R","int",
          context__.to_vec());
      scale_R = std::numeric_limits<int>::min();
      
      current_statement__ = 150;
      scale_R = context__.vals_i("scale_R")[(1 - 1)];
      current_statement__ = 150;
      current_statement__ = 150;
      check_greater_or_equal(function__, "scale_R", scale_R, 0);
      current_statement__ = 150;
      current_statement__ = 150;
      check_less_or_equal(function__, "scale_R", scale_R, 1);
      current_statement__ = 151;
      context__.validate_dims("data initialization","inflate_errors","int",
          context__.to_vec());
      inflate_errors = std::numeric_limits<int>::min();
      
      current_statement__ = 151;
      inflate_errors = context__.vals_i("inflate_errors")[(1 - 1)];
      current_statement__ = 151;
      current_statement__ = 151;
      check_greater_or_equal(function__, "inflate_errors", inflate_errors, 0);
      current_statement__ = 151;
      current_statement__ = 151;
      check_less_or_equal(function__, "inflate_errors", inflate_errors, 1);
      current_statement__ = 152;
      context__.validate_dims("data initialization","infl_shape_shape",
          "double",context__.to_vec());
      infl_shape_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 152;
      infl_shape_shape = context__.vals_r("infl_shape_shape")[(1 - 1)];
      current_statement__ = 152;
      current_statement__ = 152;
      check_greater_or_equal(function__, "infl_shape_shape",
                             infl_shape_shape, 0);
      current_statement__ = 153;
      context__.validate_dims("data initialization","infl_shape_mean",
          "double",context__.to_vec());
      infl_shape_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 153;
      infl_shape_mean = context__.vals_r("infl_shape_mean")[(1 - 1)];
      current_statement__ = 153;
      current_statement__ = 153;
      check_greater_or_equal(function__, "infl_shape_mean", infl_shape_mean,
                             0);
      current_statement__ = 154;
      context__.validate_dims("data initialization","infl_sigma_sd","double",
          context__.to_vec());
      infl_sigma_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 154;
      infl_sigma_sd = context__.vals_r("infl_sigma_sd")[(1 - 1)];
      current_statement__ = 154;
      current_statement__ = 154;
      check_greater_or_equal(function__, "infl_sigma_sd", infl_sigma_sd, 0);
      current_statement__ = 155;
      context__.validate_dims("data initialization","model_bioturbation",
          "int",context__.to_vec());
      model_bioturbation = std::numeric_limits<int>::min();
      
      current_statement__ = 155;
      model_bioturbation = context__.vals_i("model_bioturbation")[(1 - 1)];
      current_statement__ = 155;
      current_statement__ = 155;
      check_greater_or_equal(function__, "model_bioturbation",
                             model_bioturbation, 0);
      current_statement__ = 155;
      current_statement__ = 155;
      check_less_or_equal(function__, "model_bioturbation",
                          model_bioturbation, 1);
      current_statement__ = 156;
      context__.validate_dims("data initialization","I","int",
          context__.to_vec());
      I = std::numeric_limits<int>::min();
      
      current_statement__ = 156;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 156;
      current_statement__ = 156;
      check_greater_or_equal(function__, "I", I, 0);
      current_statement__ = 157;
      validate_non_negative_index("smooth_i", "I", I);
      current_statement__ = 158;
      validate_non_negative_index("smooth_i", "N", N);
      current_statement__ = 159;
      context__.validate_dims("data initialization","smooth_i","int",
          context__.to_vec(I, N));
      smooth_i = std::vector<std::vector<int>>(I, std::vector<int>(N, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> smooth_i_flat__;
        current_statement__ = 159;
        assign(smooth_i_flat__, nil_index_list(),
          context__.vals_i("smooth_i"), "assigning variable smooth_i_flat__");
        current_statement__ = 159;
        pos__ = 1;
        current_statement__ = 159;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 159;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 159;
            assign(smooth_i,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              smooth_i_flat__[(pos__ - 1)], "assigning variable smooth_i");
            current_statement__ = 159;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 160;
      context__.validate_dims("data initialization","L_prior_mean","double",
          context__.to_vec());
      L_prior_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 160;
      L_prior_mean = context__.vals_r("L_prior_mean")[(1 - 1)];
      current_statement__ = 160;
      current_statement__ = 160;
      check_greater_or_equal(function__, "L_prior_mean", L_prior_mean, 0);
      current_statement__ = 161;
      context__.validate_dims("data initialization","L_prior_shape","double",
          context__.to_vec());
      L_prior_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 161;
      L_prior_shape = context__.vals_r("L_prior_shape")[(1 - 1)];
      current_statement__ = 161;
      current_statement__ = 161;
      check_greater_or_equal(function__, "L_prior_shape", L_prior_shape, 0);
      current_statement__ = 162;
      validate_non_negative_index("n_ind", "N * model_bioturbation",
                                  (N * model_bioturbation));
      current_statement__ = 163;
      context__.validate_dims("data initialization","n_ind","double",
          context__.to_vec((N * model_bioturbation)));
      n_ind = Eigen::Matrix<double, -1, 1>((N * model_bioturbation));
      stan::math::fill(n_ind, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> n_ind_flat__;
        current_statement__ = 163;
        assign(n_ind_flat__, nil_index_list(), context__.vals_r("n_ind"),
          "assigning variable n_ind_flat__");
        current_statement__ = 163;
        pos__ = 1;
        current_statement__ = 163;
        for (int sym1__ = 1; sym1__ <= (N * model_bioturbation); ++sym1__) {
          current_statement__ = 163;
          assign(n_ind, cons_list(index_uni(sym1__), nil_index_list()),
            n_ind_flat__[(pos__ - 1)], "assigning variable n_ind");
          current_statement__ = 163;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 164;
      context__.validate_dims("data initialization","model_displacement",
          "int",context__.to_vec());
      model_displacement = std::numeric_limits<int>::min();
      
      current_statement__ = 164;
      model_displacement = context__.vals_i("model_displacement")[(1 - 1)];
      current_statement__ = 164;
      current_statement__ = 164;
      check_greater_or_equal(function__, "model_displacement",
                             model_displacement, 0);
      current_statement__ = 164;
      current_statement__ = 164;
      check_less_or_equal(function__, "model_displacement",
                          model_displacement, 1);
      current_statement__ = 165;
      context__.validate_dims("data initialization","D_prior_scale","double",
          context__.to_vec());
      D_prior_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 165;
      D_prior_scale = context__.vals_r("D_prior_scale")[(1 - 1)];
      current_statement__ = 165;
      current_statement__ = 165;
      check_greater_or_equal(function__, "D_prior_scale", D_prior_scale, 0);
      current_statement__ = 166;
      context__.validate_dims("data initialization","smooth_s","int",
          context__.to_vec());
      smooth_s = std::numeric_limits<int>::min();
      
      current_statement__ = 166;
      smooth_s = context__.vals_i("smooth_s")[(1 - 1)];
      current_statement__ = 166;
      current_statement__ = 166;
      check_greater_or_equal(function__, "smooth_s", smooth_s, 0);
      current_statement__ = 166;
      current_statement__ = 166;
      check_less_or_equal(function__, "smooth_s", smooth_s, 1);
      current_statement__ = 167;
      context__.validate_dims("data initialization","model_hiatus","int",
          context__.to_vec());
      model_hiatus = std::numeric_limits<int>::min();
      
      current_statement__ = 167;
      model_hiatus = context__.vals_i("model_hiatus")[(1 - 1)];
      current_statement__ = 167;
      current_statement__ = 167;
      check_greater_or_equal(function__, "model_hiatus", model_hiatus, 0);
      current_statement__ = 167;
      current_statement__ = 167;
      check_less_or_equal(function__, "model_hiatus", model_hiatus, 1);
      current_statement__ = 168;
      context__.validate_dims("data initialization","H_top","double",
          context__.to_vec());
      H_top = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 168;
      H_top = context__.vals_r("H_top")[(1 - 1)];
      current_statement__ = 169;
      context__.validate_dims("data initialization","H_bottom","double",
          context__.to_vec());
      H_bottom = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 169;
      H_bottom = context__.vals_r("H_bottom")[(1 - 1)];
      current_statement__ = 170;
      context__.validate_dims("data initialization","N2","int",
          context__.to_vec());
      N2 = std::numeric_limits<int>::min();
      
      current_statement__ = 170;
      N2 = context__.vals_i("N2")[(1 - 1)];
      current_statement__ = 170;
      current_statement__ = 170;
      check_greater_or_equal(function__, "N2", N2, 0);
      current_statement__ = 171;
      validate_non_negative_index("depth2", "N2", N2);
      current_statement__ = 172;
      context__.validate_dims("data initialization","depth2","double",
          context__.to_vec(N2));
      depth2 = Eigen::Matrix<double, -1, 1>(N2);
      stan::math::fill(depth2, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> depth2_flat__;
        current_statement__ = 172;
        assign(depth2_flat__, nil_index_list(), context__.vals_r("depth2"),
          "assigning variable depth2_flat__");
        current_statement__ = 172;
        pos__ = 1;
        current_statement__ = 172;
        for (int sym1__ = 1; sym1__ <= N2; ++sym1__) {
          current_statement__ = 172;
          assign(depth2, cons_list(index_uni(sym1__), nil_index_list()),
            depth2_flat__[(pos__ - 1)], "assigning variable depth2");
          current_statement__ = 172;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 173;
      validate_non_negative_index("cumulative_mass", "N2", N2);
      current_statement__ = 174;
      context__.validate_dims("data initialization","cumulative_mass",
          "double",context__.to_vec(N2));
      cumulative_mass = Eigen::Matrix<double, -1, 1>(N2);
      stan::math::fill(cumulative_mass, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> cumulative_mass_flat__;
        current_statement__ = 174;
        assign(cumulative_mass_flat__, nil_index_list(),
          context__.vals_r("cumulative_mass"),
          "assigning variable cumulative_mass_flat__");
        current_statement__ = 174;
        pos__ = 1;
        current_statement__ = 174;
        for (int sym1__ = 1; sym1__ <= N2; ++sym1__) {
          current_statement__ = 174;
          assign(cumulative_mass,
            cons_list(index_uni(sym1__), nil_index_list()),
            cumulative_mass_flat__[(pos__ - 1)],
            "assigning variable cumulative_mass");
          current_statement__ = 174;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 175;
      validate_non_negative_index("which_c2", "N2", N2);
      current_statement__ = 176;
      context__.validate_dims("data initialization","which_c2","int",
          context__.to_vec(N2));
      which_c2 = std::vector<int>(N2, std::numeric_limits<int>::min());
      
      current_statement__ = 176;
      assign(which_c2, nil_index_list(), context__.vals_i("which_c2"),
        "assigning variable which_c2");
      current_statement__ = 177;
      context__.validate_dims("data initialization",
          "p1_Mod_cumulative_mass_shape","double",context__.to_vec());
      p1_Mod_cumulative_mass_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 177;
      p1_Mod_cumulative_mass_shape = context__.vals_r("p1_Mod_cumulative_mass_shape")[
          (1 - 1)];
      current_statement__ = 177;
      current_statement__ = 177;
      check_greater_or_equal(function__, "p1_Mod_cumulative_mass_shape",
                             p1_Mod_cumulative_mass_shape, 0);
      current_statement__ = 178;
      context__.validate_dims("data initialization",
          "p2_Mod_cumulative_mass_shape","double",context__.to_vec());
      p2_Mod_cumulative_mass_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 178;
      p2_Mod_cumulative_mass_shape = context__.vals_r("p2_Mod_cumulative_mass_shape")[
          (1 - 1)];
      current_statement__ = 178;
      current_statement__ = 178;
      check_greater_or_equal(function__, "p2_Mod_cumulative_mass_shape",
                             p2_Mod_cumulative_mass_shape, 0);
      current_statement__ = 179;
      context__.validate_dims("data initialization","p1_clymo_par","double",
          context__.to_vec());
      p1_clymo_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 179;
      p1_clymo_par = context__.vals_r("p1_clymo_par")[(1 - 1)];
      current_statement__ = 179;
      current_statement__ = 179;
      check_greater_or_equal(function__, "p1_clymo_par", p1_clymo_par, 0);
      current_statement__ = 180;
      context__.validate_dims("data initialization","p2_clymo_par","double",
          context__.to_vec());
      p2_clymo_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 180;
      p2_clymo_par = context__.vals_r("p2_clymo_par")[(1 - 1)];
      current_statement__ = 180;
      current_statement__ = 180;
      check_greater_or_equal(function__, "p2_clymo_par", p2_clymo_par, 0);
      current_statement__ = 181;
      context__.validate_dims("data initialization","p1_clymo_alpha",
          "double",context__.to_vec());
      p1_clymo_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 181;
      p1_clymo_alpha = context__.vals_r("p1_clymo_alpha")[(1 - 1)];
      current_statement__ = 181;
      current_statement__ = 181;
      check_greater_or_equal(function__, "p1_clymo_alpha", p1_clymo_alpha, 0);
      current_statement__ = 182;
      context__.validate_dims("data initialization","p2_clymo_alpha",
          "double",context__.to_vec());
      p2_clymo_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 182;
      p2_clymo_alpha = context__.vals_r("p2_clymo_alpha")[(1 - 1)];
      current_statement__ = 182;
      current_statement__ = 182;
      check_greater_or_equal(function__, "p2_clymo_alpha", p2_clymo_alpha, 0);
      current_statement__ = 183;
      context__.validate_dims("data initialization","cumulative_mass0",
          "double",context__.to_vec());
      cumulative_mass0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 183;
      cumulative_mass0 = context__.vals_r("cumulative_mass0")[(1 - 1)];
      current_statement__ = 183;
      current_statement__ = 183;
      check_greater_or_equal(function__, "cumulative_mass0",
                             cumulative_mass0, 0);
      current_statement__ = 184;
      min_depth = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 184;
      min_depth = min(c_depth_top);
      current_statement__ = 185;
      max_depth = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 185;
      max_depth = max(c_depth_bottom);
      current_statement__ = 186;
      data_age_range = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 186;
      data_age_range = (max(obs_age) - min(obs_age));
      current_statement__ = 187;
      L_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 188;
      sample_L = std::numeric_limits<int>::min();
      
      current_statement__ = 189;
      mem_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 189;
      mem_alpha = (mem_strength * mem_mean);
      current_statement__ = 190;
      mem_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 190;
      mem_beta = (mem_strength * (1 - mem_mean));
      current_statement__ = 191;
      first_K_fine = std::numeric_limits<int>::min();
      
      current_statement__ = 191;
      first_K_fine = ((K_tot - K_fine) + 1);
      current_statement__ = 192;
      acc_shape_adj = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 197;
      if (logical_eq(scale_shape, 1)) {
        current_statement__ = 195;
        acc_shape_adj = (acc_shape * n_lvls);
      } else {
        current_statement__ = 193;
        acc_shape_adj = acc_shape;
      }
      current_statement__ = 198;
      L_rate = (L_prior_shape / L_prior_mean);
      current_statement__ = 203;
      if (logical_eq(L_prior_shape, 0)) {
        current_statement__ = 201;
        sample_L = 0;
      } else {
        current_statement__ = 199;
        sample_L = 1;
      }
      current_statement__ = 188;
      current_statement__ = 188;
      check_greater_or_equal(function__, "sample_L", sample_L, 0);
      current_statement__ = 188;
      current_statement__ = 188;
      check_less_or_equal(function__, "sample_L", sample_L, 1);
      current_statement__ = 189;
      current_statement__ = 189;
      check_greater_or_equal(function__, "mem_alpha", mem_alpha, 0);
      current_statement__ = 190;
      current_statement__ = 190;
      check_greater_or_equal(function__, "mem_beta", mem_beta, 0);
      current_statement__ = 191;
      current_statement__ = 191;
      check_greater_or_equal(function__, "first_K_fine", first_K_fine, 1);
      current_statement__ = 192;
      current_statement__ = 192;
      check_greater_or_equal(function__, "acc_shape_adj", acc_shape_adj, 1);
      current_statement__ = 204;
      validate_non_negative_index("alpha", "K_tot", K_tot);
      current_statement__ = 205;
      validate_non_negative_index("infl_mean", "inflate_errors",
                                  inflate_errors);
      current_statement__ = 206;
      validate_non_negative_index("infl_shape_1", "inflate_errors",
                                  inflate_errors);
      current_statement__ = 207;
      infl_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 207;
      infl_1dim__ = (inflate_errors ? N : 0);
      current_statement__ = 207;
      validate_non_negative_index("infl", "inflate_errors ? N : 0",
                                  infl_1dim__);
      current_statement__ = 208;
      L_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 208;
      L_1dim__ = (model_bioturbation * sample_L);
      current_statement__ = 208;
      validate_non_negative_index("L", "model_bioturbation * sample_L",
                                  L_1dim__);
      current_statement__ = 209;
      bt_error_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 209;
      bt_error_1dim__ = (model_bioturbation ? N : 0);
      current_statement__ = 209;
      validate_non_negative_index("bt_error", "model_bioturbation ? N : 0",
                                  bt_error_1dim__);
      current_statement__ = 210;
      validate_non_negative_index("D", "model_displacement",
                                  model_displacement);
      current_statement__ = 211;
      validate_non_negative_index("H_depth", "model_hiatus", model_hiatus);
      current_statement__ = 212;
      validate_non_negative_index("H_length", "model_hiatus", model_hiatus);
      current_statement__ = 213;
      validate_non_negative_index("clymo_par", "K_fine", K_fine);
      current_statement__ = 214;
      validate_non_negative_index("x", "K_fine", K_fine);
      current_statement__ = 215;
      c_ages_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 215;
      c_ages_1dim__ = (K_fine + 1);
      current_statement__ = 215;
      validate_non_negative_index("c_ages", "K_fine + 1", c_ages_1dim__);
      current_statement__ = 216;
      validate_non_negative_index("Mod_age", "N", N);
      current_statement__ = 217;
      validate_non_negative_index("infl_shape", "inflate_errors",
                                  inflate_errors);
      current_statement__ = 218;
      obs_err_infl_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 218;
      obs_err_infl_1dim__ = ((primitive_value(logical_eq(inflate_errors, 1))
                               || primitive_value(
                               logical_eq(model_displacement, 1))) ? N : 0);
      current_statement__ = 218;
      validate_non_negative_index("obs_err_infl",
                                  "(inflate_errors == 1 || model_displacement == 1) ? N : 0",
                                  obs_err_infl_1dim__);
      current_statement__ = 219;
      bt_age_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 219;
      bt_age_1dim__ = (model_bioturbation ? N : 0);
      current_statement__ = 219;
      validate_non_negative_index("bt_age", "model_bioturbation ? N : 0",
                                  bt_age_1dim__);
      current_statement__ = 220;
      smooth_x_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 220;
      smooth_x_1dim__ = ((primitive_value(logical_eq(model_bioturbation, 1))
                           || primitive_value(
                           logical_eq(model_displacement, 1))) ? N : 0);
      current_statement__ = 220;
      validate_non_negative_index("smooth_x",
                                  "(model_bioturbation == 1 || model_displacement == 1) ? N : 0",
                                  smooth_x_1dim__);
      current_statement__ = 221;
      age_het_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 221;
      age_het_1dim__ = (model_bioturbation ? N : 0);
      current_statement__ = 221;
      validate_non_negative_index("age_het", "model_bioturbation ? N : 0",
                                  age_het_1dim__);
      current_statement__ = 222;
      disp_yrs_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 222;
      disp_yrs_1dim__ = (model_displacement ? N : 0);
      current_statement__ = 222;
      validate_non_negative_index("disp_yrs", "model_displacement ? N : 0",
                                  disp_yrs_1dim__);
      current_statement__ = 223;
      c_cumulative_mass_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 223;
      c_cumulative_mass_1dim__ = (K_fine + 1);
      current_statement__ = 223;
      validate_non_negative_index("c_cumulative_mass", "K_fine + 1",
                                  c_cumulative_mass_1dim__);
      current_statement__ = 224;
      validate_non_negative_index("Mod_cumulative_mass", "N2", N2);
      current_statement__ = 225;
      validate_non_negative_index("nmp_rep", "K_fine", K_fine);
      current_statement__ = 226;
      validate_non_negative_index("nmu_rep", "K_fine", K_fine);
      current_statement__ = 227;
      validate_non_negative_index("nmr_rep", "K_fine", K_fine);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += K_tot;
      num_params_r__ += 1;
      num_params_r__ += inflate_errors;
      num_params_r__ += inflate_errors;
      num_params_r__ += infl_1dim__;
      num_params_r__ += L_1dim__;
      num_params_r__ += bt_error_1dim__;
      num_params_r__ += model_displacement;
      num_params_r__ += model_hiatus;
      num_params_r__ += model_hiatus;
      num_params_r__ += K_fine;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_peathamstr_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ R;
      R = DUMMY_VAR__;
      
      current_statement__ = 1;
      R = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        R = stan::math::lub_constrain(R, 0, 1, lp__);
      } else {
        current_statement__ = 1;
        R = stan::math::lub_constrain(R, 0, 1);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(K_tot);
      stan::math::fill(alpha, DUMMY_VAR__);
      
      current_statement__ = 2;
      alpha = in__.vector(K_tot);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha");
        } else {
          current_statement__ = 2;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
            "assigning variable alpha");
        }}
      local_scalar_t__ age0;
      age0 = DUMMY_VAR__;
      
      current_statement__ = 3;
      age0 = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        age0 = stan::math::lb_constrain(age0, min_age, lp__);
      } else {
        current_statement__ = 3;
        age0 = stan::math::lb_constrain(age0, min_age);
      }
      std::vector<local_scalar_t__> infl_mean;
      infl_mean = std::vector<local_scalar_t__>(inflate_errors, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 4;
        assign(infl_mean, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable infl_mean");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(infl_mean, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(infl_mean[(sym1__ - 1)], 0, lp__),
            "assigning variable infl_mean");
        } else {
          current_statement__ = 4;
          assign(infl_mean, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(infl_mean[(sym1__ - 1)], 0),
            "assigning variable infl_mean");
        }}
      std::vector<local_scalar_t__> infl_shape_1;
      infl_shape_1 = std::vector<local_scalar_t__>(inflate_errors, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 5;
        assign(infl_shape_1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable infl_shape_1");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(infl_shape_1,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(infl_shape_1[(sym1__ - 1)], 0, lp__),
            "assigning variable infl_shape_1");
        } else {
          current_statement__ = 5;
          assign(infl_shape_1,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(infl_shape_1[(sym1__ - 1)], 0),
            "assigning variable infl_shape_1");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> infl;
      infl = Eigen::Matrix<local_scalar_t__, -1, 1>(infl_1dim__);
      stan::math::fill(infl, DUMMY_VAR__);
      
      current_statement__ = 6;
      infl = in__.vector(infl_1dim__);
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
        current_statement__ = 6;
        if (jacobian__) {
          current_statement__ = 6;
          assign(infl, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(infl[(sym1__ - 1)], 0, lp__),
            "assigning variable infl");
        } else {
          current_statement__ = 6;
          assign(infl, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(infl[(sym1__ - 1)], 0),
            "assigning variable infl");
        }}
      std::vector<local_scalar_t__> L;
      L = std::vector<local_scalar_t__>(L_1dim__, DUMMY_VAR__);
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(L, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable L");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
        current_statement__ = 7;
        if (jacobian__) {
          current_statement__ = 7;
          assign(L, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(L[(sym1__ - 1)], 0, lp__),
            "assigning variable L");
        } else {
          current_statement__ = 7;
          assign(L, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(L[(sym1__ - 1)], 0),
            "assigning variable L");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> bt_error;
      bt_error = Eigen::Matrix<local_scalar_t__, -1, 1>(bt_error_1dim__);
      stan::math::fill(bt_error, DUMMY_VAR__);
      
      current_statement__ = 8;
      bt_error = in__.vector(bt_error_1dim__);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
        current_statement__ = 8;
        if (jacobian__) {
          current_statement__ = 8;
          assign(bt_error, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(bt_error[(sym1__ - 1)], 0, lp__),
            "assigning variable bt_error");
        } else {
          current_statement__ = 8;
          assign(bt_error, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(bt_error[(sym1__ - 1)], 0),
            "assigning variable bt_error");
        }}
      std::vector<local_scalar_t__> D;
      D = std::vector<local_scalar_t__>(model_displacement, DUMMY_VAR__);
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
        current_statement__ = 9;
        assign(D, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable D");}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
        current_statement__ = 9;
        if (jacobian__) {
          current_statement__ = 9;
          assign(D, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(D[(sym1__ - 1)], 0, lp__),
            "assigning variable D");
        } else {
          current_statement__ = 9;
          assign(D, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(D[(sym1__ - 1)], 0),
            "assigning variable D");
        }}
      std::vector<local_scalar_t__> H_depth;
      H_depth = std::vector<local_scalar_t__>(model_hiatus, DUMMY_VAR__);
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 10;
        assign(H_depth, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable H_depth");}
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 10;
        if (jacobian__) {
          current_statement__ = 10;
          assign(H_depth, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(H_depth[(sym1__ - 1)], H_top, H_bottom,
              lp__), "assigning variable H_depth");
        } else {
          current_statement__ = 10;
          assign(H_depth, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(H_depth[(sym1__ - 1)], H_top, H_bottom),
            "assigning variable H_depth");
        }}
      std::vector<local_scalar_t__> H_length;
      H_length = std::vector<local_scalar_t__>(model_hiatus, DUMMY_VAR__);
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 11;
        assign(H_length, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable H_length");}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 11;
        if (jacobian__) {
          current_statement__ = 11;
          assign(H_length, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(H_length[(sym1__ - 1)], 0,
              data_age_range, lp__), "assigning variable H_length");
        } else {
          current_statement__ = 11;
          assign(H_length, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(H_length[(sym1__ - 1)], 0,
              data_age_range), "assigning variable H_length");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> clymo_par;
      clymo_par = Eigen::Matrix<local_scalar_t__, -1, 1>(K_fine);
      stan::math::fill(clymo_par, DUMMY_VAR__);
      
      current_statement__ = 12;
      clymo_par = in__.vector(K_fine);
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        current_statement__ = 12;
        if (jacobian__) {
          current_statement__ = 12;
          assign(clymo_par, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(clymo_par[(sym1__ - 1)], 0, lp__),
            "assigning variable clymo_par");
        } else {
          current_statement__ = 12;
          assign(clymo_par, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(clymo_par[(sym1__ - 1)], 0),
            "assigning variable clymo_par");
        }}
      local_scalar_t__ clymo_alpha;
      clymo_alpha = DUMMY_VAR__;
      
      current_statement__ = 13;
      clymo_alpha = in__.scalar();
      current_statement__ = 13;
      if (jacobian__) {
        current_statement__ = 13;
        clymo_alpha = stan::math::lb_constrain(clymo_alpha, 0, lp__);
      } else {
        current_statement__ = 13;
        clymo_alpha = stan::math::lb_constrain(clymo_alpha, 0);
      }
      local_scalar_t__ Mod_cumulative_mass_shape;
      Mod_cumulative_mass_shape = DUMMY_VAR__;
      
      current_statement__ = 14;
      Mod_cumulative_mass_shape = in__.scalar();
      current_statement__ = 14;
      if (jacobian__) {
        current_statement__ = 14;
        Mod_cumulative_mass_shape = stan::math::lb_constrain(
                                      Mod_cumulative_mass_shape, 0, lp__);
      } else {
        current_statement__ = 14;
        Mod_cumulative_mass_shape = stan::math::lb_constrain(
                                      Mod_cumulative_mass_shape, 0);
      }
      local_scalar_t__ w;
      w = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> x;
      x = Eigen::Matrix<local_scalar_t__, -1, 1>(K_fine);
      stan::math::fill(x, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> c_ages;
      c_ages = Eigen::Matrix<local_scalar_t__, -1, 1>(c_ages_1dim__);
      stan::math::fill(c_ages, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Mod_age;
      Mod_age = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(Mod_age, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> infl_shape;
      infl_shape = std::vector<local_scalar_t__>(inflate_errors, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> obs_err_infl;
      obs_err_infl = Eigen::Matrix<local_scalar_t__, -1, 1>(obs_err_infl_1dim__);
      stan::math::fill(obs_err_infl, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> bt_age;
      bt_age = Eigen::Matrix<local_scalar_t__, -1, 1>(bt_age_1dim__);
      stan::math::fill(bt_age, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> smooth_x;
      smooth_x = Eigen::Matrix<local_scalar_t__, -1, 1>(smooth_x_1dim__);
      stan::math::fill(smooth_x, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> age_het;
      age_het = Eigen::Matrix<local_scalar_t__, -1, 1>(age_het_1dim__);
      stan::math::fill(age_het, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> disp_yrs;
      disp_yrs = Eigen::Matrix<local_scalar_t__, -1, 1>(disp_yrs_1dim__);
      stan::math::fill(disp_yrs, DUMMY_VAR__);
      
      current_statement__ = 31;
      if (logical_eq(scale_R, 1)) {
        current_statement__ = 29;
        w = pow(R, delta_c);
      } else {
        current_statement__ = 27;
        w = R;
      }
      current_statement__ = 32;
      assign(x, cons_list(index_uni(1), nil_index_list()),
        alpha[(first_K_fine - 1)], "assigning variable x");
      current_statement__ = 35;
      for (int i = 2; i <= K_fine; ++i) {
        current_statement__ = 33;
        assign(x, cons_list(index_uni(i), nil_index_list()),
          ((w * x[((i - 1) - 1)]) +
            ((1 - w) * alpha[(((i + first_K_fine) - 1) - 1)])),
          "assigning variable x");}
      current_statement__ = 36;
      assign(c_ages, cons_list(index_uni(1), nil_index_list()), age0,
        "assigning variable c_ages");
      current_statement__ = 37;
      assign(c_ages,
        cons_list(index_min_max(2, (K_fine + 1)), nil_index_list()),
        add(age0, cumulative_sum(multiply(x, delta_c))),
        "assigning variable c_ages");
      current_statement__ = 43;
      if (logical_eq(model_hiatus, 1)) {
        current_statement__ = 41;
        for (int i = 2; i <= (K_fine + 1); ++i) {
          current_statement__ = 39;
          if (logical_lt(H_depth[(1 - 1)], c_depth_top[((i - 1) - 1)])) {
            current_statement__ = 38;
            assign(c_ages, cons_list(index_uni(i), nil_index_list()),
              (c_ages[(i - 1)] + H_length[(1 - 1)]),
              "assigning variable c_ages");
          } }
      } 
      current_statement__ = 44;
      assign(Mod_age, nil_index_list(),
        add(
          rvalue(c_ages, cons_list(index_multi(which_c), nil_index_list()),
            "c_ages"),
          elt_multiply(
            rvalue(x, cons_list(index_multi(which_c), nil_index_list()), "x"),
            subtract(depth,
              rvalue(c_depth_top,
                cons_list(index_multi(which_c), nil_index_list()),
                "c_depth_top")))), "assigning variable Mod_age");
      current_statement__ = 55;
      if ((primitive_value(logical_eq(model_bioturbation, 1)) ||
          primitive_value(logical_eq(model_displacement, 1)))) {
        current_statement__ = 53;
        if (logical_eq(smooth_s, 1)) {
          current_statement__ = 51;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 49;
            assign(smooth_x, cons_list(index_uni(n), nil_index_list()),
              mean(
                rvalue(x,
                  cons_list(
                    index_multi(rvalue(smooth_i,
                                  cons_list(index_omni(),
                                    cons_list(index_uni(n), nil_index_list())),
                                  "smooth_i")), nil_index_list()), "x")),
              "assigning variable smooth_x");}
        } else {
          current_statement__ = 47;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 45;
            assign(smooth_x, cons_list(index_uni(n), nil_index_list()),
              x[(which_c[(n - 1)] - 1)], "assigning variable smooth_x");}
        }
      } 
      current_statement__ = 65;
      if (logical_eq(model_bioturbation, 1)) {
        current_statement__ = 59;
        if (logical_eq(sample_L, 1)) {
          current_statement__ = 56;
          assign(age_het, nil_index_list(), multiply(L[(1 - 1)], smooth_x),
            "assigning variable age_het");
          current_statement__ = 57;
          assign(bt_age, nil_index_list(),
            subtract(add(obs_age, bt_error), age_het),
            "assigning variable bt_age");
        } 
        current_statement__ = 63;
        if (logical_eq(sample_L, 0)) {
          current_statement__ = 60;
          assign(age_het, nil_index_list(), multiply(L_prior_mean, smooth_x),
            "assigning variable age_het");
          current_statement__ = 61;
          assign(bt_age, nil_index_list(),
            subtract(add(obs_age, bt_error), age_het),
            "assigning variable bt_age");
        } 
      } 
      current_statement__ = 79;
      if ((primitive_value(logical_eq(inflate_errors, 1)) && primitive_value(
          logical_eq(model_displacement, 1)))) {
        current_statement__ = 75;
        assign(disp_yrs, nil_index_list(), multiply(D[(1 - 1)], smooth_x),
          "assigning variable disp_yrs");
        current_statement__ = 76;
        assign(obs_err_infl, nil_index_list(),
          stan::math::sqrt(
            add(
              add(elt_multiply(obs_err, obs_err), elt_multiply(infl, infl)),
              elt_multiply(disp_yrs, disp_yrs))),
          "assigning variable obs_err_infl");
        current_statement__ = 77;
        assign(infl_shape, cons_list(index_uni(1), nil_index_list()),
          (infl_shape_1[(1 - 1)] + 1), "assigning variable infl_shape");
      } else {
        current_statement__ = 74;
        if ((primitive_value(logical_eq(inflate_errors, 1)) &&
            primitive_value(logical_eq(model_displacement, 0)))) {
          current_statement__ = 71;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 70;
            assign(obs_err_infl, cons_list(index_uni(n), nil_index_list()),
              stan::math::sqrt(
                (pow(obs_err[(n - 1)], 2) + pow(infl[(n - 1)], 2))),
              "assigning variable obs_err_infl");}
          current_statement__ = 72;
          assign(infl_shape, cons_list(index_uni(1), nil_index_list()),
            (infl_shape_1[(1 - 1)] + 1), "assigning variable infl_shape");
        } else {
          current_statement__ = 69;
          if ((primitive_value(logical_eq(inflate_errors, 0)) &&
              primitive_value(logical_eq(model_displacement, 1)))) {
            current_statement__ = 66;
            assign(disp_yrs, nil_index_list(),
              multiply(D[(1 - 1)], smooth_x), "assigning variable disp_yrs");
            current_statement__ = 67;
            assign(obs_err_infl, nil_index_list(),
              stan::math::sqrt(
                add(elt_multiply(obs_err, obs_err),
                  elt_multiply(disp_yrs, disp_yrs))),
              "assigning variable obs_err_infl");
          } 
        }
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> c_cumulative_mass;
      c_cumulative_mass = Eigen::Matrix<local_scalar_t__, -1, 1>(c_cumulative_mass_1dim__);
      stan::math::fill(c_cumulative_mass, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Mod_cumulative_mass;
      Mod_cumulative_mass = Eigen::Matrix<local_scalar_t__, -1, 1>(N2);
      stan::math::fill(Mod_cumulative_mass, DUMMY_VAR__);
      
      current_statement__ = 80;
      assign(c_cumulative_mass, cons_list(index_uni(1), nil_index_list()),
        cumulative_mass0, "assigning variable c_cumulative_mass");
      current_statement__ = 81;
      assign(c_cumulative_mass,
        cons_list(index_min_max(2, (K_fine + 1)), nil_index_list()),
        add(cumulative_mass0,
          divide(
            cumulative_sum(
              elt_multiply(
                elt_multiply(divide(clymo_par, clymo_alpha),
                  subtract(1,
                    stan::math::exp(
                      multiply(-clymo_alpha, multiply(x, delta_c))))),
                stan::math::exp(
                  multiply(-clymo_alpha,
                    rvalue(c_ages,
                      cons_list(index_min_max(1, K_fine), nil_index_list()),
                      "c_ages"))))), 1000)),
        "assigning variable c_cumulative_mass");
      {
        current_statement__ = 82;
        validate_non_negative_index("Mod_age2", "N2", N2);
        Eigen::Matrix<local_scalar_t__, -1, 1> Mod_age2;
        Mod_age2 = Eigen::Matrix<local_scalar_t__, -1, 1>(N2);
        stan::math::fill(Mod_age2, DUMMY_VAR__);
        
        current_statement__ = 83;
        assign(Mod_age2, nil_index_list(),
          add(
            rvalue(c_ages,
              cons_list(index_multi(which_c2), nil_index_list()), "c_ages"),
            elt_multiply(
              rvalue(x, cons_list(index_multi(which_c2), nil_index_list()),
                "x"),
              subtract(depth2,
                rvalue(c_depth_top,
                  cons_list(index_multi(which_c2), nil_index_list()),
                  "c_depth_top")))), "assigning variable Mod_age2");
        current_statement__ = 84;
        validate_non_negative_index("age2", "N2", N2);
        Eigen::Matrix<local_scalar_t__, -1, 1> age2;
        age2 = Eigen::Matrix<local_scalar_t__, -1, 1>(N2);
        stan::math::fill(age2, DUMMY_VAR__);
        
        current_statement__ = 85;
        assign(age2, nil_index_list(),
          elt_multiply(
            rvalue(x, cons_list(index_multi(which_c2), nil_index_list()),
              "x"),
            subtract(depth2,
              rvalue(c_depth_top,
                cons_list(index_multi(which_c2), nil_index_list()),
                "c_depth_top"))), "assigning variable age2");
        current_statement__ = 86;
        assign(Mod_cumulative_mass, nil_index_list(),
          add(
            rvalue(c_cumulative_mass,
              cons_list(index_multi(which_c2), nil_index_list()),
              "c_cumulative_mass"),
            divide(
              elt_multiply(
                elt_multiply(
                  divide(
                    rvalue(clymo_par,
                      cons_list(index_multi(which_c2), nil_index_list()),
                      "clymo_par"), clymo_alpha),
                  subtract(1, stan::math::exp(multiply(-clymo_alpha, age2)))),
                stan::math::exp(
                  multiply(-clymo_alpha, subtract(Mod_age2, age2)))), 1000)),
          "assigning variable Mod_cumulative_mass");
      }
      current_statement__ = 15;
      current_statement__ = 15;
      check_greater_or_equal(function__, "w", w, 0);
      current_statement__ = 15;
      current_statement__ = 15;
      check_less_or_equal(function__, "w", w, 1);
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 19;
        current_statement__ = 19;
        check_greater_or_equal(function__, "infl_shape[sym1__]",
                               infl_shape[(sym1__ - 1)], 0);}
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= disp_yrs_1dim__; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_greater_or_equal(function__, "disp_yrs[sym1__]",
                               disp_yrs[(sym1__ - 1)], 0);}
      {
        current_statement__ = 96;
        lp_accum__.add(
          normal_lpdf<propto__>(alpha[(1 - 1)], 0, (10 * acc_mean_prior)));
        current_statement__ = 97;
        lp_accum__.add(
          gamma_lpdf<propto__>(
            rvalue(alpha,
              cons_list(index_min_max(2, K_tot), nil_index_list()), "alpha"),
            acc_shape_adj,
            elt_divide(acc_shape_adj,
              rvalue(alpha,
                cons_list(
                  index_multi(rvalue(parent,
                                cons_list(index_min_max(2, K_tot),
                                  nil_index_list()), "parent")),
                  nil_index_list()), "alpha"))));
        current_statement__ = 98;
        lp_accum__.add(beta_lpdf<propto__>(R, mem_alpha, mem_beta));
        current_statement__ = 103;
        if (inflate_errors) {
          current_statement__ = 99;
          lp_accum__.add(
            gamma_lpdf<propto__>(infl_shape, infl_shape_shape,
              (infl_shape_shape / infl_shape_mean)));
          current_statement__ = 100;
          lp_accum__.add(normal_lpdf<propto__>(infl_mean, 0, infl_sigma_sd));
          current_statement__ = 101;
          lp_accum__.add(
            gamma_lpdf<propto__>(infl, infl_shape[(1 - 1)],
              (infl_shape[(1 - 1)] / infl_mean[(1 - 1)])));
        } 
        current_statement__ = 104;
        lp_accum__.add(gamma_lpdf<propto__>(L, L_prior_shape, L_rate));
        current_statement__ = 105;
        lp_accum__.add(normal_lpdf<propto__>(D, 0, D_prior_scale));
        current_statement__ = 106;
        lp_accum__.add(
          gamma_lpdf<propto__>(bt_error, n_ind, elt_divide(n_ind, age_het)));
        current_statement__ = 119;
        if (logical_eq(model_bioturbation, 1)) {
          current_statement__ = 117;
          if ((primitive_value(logical_eq(inflate_errors, 1)) ||
              primitive_value(logical_eq(model_displacement, 1)))) {
            current_statement__ = 115;
            lp_accum__.add(
              student_t_lpdf<propto__>(bt_age, nu, Mod_age, obs_err_infl));
          } else {
            current_statement__ = 113;
            lp_accum__.add(
              student_t_lpdf<propto__>(bt_age, nu, Mod_age, obs_err));
          }
        } else {
          current_statement__ = 111;
          if ((primitive_value(logical_eq(inflate_errors, 1)) ||
              primitive_value(logical_eq(model_displacement, 1)))) {
            current_statement__ = 109;
            lp_accum__.add(
              student_t_lpdf<propto__>(obs_age, nu, Mod_age, obs_err_infl));
          } else {
            current_statement__ = 107;
            lp_accum__.add(
              student_t_lpdf<propto__>(obs_age, nu, Mod_age, obs_err));
          }
        }
        current_statement__ = 120;
        lp_accum__.add(
          gamma_lpdf<propto__>(clymo_par, p1_clymo_par, p2_clymo_par));
        current_statement__ = 121;
        lp_accum__.add(
          gamma_lpdf<propto__>(clymo_alpha, p1_clymo_alpha, p2_clymo_alpha));
        current_statement__ = 122;
        lp_accum__.add(
          gamma_lpdf<propto__>(Mod_cumulative_mass_shape,
            p1_Mod_cumulative_mass_shape, p2_Mod_cumulative_mass_shape));
        current_statement__ = 123;
        lp_accum__.add(
          gamma_lpdf<propto__>(cumulative_mass, Mod_cumulative_mass_shape,
            elt_divide(Mod_cumulative_mass_shape, Mod_cumulative_mass)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_peathamstr_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double R;
      R = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      R = in__.scalar();
      current_statement__ = 1;
      R = stan::math::lub_constrain(R, 0, 1);
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(K_tot);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      alpha = in__.vector(K_tot);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
        current_statement__ = 2;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha");}
      double age0;
      age0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      age0 = in__.scalar();
      current_statement__ = 3;
      age0 = stan::math::lb_constrain(age0, min_age);
      std::vector<double> infl_mean;
      infl_mean = std::vector<double>(inflate_errors, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 4;
        assign(infl_mean, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable infl_mean");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 4;
        assign(infl_mean, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(infl_mean[(sym1__ - 1)], 0),
          "assigning variable infl_mean");}
      std::vector<double> infl_shape_1;
      infl_shape_1 = std::vector<double>(inflate_errors, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 5;
        assign(infl_shape_1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable infl_shape_1");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 5;
        assign(infl_shape_1, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(infl_shape_1[(sym1__ - 1)], 0),
          "assigning variable infl_shape_1");}
      Eigen::Matrix<double, -1, 1> infl;
      infl = Eigen::Matrix<double, -1, 1>(infl_1dim__);
      stan::math::fill(infl, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      infl = in__.vector(infl_1dim__);
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(infl, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(infl[(sym1__ - 1)], 0),
          "assigning variable infl");}
      std::vector<double> L;
      L = std::vector<double>(L_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(L, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable L");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(L, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(L[(sym1__ - 1)], 0),
          "assigning variable L");}
      Eigen::Matrix<double, -1, 1> bt_error;
      bt_error = Eigen::Matrix<double, -1, 1>(bt_error_1dim__);
      stan::math::fill(bt_error, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      bt_error = in__.vector(bt_error_1dim__);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
        current_statement__ = 8;
        assign(bt_error, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(bt_error[(sym1__ - 1)], 0),
          "assigning variable bt_error");}
      std::vector<double> D;
      D = std::vector<double>(model_displacement, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
        current_statement__ = 9;
        assign(D, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable D");}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
        current_statement__ = 9;
        assign(D, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(D[(sym1__ - 1)], 0),
          "assigning variable D");}
      std::vector<double> H_depth;
      H_depth = std::vector<double>(model_hiatus, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 10;
        assign(H_depth, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable H_depth");}
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 10;
        assign(H_depth, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(H_depth[(sym1__ - 1)], H_top, H_bottom),
          "assigning variable H_depth");}
      std::vector<double> H_length;
      H_length = std::vector<double>(model_hiatus, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 11;
        assign(H_length, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable H_length");}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 11;
        assign(H_length, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(H_length[(sym1__ - 1)], 0, data_age_range),
          "assigning variable H_length");}
      Eigen::Matrix<double, -1, 1> clymo_par;
      clymo_par = Eigen::Matrix<double, -1, 1>(K_fine);
      stan::math::fill(clymo_par, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      clymo_par = in__.vector(K_fine);
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        current_statement__ = 12;
        assign(clymo_par, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(clymo_par[(sym1__ - 1)], 0),
          "assigning variable clymo_par");}
      double clymo_alpha;
      clymo_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      clymo_alpha = in__.scalar();
      current_statement__ = 13;
      clymo_alpha = stan::math::lb_constrain(clymo_alpha, 0);
      double Mod_cumulative_mass_shape;
      Mod_cumulative_mass_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      Mod_cumulative_mass_shape = in__.scalar();
      current_statement__ = 14;
      Mod_cumulative_mass_shape = stan::math::lb_constrain(
                                    Mod_cumulative_mass_shape, 0);
      double w;
      w = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> x;
      x = Eigen::Matrix<double, -1, 1>(K_fine);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> c_ages;
      c_ages = Eigen::Matrix<double, -1, 1>(c_ages_1dim__);
      stan::math::fill(c_ages, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Mod_age;
      Mod_age = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Mod_age, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> infl_shape;
      infl_shape = std::vector<double>(inflate_errors, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> obs_err_infl;
      obs_err_infl = Eigen::Matrix<double, -1, 1>(obs_err_infl_1dim__);
      stan::math::fill(obs_err_infl, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> bt_age;
      bt_age = Eigen::Matrix<double, -1, 1>(bt_age_1dim__);
      stan::math::fill(bt_age, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> smooth_x;
      smooth_x = Eigen::Matrix<double, -1, 1>(smooth_x_1dim__);
      stan::math::fill(smooth_x, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> age_het;
      age_het = Eigen::Matrix<double, -1, 1>(age_het_1dim__);
      stan::math::fill(age_het, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> disp_yrs;
      disp_yrs = Eigen::Matrix<double, -1, 1>(disp_yrs_1dim__);
      stan::math::fill(disp_yrs, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> c_cumulative_mass;
      c_cumulative_mass = Eigen::Matrix<double, -1, 1>(c_cumulative_mass_1dim__);
      stan::math::fill(c_cumulative_mass, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Mod_cumulative_mass;
      Mod_cumulative_mass = Eigen::Matrix<double, -1, 1>(N2);
      stan::math::fill(Mod_cumulative_mass, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(R);
      for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
        vars__.emplace_back(alpha[(sym1__ - 1)]);}
      vars__.emplace_back(age0);
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        vars__.emplace_back(infl_mean[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        vars__.emplace_back(infl_shape_1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
        vars__.emplace_back(infl[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
        vars__.emplace_back(L[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
        vars__.emplace_back(bt_error[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
        vars__.emplace_back(D[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        vars__.emplace_back(H_depth[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        vars__.emplace_back(H_length[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        vars__.emplace_back(clymo_par[(sym1__ - 1)]);}
      vars__.emplace_back(clymo_alpha);
      vars__.emplace_back(Mod_cumulative_mass_shape);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 31;
      if (logical_eq(scale_R, 1)) {
        current_statement__ = 29;
        w = pow(R, delta_c);
      } else {
        current_statement__ = 27;
        w = R;
      }
      current_statement__ = 32;
      assign(x, cons_list(index_uni(1), nil_index_list()),
        alpha[(first_K_fine - 1)], "assigning variable x");
      current_statement__ = 35;
      for (int i = 2; i <= K_fine; ++i) {
        current_statement__ = 33;
        assign(x, cons_list(index_uni(i), nil_index_list()),
          ((w * x[((i - 1) - 1)]) +
            ((1 - w) * alpha[(((i + first_K_fine) - 1) - 1)])),
          "assigning variable x");}
      current_statement__ = 36;
      assign(c_ages, cons_list(index_uni(1), nil_index_list()), age0,
        "assigning variable c_ages");
      current_statement__ = 37;
      assign(c_ages,
        cons_list(index_min_max(2, (K_fine + 1)), nil_index_list()),
        add(age0, cumulative_sum(multiply(x, delta_c))),
        "assigning variable c_ages");
      current_statement__ = 43;
      if (logical_eq(model_hiatus, 1)) {
        current_statement__ = 41;
        for (int i = 2; i <= (K_fine + 1); ++i) {
          current_statement__ = 39;
          if (logical_lt(H_depth[(1 - 1)], c_depth_top[((i - 1) - 1)])) {
            current_statement__ = 38;
            assign(c_ages, cons_list(index_uni(i), nil_index_list()),
              (c_ages[(i - 1)] + H_length[(1 - 1)]),
              "assigning variable c_ages");
          } }
      } 
      current_statement__ = 44;
      assign(Mod_age, nil_index_list(),
        add(
          rvalue(c_ages, cons_list(index_multi(which_c), nil_index_list()),
            "c_ages"),
          elt_multiply(
            rvalue(x, cons_list(index_multi(which_c), nil_index_list()), "x"),
            subtract(depth,
              rvalue(c_depth_top,
                cons_list(index_multi(which_c), nil_index_list()),
                "c_depth_top")))), "assigning variable Mod_age");
      current_statement__ = 55;
      if ((primitive_value(logical_eq(model_bioturbation, 1)) ||
          primitive_value(logical_eq(model_displacement, 1)))) {
        current_statement__ = 53;
        if (logical_eq(smooth_s, 1)) {
          current_statement__ = 51;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 49;
            assign(smooth_x, cons_list(index_uni(n), nil_index_list()),
              mean(
                rvalue(x,
                  cons_list(
                    index_multi(rvalue(smooth_i,
                                  cons_list(index_omni(),
                                    cons_list(index_uni(n), nil_index_list())),
                                  "smooth_i")), nil_index_list()), "x")),
              "assigning variable smooth_x");}
        } else {
          current_statement__ = 47;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 45;
            assign(smooth_x, cons_list(index_uni(n), nil_index_list()),
              x[(which_c[(n - 1)] - 1)], "assigning variable smooth_x");}
        }
      } 
      current_statement__ = 65;
      if (logical_eq(model_bioturbation, 1)) {
        current_statement__ = 59;
        if (logical_eq(sample_L, 1)) {
          current_statement__ = 56;
          assign(age_het, nil_index_list(), multiply(L[(1 - 1)], smooth_x),
            "assigning variable age_het");
          current_statement__ = 57;
          assign(bt_age, nil_index_list(),
            subtract(add(obs_age, bt_error), age_het),
            "assigning variable bt_age");
        } 
        current_statement__ = 63;
        if (logical_eq(sample_L, 0)) {
          current_statement__ = 60;
          assign(age_het, nil_index_list(), multiply(L_prior_mean, smooth_x),
            "assigning variable age_het");
          current_statement__ = 61;
          assign(bt_age, nil_index_list(),
            subtract(add(obs_age, bt_error), age_het),
            "assigning variable bt_age");
        } 
      } 
      current_statement__ = 79;
      if ((primitive_value(logical_eq(inflate_errors, 1)) && primitive_value(
          logical_eq(model_displacement, 1)))) {
        current_statement__ = 75;
        assign(disp_yrs, nil_index_list(), multiply(D[(1 - 1)], smooth_x),
          "assigning variable disp_yrs");
        current_statement__ = 76;
        assign(obs_err_infl, nil_index_list(),
          stan::math::sqrt(
            add(
              add(elt_multiply(obs_err, obs_err), elt_multiply(infl, infl)),
              elt_multiply(disp_yrs, disp_yrs))),
          "assigning variable obs_err_infl");
        current_statement__ = 77;
        assign(infl_shape, cons_list(index_uni(1), nil_index_list()),
          (infl_shape_1[(1 - 1)] + 1), "assigning variable infl_shape");
      } else {
        current_statement__ = 74;
        if ((primitive_value(logical_eq(inflate_errors, 1)) &&
            primitive_value(logical_eq(model_displacement, 0)))) {
          current_statement__ = 71;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 70;
            assign(obs_err_infl, cons_list(index_uni(n), nil_index_list()),
              stan::math::sqrt(
                (pow(obs_err[(n - 1)], 2) + pow(infl[(n - 1)], 2))),
              "assigning variable obs_err_infl");}
          current_statement__ = 72;
          assign(infl_shape, cons_list(index_uni(1), nil_index_list()),
            (infl_shape_1[(1 - 1)] + 1), "assigning variable infl_shape");
        } else {
          current_statement__ = 69;
          if ((primitive_value(logical_eq(inflate_errors, 0)) &&
              primitive_value(logical_eq(model_displacement, 1)))) {
            current_statement__ = 66;
            assign(disp_yrs, nil_index_list(),
              multiply(D[(1 - 1)], smooth_x), "assigning variable disp_yrs");
            current_statement__ = 67;
            assign(obs_err_infl, nil_index_list(),
              stan::math::sqrt(
                add(elt_multiply(obs_err, obs_err),
                  elt_multiply(disp_yrs, disp_yrs))),
              "assigning variable obs_err_infl");
          } 
        }
      }
      current_statement__ = 80;
      assign(c_cumulative_mass, cons_list(index_uni(1), nil_index_list()),
        cumulative_mass0, "assigning variable c_cumulative_mass");
      current_statement__ = 81;
      assign(c_cumulative_mass,
        cons_list(index_min_max(2, (K_fine + 1)), nil_index_list()),
        add(cumulative_mass0,
          divide(
            cumulative_sum(
              elt_multiply(
                elt_multiply(divide(clymo_par, clymo_alpha),
                  subtract(1,
                    stan::math::exp(
                      multiply(-clymo_alpha, multiply(x, delta_c))))),
                stan::math::exp(
                  multiply(-clymo_alpha,
                    rvalue(c_ages,
                      cons_list(index_min_max(1, K_fine), nil_index_list()),
                      "c_ages"))))), 1000)),
        "assigning variable c_cumulative_mass");
      {
        current_statement__ = 82;
        validate_non_negative_index("Mod_age2", "N2", N2);
        Eigen::Matrix<double, -1, 1> Mod_age2;
        Mod_age2 = Eigen::Matrix<double, -1, 1>(N2);
        stan::math::fill(Mod_age2, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 83;
        assign(Mod_age2, nil_index_list(),
          add(
            rvalue(c_ages,
              cons_list(index_multi(which_c2), nil_index_list()), "c_ages"),
            elt_multiply(
              rvalue(x, cons_list(index_multi(which_c2), nil_index_list()),
                "x"),
              subtract(depth2,
                rvalue(c_depth_top,
                  cons_list(index_multi(which_c2), nil_index_list()),
                  "c_depth_top")))), "assigning variable Mod_age2");
        current_statement__ = 84;
        validate_non_negative_index("age2", "N2", N2);
        Eigen::Matrix<double, -1, 1> age2;
        age2 = Eigen::Matrix<double, -1, 1>(N2);
        stan::math::fill(age2, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 85;
        assign(age2, nil_index_list(),
          elt_multiply(
            rvalue(x, cons_list(index_multi(which_c2), nil_index_list()),
              "x"),
            subtract(depth2,
              rvalue(c_depth_top,
                cons_list(index_multi(which_c2), nil_index_list()),
                "c_depth_top"))), "assigning variable age2");
        current_statement__ = 86;
        assign(Mod_cumulative_mass, nil_index_list(),
          add(
            rvalue(c_cumulative_mass,
              cons_list(index_multi(which_c2), nil_index_list()),
              "c_cumulative_mass"),
            divide(
              elt_multiply(
                elt_multiply(
                  divide(
                    rvalue(clymo_par,
                      cons_list(index_multi(which_c2), nil_index_list()),
                      "clymo_par"), clymo_alpha),
                  subtract(1, stan::math::exp(multiply(-clymo_alpha, age2)))),
                stan::math::exp(
                  multiply(-clymo_alpha, subtract(Mod_age2, age2)))), 1000)),
          "assigning variable Mod_cumulative_mass");
      }
      current_statement__ = 15;
      current_statement__ = 15;
      check_greater_or_equal(function__, "w", w, 0);
      current_statement__ = 15;
      current_statement__ = 15;
      check_less_or_equal(function__, "w", w, 1);
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 19;
        current_statement__ = 19;
        check_greater_or_equal(function__, "infl_shape[sym1__]",
                               infl_shape[(sym1__ - 1)], 0);}
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= disp_yrs_1dim__; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_greater_or_equal(function__, "disp_yrs[sym1__]",
                               disp_yrs[(sym1__ - 1)], 0);}
      if (emit_transformed_parameters__) {
        vars__.emplace_back(w);
        for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
          vars__.emplace_back(x[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= c_ages_1dim__; ++sym1__) {
          vars__.emplace_back(c_ages[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(Mod_age[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
          vars__.emplace_back(infl_shape[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= obs_err_infl_1dim__; ++sym1__) {
          vars__.emplace_back(obs_err_infl[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= bt_age_1dim__; ++sym1__) {
          vars__.emplace_back(bt_age[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= smooth_x_1dim__; ++sym1__) {
          vars__.emplace_back(smooth_x[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= age_het_1dim__; ++sym1__) {
          vars__.emplace_back(age_het[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= disp_yrs_1dim__; ++sym1__) {
          vars__.emplace_back(disp_yrs[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= c_cumulative_mass_1dim__; ++sym1__) {
          vars__.emplace_back(c_cumulative_mass[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N2; ++sym1__) {
          vars__.emplace_back(Mod_cumulative_mass[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> nmp_rep;
      nmp_rep = Eigen::Matrix<double, -1, 1>(K_fine);
      stan::math::fill(nmp_rep, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> nmu_rep;
      nmu_rep = Eigen::Matrix<double, -1, 1>(K_fine);
      stan::math::fill(nmu_rep, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> nmr_rep;
      nmr_rep = Eigen::Matrix<double, -1, 1>(K_fine);
      stan::math::fill(nmr_rep, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 91;
      assign(nmp_rep, nil_index_list(),
        elt_divide(
          subtract(
            rvalue(c_cumulative_mass,
              cons_list(index_min_max(2, (K_fine + 1)), nil_index_list()),
              "c_cumulative_mass"),
            rvalue(c_cumulative_mass,
              cons_list(index_min_max(1, K_fine), nil_index_list()),
              "c_cumulative_mass")), multiply(x, delta_c)),
        "assigning variable nmp_rep");
      current_statement__ = 92;
      assign(nmu_rep, nil_index_list(),
        elt_divide(nmp_rep,
          stan::math::exp(
            multiply(-clymo_alpha,
              rvalue(c_ages,
                cons_list(index_min_max(2, (K_fine + 1)), nil_index_list()),
                "c_ages")))), "assigning variable nmu_rep");
      current_statement__ = 95;
      for (int k = 1; k <= K_fine; ++k) {
        current_statement__ = 93;
        assign(nmr_rep, cons_list(index_uni(k), nil_index_list()),
          sum(
            subtract(
              elt_divide(
                rvalue(nmp_rep,
                  cons_list(index_min_max(k, K_fine), nil_index_list()),
                  "nmp_rep"),
                stan::math::exp((-clymo_alpha * c_ages[(k - 1)]))),
              elt_divide(
                rvalue(nmp_rep,
                  cons_list(index_min_max(k, K_fine), nil_index_list()),
                  "nmp_rep"),
                stan::math::exp((-clymo_alpha * c_ages[((k + 1) - 1)]))))),
          "assigning variable nmr_rep");}
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        vars__.emplace_back(nmp_rep[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        vars__.emplace_back(nmu_rep[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        vars__.emplace_back(nmr_rep[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double R;
      R = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      R = context__.vals_r("R")[(1 - 1)];
      double R_free__;
      R_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      R_free__ = stan::math::lub_free(R, 0, 1);
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(K_tot);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 2;
        assign(alpha_flat__, nil_index_list(), context__.vals_r("alpha"),
          "assigning variable alpha_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
          current_statement__ = 2;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_flat__[(pos__ - 1)], "assigning variable alpha");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha_free__;
      alpha_free__ = Eigen::Matrix<double, -1, 1>(K_tot);
      stan::math::fill(alpha_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
        current_statement__ = 2;
        assign(alpha_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha_free__");}
      double age0;
      age0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      age0 = context__.vals_r("age0")[(1 - 1)];
      double age0_free__;
      age0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      age0_free__ = stan::math::lb_free(age0, min_age);
      std::vector<double> infl_mean;
      infl_mean = std::vector<double>(inflate_errors, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(infl_mean, nil_index_list(), context__.vals_r("infl_mean"),
        "assigning variable infl_mean");
      std::vector<double> infl_mean_free__;
      infl_mean_free__ = std::vector<double>(inflate_errors, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 4;
        assign(infl_mean_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(infl_mean[(sym1__ - 1)], 0),
          "assigning variable infl_mean_free__");}
      std::vector<double> infl_shape_1;
      infl_shape_1 = std::vector<double>(inflate_errors, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(infl_shape_1, nil_index_list(),
        context__.vals_r("infl_shape_1"), "assigning variable infl_shape_1");
      std::vector<double> infl_shape_1_free__;
      infl_shape_1_free__ = std::vector<double>(inflate_errors, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        current_statement__ = 5;
        assign(infl_shape_1_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(infl_shape_1[(sym1__ - 1)], 0),
          "assigning variable infl_shape_1_free__");}
      Eigen::Matrix<double, -1, 1> infl;
      infl = Eigen::Matrix<double, -1, 1>(infl_1dim__);
      stan::math::fill(infl, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> infl_flat__;
        current_statement__ = 6;
        assign(infl_flat__, nil_index_list(), context__.vals_r("infl"),
          "assigning variable infl_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
          current_statement__ = 6;
          assign(infl, cons_list(index_uni(sym1__), nil_index_list()),
            infl_flat__[(pos__ - 1)], "assigning variable infl");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> infl_free__;
      infl_free__ = Eigen::Matrix<double, -1, 1>(infl_1dim__);
      stan::math::fill(infl_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(infl_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(infl[(sym1__ - 1)], 0),
          "assigning variable infl_free__");}
      std::vector<double> L;
      L = std::vector<double>(L_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      assign(L, nil_index_list(), context__.vals_r("L"),
        "assigning variable L");
      std::vector<double> L_free__;
      L_free__ = std::vector<double>(L_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(L_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(L[(sym1__ - 1)], 0),
          "assigning variable L_free__");}
      Eigen::Matrix<double, -1, 1> bt_error;
      bt_error = Eigen::Matrix<double, -1, 1>(bt_error_1dim__);
      stan::math::fill(bt_error, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> bt_error_flat__;
        current_statement__ = 8;
        assign(bt_error_flat__, nil_index_list(),
          context__.vals_r("bt_error"), "assigning variable bt_error_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
          current_statement__ = 8;
          assign(bt_error, cons_list(index_uni(sym1__), nil_index_list()),
            bt_error_flat__[(pos__ - 1)], "assigning variable bt_error");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> bt_error_free__;
      bt_error_free__ = Eigen::Matrix<double, -1, 1>(bt_error_1dim__);
      stan::math::fill(bt_error_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
        current_statement__ = 8;
        assign(bt_error_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(bt_error[(sym1__ - 1)], 0),
          "assigning variable bt_error_free__");}
      std::vector<double> D;
      D = std::vector<double>(model_displacement, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      assign(D, nil_index_list(), context__.vals_r("D"),
        "assigning variable D");
      std::vector<double> D_free__;
      D_free__ = std::vector<double>(model_displacement, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
        current_statement__ = 9;
        assign(D_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(D[(sym1__ - 1)], 0),
          "assigning variable D_free__");}
      std::vector<double> H_depth;
      H_depth = std::vector<double>(model_hiatus, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      assign(H_depth, nil_index_list(), context__.vals_r("H_depth"),
        "assigning variable H_depth");
      std::vector<double> H_depth_free__;
      H_depth_free__ = std::vector<double>(model_hiatus, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 10;
        assign(H_depth_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(H_depth[(sym1__ - 1)], H_top, H_bottom),
          "assigning variable H_depth_free__");}
      std::vector<double> H_length;
      H_length = std::vector<double>(model_hiatus, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      assign(H_length, nil_index_list(), context__.vals_r("H_length"),
        "assigning variable H_length");
      std::vector<double> H_length_free__;
      H_length_free__ = std::vector<double>(model_hiatus, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        current_statement__ = 11;
        assign(H_length_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(H_length[(sym1__ - 1)], 0, data_age_range),
          "assigning variable H_length_free__");}
      Eigen::Matrix<double, -1, 1> clymo_par;
      clymo_par = Eigen::Matrix<double, -1, 1>(K_fine);
      stan::math::fill(clymo_par, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> clymo_par_flat__;
        current_statement__ = 12;
        assign(clymo_par_flat__, nil_index_list(),
          context__.vals_r("clymo_par"),
          "assigning variable clymo_par_flat__");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
          current_statement__ = 12;
          assign(clymo_par, cons_list(index_uni(sym1__), nil_index_list()),
            clymo_par_flat__[(pos__ - 1)], "assigning variable clymo_par");
          current_statement__ = 12;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> clymo_par_free__;
      clymo_par_free__ = Eigen::Matrix<double, -1, 1>(K_fine);
      stan::math::fill(clymo_par_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        current_statement__ = 12;
        assign(clymo_par_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(clymo_par[(sym1__ - 1)], 0),
          "assigning variable clymo_par_free__");}
      double clymo_alpha;
      clymo_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      clymo_alpha = context__.vals_r("clymo_alpha")[(1 - 1)];
      double clymo_alpha_free__;
      clymo_alpha_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      clymo_alpha_free__ = stan::math::lb_free(clymo_alpha, 0);
      double Mod_cumulative_mass_shape;
      Mod_cumulative_mass_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      Mod_cumulative_mass_shape = context__.vals_r("Mod_cumulative_mass_shape")[
          (1 - 1)];
      double Mod_cumulative_mass_shape_free__;
      Mod_cumulative_mass_shape_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      Mod_cumulative_mass_shape_free__ = stan::math::lb_free(
                                           Mod_cumulative_mass_shape, 0);
      vars__.emplace_back(R_free__);
      for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
        vars__.emplace_back(alpha_free__[(sym1__ - 1)]);}
      vars__.emplace_back(age0_free__);
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        vars__.emplace_back(infl_mean_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        vars__.emplace_back(infl_shape_1_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
        vars__.emplace_back(infl_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
        vars__.emplace_back(L_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
        vars__.emplace_back(bt_error_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
        vars__.emplace_back(D_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        vars__.emplace_back(H_depth_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
        vars__.emplace_back(H_length_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        vars__.emplace_back(clymo_par_free__[(sym1__ - 1)]);}
      vars__.emplace_back(clymo_alpha_free__);
      vars__.emplace_back(Mod_cumulative_mass_shape_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("R");
    names__.emplace_back("alpha");
    names__.emplace_back("age0");
    names__.emplace_back("infl_mean");
    names__.emplace_back("infl_shape_1");
    names__.emplace_back("infl");
    names__.emplace_back("L");
    names__.emplace_back("bt_error");
    names__.emplace_back("D");
    names__.emplace_back("H_depth");
    names__.emplace_back("H_length");
    names__.emplace_back("clymo_par");
    names__.emplace_back("clymo_alpha");
    names__.emplace_back("Mod_cumulative_mass_shape");
    names__.emplace_back("w");
    names__.emplace_back("x");
    names__.emplace_back("c_ages");
    names__.emplace_back("Mod_age");
    names__.emplace_back("infl_shape");
    names__.emplace_back("obs_err_infl");
    names__.emplace_back("bt_age");
    names__.emplace_back("smooth_x");
    names__.emplace_back("age_het");
    names__.emplace_back("disp_yrs");
    names__.emplace_back("c_cumulative_mass");
    names__.emplace_back("Mod_cumulative_mass");
    names__.emplace_back("nmp_rep");
    names__.emplace_back("nmu_rep");
    names__.emplace_back("nmr_rep");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K_tot)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(inflate_errors)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(inflate_errors)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(infl_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(bt_error_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(model_displacement)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(model_hiatus)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(model_hiatus)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K_fine)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K_fine)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(c_ages_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(inflate_errors)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(obs_err_infl_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(bt_age_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(smooth_x_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(age_het_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(disp_yrs_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(c_cumulative_mass_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K_fine)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K_fine)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K_fine)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "R");
    for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "age0");
    for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "infl_mean" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "infl_shape_1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "infl" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bt_error" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "D" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "H_depth" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "H_length" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "clymo_par" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "clymo_alpha");
    param_names__.emplace_back(std::string() + "Mod_cumulative_mass_shape");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "w");
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= c_ages_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c_ages" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "infl_shape" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= obs_err_infl_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "obs_err_infl" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= bt_age_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "bt_age" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= smooth_x_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "smooth_x" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= age_het_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "age_het" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= disp_yrs_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "disp_yrs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= c_cumulative_mass_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c_cumulative_mass" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_cumulative_mass" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nmp_rep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nmu_rep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nmr_rep" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "R");
    for (int sym1__ = 1; sym1__ <= K_tot; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "age0");
    for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "infl_mean" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "infl_shape_1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= infl_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "infl" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= bt_error_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bt_error" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= model_displacement; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "D" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "H_depth" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= model_hiatus; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "H_length" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "clymo_par" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "clymo_alpha");
    param_names__.emplace_back(std::string() + "Mod_cumulative_mass_shape");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "w");
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= c_ages_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c_ages" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_age" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= inflate_errors; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "infl_shape" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= obs_err_infl_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "obs_err_infl" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= bt_age_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "bt_age" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= smooth_x_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "smooth_x" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= age_het_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "age_het" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= disp_yrs_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "disp_yrs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= c_cumulative_mass_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c_cumulative_mass" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Mod_cumulative_mass" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nmp_rep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nmu_rep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= K_fine; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nmr_rep" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"R\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << K_tot << "},\"block\":\"parameters\"},{\"name\":\"age0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"infl_mean\",\"type\":{\"name\":\"array\",\"length\":" << inflate_errors << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"infl_shape_1\",\"type\":{\"name\":\"array\",\"length\":" << inflate_errors << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"infl\",\"type\":{\"name\":\"vector\",\"length\":" << infl_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"array\",\"length\":" << L_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bt_error\",\"type\":{\"name\":\"vector\",\"length\":" << bt_error_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"D\",\"type\":{\"name\":\"array\",\"length\":" << model_displacement << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"H_depth\",\"type\":{\"name\":\"array\",\"length\":" << model_hiatus << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"H_length\",\"type\":{\"name\":\"array\",\"length\":" << model_hiatus << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"clymo_par\",\"type\":{\"name\":\"vector\",\"length\":" << K_fine << "},\"block\":\"parameters\"},{\"name\":\"clymo_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Mod_cumulative_mass_shape\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"vector\",\"length\":" << K_fine << "},\"block\":\"transformed_parameters\"},{\"name\":\"c_ages\",\"type\":{\"name\":\"vector\",\"length\":" << c_ages_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"infl_shape\",\"type\":{\"name\":\"array\",\"length\":" << inflate_errors << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"obs_err_infl\",\"type\":{\"name\":\"vector\",\"length\":" << obs_err_infl_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"bt_age\",\"type\":{\"name\":\"vector\",\"length\":" << bt_age_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"smooth_x\",\"type\":{\"name\":\"vector\",\"length\":" << smooth_x_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"age_het\",\"type\":{\"name\":\"vector\",\"length\":" << age_het_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"disp_yrs\",\"type\":{\"name\":\"vector\",\"length\":" << disp_yrs_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"c_cumulative_mass\",\"type\":{\"name\":\"vector\",\"length\":" << c_cumulative_mass_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_cumulative_mass\",\"type\":{\"name\":\"vector\",\"length\":" << N2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"nmp_rep\",\"type\":{\"name\":\"vector\",\"length\":" << K_fine << "},\"block\":\"generated_quantities\"},{\"name\":\"nmu_rep\",\"type\":{\"name\":\"vector\",\"length\":" << K_fine << "},\"block\":\"generated_quantities\"},{\"name\":\"nmr_rep\",\"type\":{\"name\":\"vector\",\"length\":" << K_fine << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"R\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << K_tot << "},\"block\":\"parameters\"},{\"name\":\"age0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"infl_mean\",\"type\":{\"name\":\"array\",\"length\":" << inflate_errors << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"infl_shape_1\",\"type\":{\"name\":\"array\",\"length\":" << inflate_errors << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"infl\",\"type\":{\"name\":\"vector\",\"length\":" << infl_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"array\",\"length\":" << L_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bt_error\",\"type\":{\"name\":\"vector\",\"length\":" << bt_error_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"D\",\"type\":{\"name\":\"array\",\"length\":" << model_displacement << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"H_depth\",\"type\":{\"name\":\"array\",\"length\":" << model_hiatus << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"H_length\",\"type\":{\"name\":\"array\",\"length\":" << model_hiatus << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"clymo_par\",\"type\":{\"name\":\"vector\",\"length\":" << K_fine << "},\"block\":\"parameters\"},{\"name\":\"clymo_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Mod_cumulative_mass_shape\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"vector\",\"length\":" << K_fine << "},\"block\":\"transformed_parameters\"},{\"name\":\"c_ages\",\"type\":{\"name\":\"vector\",\"length\":" << c_ages_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_age\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"infl_shape\",\"type\":{\"name\":\"array\",\"length\":" << inflate_errors << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"obs_err_infl\",\"type\":{\"name\":\"vector\",\"length\":" << obs_err_infl_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"bt_age\",\"type\":{\"name\":\"vector\",\"length\":" << bt_age_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"smooth_x\",\"type\":{\"name\":\"vector\",\"length\":" << smooth_x_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"age_het\",\"type\":{\"name\":\"vector\",\"length\":" << age_het_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"disp_yrs\",\"type\":{\"name\":\"vector\",\"length\":" << disp_yrs_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"c_cumulative_mass\",\"type\":{\"name\":\"vector\",\"length\":" << c_cumulative_mass_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"Mod_cumulative_mass\",\"type\":{\"name\":\"vector\",\"length\":" << N2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"nmp_rep\",\"type\":{\"name\":\"vector\",\"length\":" << K_fine << "},\"block\":\"generated_quantities\"},{\"name\":\"nmu_rep\",\"type\":{\"name\":\"vector\",\"length\":" << K_fine << "},\"block\":\"generated_quantities\"},{\"name\":\"nmr_rep\",\"type\":{\"name\":\"vector\",\"length\":" << K_fine << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_peathamstr_namespace::model_peathamstr;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_peathamstr_namespace::profiles__;
}
#endif
#endif
